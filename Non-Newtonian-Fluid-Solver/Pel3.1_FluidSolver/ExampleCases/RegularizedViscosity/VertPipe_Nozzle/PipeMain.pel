MODULE PEL_Application
   
   concrete_name = "FE_StepByStepProgression"
   // Domain: Mesh is generated by GAMBIT
   $SS_gridname="Hrp2L10.neu"
   
   geometry="axisymmetrical"
   
   $DS_Radius = 0.025 
   
   // Time Stepping
   $DS_DT = 0.1 
   $DS_TEND = 30.0 
   
   $DS_CourantNumber=0.5
   
   $IS_save = 50 // number of images that should be stored for t = 0..$DS_TEND
   
   $DS_X = component( $DV_X, 0 )
   $DS_Y = component( $DV_X, 1 )
   //-----------------------------------------------
   // Fluid Parameters:
   //-----------------------------------------------
   // Initial values for concentration (decides which fluid is left resp. right)
   // fluid 1 if C=0
   // fluid 2 if C=1 
   $DS_InitialC = 1.0 // pipe is filled with fluid 2
   // in the following we assume that fluid 1 is injected
   //-----------------------------------------------
   // Fluid 1 (C=0)
   //-----------------------------------------------
   $DS_Rho1 = 1000.0
   $DS_Mu1 =0.012737 // viscosity scale for fluid 1 as needed for Reynolds
   // mu(C) = kappa*gamma^(n-1)(u) + Bn/gamma(u)
   $DS_Bn1 = 0.0 // Bn1= tau/(mu*(U0/D)^n)
   $DS_kappa1 = 1.0 // = $DS_Mu1 if Bn1 = 0.0
   $DS_n1 = 1.
   
   
   //-----------------------------------------------
   //Fluid 2 (C=1) sit-in fluid
   //-----------------------------------------------
   $DS_Rho2 = 1000.0
   // mu(C) = kappa*gamma^(n-1)(u) + Bn/gamma(u)
   $DS_Bn2 = 5.0 // Bn= tau/(mu*(U0/D)^n)
   $DS_Mu2 = 0.012737
   $DS_kappa2 = 1.0 // = mu2 if Bn2 = 0.0
   $DS_n2 = 1.
   
   //-----------------------------------------------
   // For the BC we need 
   //-----------------------------------------------
   // mean velocity U0=1./diameter if flowrate=1
   $DS_scaleU = 1.0
   // $DS_U0 = $DS_scaleU * 1./(2.*$DS_Radius)
   $DS_U0=5.095e-03
   $DS_U1= 1.5400 // velocity inner fluid
   $DS_U2= 1.0300 // velocity outer fluid
   
   $DS_g = 9.81 // gravity (only used for Froude number)
   
   $DS_phi= $DS_Rho1/$DS_Rho2
   $DS_Fr = ($DS_U0 * $DS_U0) / ($DS_g * $DS_Radius) // Froude number 
   $DS_Re = $DS_Rho2*$DS_U0*$DS_Radius/$DS_Mu2 // Reynolds number = rho2*U0*R/mu2 
   $DS_St = $DS_Fr/$DS_Re // Stokes number
   
   //-----------------------------------------------
   // Init condition: U = 0.0 for t=0 inside the whole channel
   // Inflow velocity profile for t>0 and (x,y)=(x,0)
   // Newtonian_VelocityProfile($DS_X, $DS_Uscale, LeftCorner, RightCorner) 
   //-----------------------------------------------
   // $DS_InflowUin = Newtonian_VelocityProfile($DS_X, $DS_U1, -0.2, 0.2) //sara
   // $DS_InflowUoutR = Newtonian_VelocityProfile($DS_X, $DS_U2, 0.3, 1.0) //sara
   
   
   //***********************************************
   //***********************************************
   $BS_SteadyStateAdaptor = false // Apply steady state break critereon
   $BS_Advection = true 
   $BS_Nonlinear = true // Consider nonlinear viscosity term (true for non-Newtonian fluids)
   
   // Field Level for time dependent fields
   $IS_CURRENT = 0 // storage of the current field
   $IS_INITIAL = 1 // storage of the previous field
   $IS_NONLIN = 2 // storage of the nonlinear contribution
   // + storage for convergence between time steps
   
   MODULE FE_TimeIterator
      time_initial = 0.0
      time_end = $DS_TEND
      time_step = $DS_DT 
   END MODULE FE_TimeIterator
   
   graphics_output_times = regular_vector( 0., $IS_save, $DS_TEND )
   state_saving_times = regular_vector( 0.0, $IS_save, $DS_TEND )
   
   // saving for restart
   MODULE PEL_ObjectWriter
      type = "last_two_cycles"
      file_name_0 = join( getcwd(), "SFrestart_0.pel" )
      file_name_1 = join( getcwd(), "SFrestart_1.pel" )
      output_format = "hybrid"
   END MODULE PEL_ObjectWriter
   
   
   if( $BS_SteadyStateAdaptor = true )
   MODULE FE_TimeIteratorAdapter
      // Stop when :
      // max( u_current-u_initial )/max( u_current, 1. ) < 1.E-5
      // max( p_current-p_initial )/max( p_current, 1. ) < 1.E-5
      concrete_name = "FE_SteadyStateAdapter"
      initial_level = $IS_NONLIN
      current_level = $IS_CURRENT 
      discrete_fields = < "velocity" "pressure" >
      minimal_error = < 1.E-5 1.E-4 >
      MODULE post_processing
         banner = true
         file_name = "convergence.txt"
      END MODULE post_processing
   END MODULE FE_TimeIteratorAdapter
   
   
/////////////////////////////////////////////////////////////////
   // PDE_DomainAndFields
/////////////////////////////////////////////////////////////////
   MODULE PDE_DomainAndFields
      verbose_level = 1
      nb_space_dimensions = 2
      type = "finite_element"
      check_meshing_consistency = true
/////////////////////////////////////////////////////////////////
      // Define meshing
      // - no splitting if in sequential mode
      // - automatic splitting using METIS if in true parallel mode
/////////////////////////////////////////////////////////////////
      if( nb_ranks() = 1 )
      MODULE GE_Meshing
         concrete_name = "GE_GambitMeshing"
         mesh_polyhedron = < "GE_Segment" "GE_Rectangle" >
         filename = join( this_file_dir(), $SS_gridname )
      END MODULE GE_Meshing
      
      
      MODULE macro_colors
         
                  symmetry=< "axis" "axis_outlet" "axis_inlet_inner_fluid">

         no_slip = <
         // walls (pipe) right 
	     "right_wall1" "right_wall2"
         // connection points 
         "right_wall1_right_wall2"
         // corner points
         "outlet_right_wall2"
         "inlet_outer_fluid_right_right_wall1"
         // walls (nozzle)         
         "left_wall_right_solid" "top_wall_right_solid" "right_wall_right_solid"
         // corner points
         "left_wall_right_solid_top_wall_right_solid"
         "right_wall_right_solid_top_wall_right_solid"
         "inlet_outer_fluid_right_right_wall_right_solid"
         >
         
         inlet_right_fluid  = <"inlet_outer_fluid_right">
         inlet_middle_fluid = <"inlet_inner_fluid">
         left_node = <"inlet_inner_fluid_left_wall_right_solid">
         right_node=< "inlet_outer_fluid_right_right_wall_right_solid" "inlet_outer_fluid_right_right_wall1" >

      END MODULE macro_colors
      
      MODULE interior_fields
         
         MODULE uu
            name = "velocity"
            nb_components = 2
            element_name = "PDE_2D_Q1_4nodes"
            storage_depth = 3
            
            MODULE DOFs_values
               type = "uniformly_defined"
               value = vector( 0.0, 0.0 )
            END MODULE DOFs_values
            MODULE DOFs_imposed_value
               MODULE Dirichlet#no_slip
                  location = "on_bounds"
                  type = "uniformly_defined"
                  color = "no_slip"
                  value = vector( 0.0, 0.0 )
               END MODULE Dirichlet#no_slip
               MODULE Dirichlet#InflowNozzle
                  location = "on_bounds"
                  type = "vertex_defined"
                  color = "inlet_middle_fluid"
                  MODULE value
                     default = vector( 0.0, $DS_U1 )
                     left_node = vector( 0.0, 0.0 )
                  END MODULE value
               END MODULE Dirichlet#InflowNozzle
               
               MODULE Dirichlet#InflowRightFluid
                  location = "on_bounds"
                  type = "vertex_defined"
                  color = "inlet_right_fluid"
                  MODULE value
                     default = vector( 0.0, $DS_U2 )
                     right_node = vector( 0.0, 0.0 )
                  END MODULE value
               END MODULE Dirichlet#InflowRightFluid
               MODULE symmetry
                  location = "on_bounds"
                  color = "symmetry"
                  component = 0
                  type = "uniformly_defined"
                  value = < 0.0 >
               END MODULE symmetry
            END MODULE DOFs_imposed_value
         END MODULE uu
         
         MODULE pp
            name = "pressure"
            nb_components = 1
            element_name = "PDE_2D_Q0_1node"
            storage_depth = 3
            MODULE DOFs_values
               type = "uniformly_defined"
               value = < 0.0 >
            END MODULE DOFs_values
         END MODULE pp
         
         MODULE cc
            name = "CC"
            nb_components = 1
            element_name = "PDE_2D_Q0_1node"
            storage_depth = 3
            MODULE DOFs_values
               type = "uniformly_defined" 
               value = vector( $DS_InitialC )
            END MODULE DOFs_values
         END MODULE cc
         
      END MODULE interior_fields
      
      MODULE boundary_conditions
         MODULE Inflow#CCin
            field = "CC"
            color = "inlet_middle_fluid"
            type = "Dirichlet"
            value = 0.0 
         END MODULE Inflow#CCin
         MODULE Inflow#CCinRight
            field = "CC"
            color = "inlet_right_fluid"
            type = "Dirichlet"
            value = 1.0 
         END MODULE Inflow#CCinRight
         MODULE Outflow#Stress
            field = "velocity"
            color = "outlet"
            type = "Stress"
            // value = vector( 0.0, $DS_phi/$DS_St * $DS_Y) 
            value = vector( 0.0, 0.0) 
         END MODULE Outflow#Stress
      END MODULE boundary_conditions
      
      MODULE PDE_ResultSaver
         writers = < "PEL_VTKwriter" "PEL_MATLABwriter" >
         writing_mode = "text"
         files_basename = "save"
         MODULE uu
            where_to_save = "at_vertices"
            entry_name = "UU"
            field = "velocity"
         END MODULE uu
         MODULE pp
            where_to_save = "at_cell_centers"
            entry_name = "PP"
            field = "pressure"
         END MODULE pp
         MODULE cc
            where_to_save = "at_cell_centers"
            entry_name = "CC"
            field = "CC"
         END MODULE cc
      END MODULE PDE_ResultSaver
   END MODULE PDE_DomainAndFields
   
   
   // -----------------------------------------------
   // FE_Parameters
   // -----------------------------------------------
   #include "SFparameter.pel"
   
   // -----------------------------------------------
   // One Step Iteration Stage
   // ----------------------------------------------- 
   MODULE FE_OneStepIteration
      concrete_name = "FE_SplitSystem" 
      MODULE list_of_FE_OneStepIteration
         #include "ADsolver.pel"
         #include "NSsolver.pel" 
         // ------------------------------------
         // FE_OneStepIteration: postprocessing
         // ------------------------------------
         MODULE FE_OneStepIteration#parameters_postprocessing
            concrete_name = "FE_ParameterSaver"
            MODULE parameters
               MODULE param#1
                  type = "at_cell_centers"
                  parameter_name = "Viscosity"
                  entry_name = "viscosity"
               END MODULE param#1
               MODULE param#2
                  type = "at_cell_centers"
                  parameter_name = "secinvgammadot"
                  entry_name = "SecInvGammaDot"
               END MODULE param#2
               MODULE param#3
                  type = "at_cell_centers"
                  parameter_name = "Reynolds"
                  entry_name = "Reynolds"
               END MODULE param#3
               MODULE param#4
                  type = "at_cell_centers"
                  parameter_name = "ExtForce"
                  entry_name = "ExtForce"
               END MODULE param#4
            END MODULE parameters
         END MODULE FE_OneStepIteration#parameters_postprocessing
         
         
         // ----------------------------------------------------------
         // FE_OeStepIteration: FE_DOFsCopy (Setup of the new timestep)
         // - If another solver needs the the correct $IS_INITIAL at the new time step during
         // the execution of "do_before_inner_iteration_stage", this part has to be called 
         // after the other one step iterations.
         // ----------------------------------------------------------
         MODULE FE_OneStepIteration#DOF_copy
            concrete_name = "FE_DOFsCopy"
            MODULE uu#1
               field = "velocity"
               source = $IS_INITIAL
               target = $IS_NONLIN
            END MODULE uu#1
            MODULE uu#2
               field = "velocity"
               source = $IS_CURRENT
               target = $IS_INITIAL
            END MODULE uu#2
            MODULE pp#1
               field = "pressure"
               source = $IS_INITIAL
               target = $IS_NONLIN
            END MODULE pp#1
            MODULE pp#2
               field = "pressure"
               source = $IS_CURRENT
               target = $IS_INITIAL
            END MODULE pp#2
         END MODULE FE_OneStepIteration#DOF_copy
         
      END MODULE list_of_FE_OneStepIteration
   END MODULE FE_OneStepIteration
   
END MODULE PEL_Application

