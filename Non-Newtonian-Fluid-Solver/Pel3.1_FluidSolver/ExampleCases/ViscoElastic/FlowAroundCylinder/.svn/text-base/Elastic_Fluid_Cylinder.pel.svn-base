MODULE PEL_Application
   
   concrete_name = "FE_StepByStepProgression"
   // Domain: Mesh is generated by GAMBIT

//   $SS_element = "TRIANGLE"
//   $SS_gridname="cylind_tri.neu"
   $SS_element = "RECTANGLE" 
   $SS_gridname="total_cylind_coarse.neu" //"cylind_struc.neu"
 
   // Fluid Parameters:
   $DS_Re  = 0.0
   $DS_Bn = 0.
   $DS_n = 1.
   // define as parameter
   $DS_etaP=0.41
   $DS_etaS=0.59
   $DS_Lambda= 5.0 //0.1
   $DS_dPdL= -0.75 //.

   
   $DS_X = component($DV_X,0)
   $DS_Y = component($DV_X,1)

    // Time Stepping
   $DS_DT= 0.02
   $DS_TEND=1.0
   $IS_save=50
   $IS_ORDER = 1

   // Field Level for time dependent fields
   $IS_CURRENT = 0 // storage of the current field
   $IS_INITIAL = 1 // storage of the preveous field
   $IS_NONLIN  = 2 // storage of the nonlinear contribution + storage for convergence
   // between time steps
   
   $IS_SteadyStateAdaptor = 0 // Apply steady state break critereon
   $IS_Advection = 1 // Consider advection term: 0 false, 1 true
   $IS_Nonlinear = 0 //1 // Consider nonlinear viscosity term: 0 false, 1 true
   $IS_Flowrate  = 0 // Consider a prescibed flowrate problem: 0 false, 1 true
   
   MODULE FE_TimeIterator
      time_initial = 0.0
      time_end = $DS_TEND
      time_step = $DS_DT 
   END MODULE FE_TimeIterator
   
   graphics_output_times = regular_vector( 0., $IS_save, $DS_TEND )
   state_saving_times = regular_vector( 0.0, $IS_save, $DS_TEND )
   
   
   if( $IS_SteadyStateAdaptor = 1 )
   MODULE FE_TimeIteratorAdapter
      // Stop when :
      //   max( u_current-u_initial )/max( u_current, 1. ) < 1.E-5	
      //   max( p_current-p_initial )/max( p_current, 1. ) < 1.E-5
      concrete_name = "FE_SteadyStateAdapter"
      initial_level = $IS_NONLIN
      current_level = $IS_CURRENT
      discrete_fields = < "uu" >
      minimal_error = < 1.E-5 >
      MODULE post_processing
         banner = true
         file_name = "convergence.txt"
      END MODULE post_processing
   END MODULE FE_TimeIteratorAdapter
  
//////////////////////////////////////////////////////////////////
   // PDE_DomainAndFields
//////////////////////////////////////////////////////////////////
   MODULE PDE_DomainAndFields
      verbose_level = 1
      nb_space_dimensions = 2
      type = "finite_element"
      
      if( $SS_element = "TRIANGLE" )
      MODULE GE_Meshing
         concrete_name = "GE_GambitMeshing"
         mesh_polyhedron = < "GE_Segment" "GE_Triangle" >
         filename = join( this_file_dir(), $SS_gridname )
      END MODULE GE_Meshing

      if( $SS_element = "RECTANGLE" )
    MODULE GE_Meshing
        concrete_name = "GE_GambitMeshing"
        mesh_polyhedron = < "GE_Segment" "GE_Quadrilateral" >
        filename = join( this_file_dir(), $SS_gridname )
      END MODULE GE_Meshing


    // MODULE GE_Meshing
    //     concrete_name = "GE_RefinedMeshing"
    //     mesh_polyhedron = < "GE_Segment" "GE_Quadrilateral" >
    //     MODULE GE_Meshing
    //     concrete_name = "GE_GambitMeshing"
    //     mesh_polyhedron = < "GE_Segment" "GE_Quadrilateral" >
   //      filename = join( this_file_dir(), $SS_gridname )
  //    END MODULE GE_Meshing
  //    MODULE list_of_GE_ReferencePolyhedronRefiner
    //        MODULE GE_ReferencePolyhedronRefiner#1
     //          concrete_name = "GE_ReferenceSquareWithSquares"
    //           nb_subintervals_per_edge=2
    //        END MODULE GE_ReferencePolyhedronRefiner#1
   //      END MODULE list_of_GE_ReferencePolyhedronRefiner
//END MODULE GE_Meshing

      MODULE macro_colors
         left = < "inlet"  >
         right = < "outlet" >
         lower = < "bottom_wall" >
         no_slip  = < "cylind_wall" >
         upper= < "top_wall" >
      END MODULE macro_colors
      
///////////////////////////////////////////////////////////////////
      
      MODULE interior_fields
         
         MODULE uu
            name = "uu"
            nb_components = 2
            element_name = "PDE_2D_Q2_9nodes"
//            element_name = "PDE_2D_P2_6nodes"
            storage_depth = 3
            MODULE DOFs_values
               type = "uniformly_defined"
                // value= vector(0.0 , 0.0)
              value = vector(1./(2.*($DS_etaP+$DS_etaS))*$DS_dPdL*($DS_Y*$DS_Y-4.), 0.0 )
            END MODULE DOFs_values
            MODULE DOFs_imposed_value
               MODULE noslip
                  location = "on_bounds"
                  type = "uniformly_defined"
                  color = "no_slip"
                  value = vector( 0.0, 0.0 )
               END MODULE noslip
               MODULE outlet
                  location = "on_bounds"
                  color = "right"
                  component = 1
                  type = "uniformly_defined"
                  value = < 0.0 >
               END MODULE outlet
               MODULE bottom
                  location = "on_bounds"
                  type = "uniformly_defined"
                  color = "lower"
                  value = vector( 0.0, 0.0 )
               END MODULE bottom
                MODULE top
                  location = "on_bounds"
                  type = "uniformly_defined"
                  color = "upper"
                  value = vector( 0.0, 0.0 )
               END MODULE top
                MODULE inlet
                  location = "on_bounds"
                  color = "left"
                  type = "uniformly_defined"
                  value = vector(1./(2.*($DS_etaP+$DS_etaS))*$DS_dPdL*($DS_Y*$DS_Y-4.), 0.0 )
               END MODULE inlet
            END MODULE DOFs_imposed_value
         END MODULE uu

         MODULE pp
            name = "pp"
            nb_components = 1
            element_name = "PDE_2D_Q1CR_3nodes"
//            element_name = "PDE_2D_P1_3nodes"
            storage_depth = 2
            MODULE DOFs_values
               type = "uniformly_defined"
               value = < 0.0 >
            END MODULE DOFs_values
         END MODULE pp
         
         MODULE dd
            name = "dd"
            nb_components = 3
            element_name = "PDE_2D_Q1_4nodes"
//            element_name = "PDE_2D_P1_3nodes"
            storage_depth = 1
            MODULE DOFs_values
               type = "uniformly_defined"
               value =  vector( 0.0, 0.0 , 0.0 )
            END MODULE DOFs_values
         END MODULE dd
         
         MODULE gammadot
            name = "gammadot"
            nb_components = 3
            element_name = "PDE_2D_Q1_4nodes"
//            element_name = "PDE_2D_P1_3nodes"
            storage_depth = 1
            MODULE DOFs_values
               type = "uniformly_defined"
               value =  vector( 0.0, 0.0 , 0.0 ) 
            END MODULE DOFs_values
         END MODULE gammadot
         
         // NOTE CHANGE #component and initial value and BC should not be zero Sym BC can't be applied probably here
         MODULE ss
            name = "ss"
            nb_components = 3
            element_name = "PDE_2D_Q1_4nodes"
//            element_name = "PDE_2D_P1_3nodes"
            storage_depth = 2 
            MODULE DOFs_values
               type = "uniformly_defined"
            value = Channel_flow($DV_X,$DS_etaP,$DS_etaS,$DS_Lambda,$DS_dPdL) 
       //        value = vector(0.1, -0.1, -0.1)           
            END MODULE DOFs_values
            
            MODULE DOFs_imposed_value
               MODULE inlet
                  location = "on_bounds"
                  color = "left"
                  type = "uniformly_defined"
                  value = Channel_flow($DV_X,$DS_etaP,$DS_etaS,$DS_Lambda,$DS_dPdL)
               END MODULE inlet
            END MODULE DOFs_imposed_value
         END MODULE ss         
         
         MODULE tau
            name = "tau"
            nb_components = 3
            element_name = "PDE_2D_Q1_4nodes"
//            element_name = "PDE_2D_P1_3nodes"
            storage_depth = 1
            MODULE DOFs_values
               type = "uniformly_defined"
               value = vector(0., 0., 0.)
//               value = vector(2.*$DS_Lambda*$DS_etaP*($DS_dPdL/($DS_etaP+$DS_etaS))*($DS_dPdL/($DS_etaP+$DS_etaS))*$DS_Y*$DS_Y,0.0, $DS_Y*$DS_dPdL*($DS_etaP/($DS_etaP+$DS_etaS))) 
            END MODULE DOFs_values
         END MODULE tau
         
      END MODULE interior_fields
      
      MODULE PDE_ResultSaver
         writers = < "PEL_VTKwriter" "PEL_MATLABwriter" >
         writing_mode = "text"
//         files_basename = "saveTriangle"
         files_basename = "saveRectangle"
         MODULE uu
            where_to_save = "at_vertices"
            entry_name = "UU"
            field = "uu"
         END MODULE uu
         MODULE pp
            where_to_save = "at_cell_centers"
            entry_name = "PP"
            field = "pp"
         END MODULE pp
         
         MODULE dd
            where_to_save = "at_cell_centers"
            entry_name = "DD"
            field = "dd"
         END MODULE dd
         
         MODULE ss
            where_to_save = "at_vertices"
            entry_name = "ss"
            field = "ss"
         END MODULE ss
         
         MODULE tau
            where_to_save = "at_vertices"
            entry_name = "tau"
            field = "tau"
         END MODULE tau
         
      END MODULE PDE_ResultSaver
   END MODULE PDE_DomainAndFields
   
///////////////////////////////////////////////////////////////////
   // FE_Parameters
///////////////////////////////////////////////////////////////////
   MODULE FE_SetOfParameters
      // Navier Stokes
      alpha = < 0.0 >
      Reynolds = vector( $DS_Re )
      pressuredrop = < 0.0 0. >   //2 0
      Viscosity = vector( $DS_etaS + 1.0 ) // etaS + alpha
      
      // Elastic Stress
      $DS_alpha2 = 1.0
      elastic_alpha = vector( $DS_alpha2 )
      elastic_diffusion = < 1.E-6 >
      
      MODULE FE_Parameter#dd
         concrete_name = "FE_DivergenceParameter"
         name = "Div_dd"
         field_level = 0
         field_name = "dd"
      END MODULE FE_Parameter#dd

      
      MODULE FE_Parameter#tau
         concrete_name = "FE_DivergenceParameter"
         name = "Div_tau"
         field_level = 0
         field_name = "tau"
      END MODULE FE_Parameter#tau
      
      MODULE FE_Parameter#ExternalForce_DIV
         concrete_name = "FE_SumOfParameters"
         name = "DIV_total"
         MODULE list_of_parameters
            MODULE param#1
               type = "already_defined"
               name = "Div_dd"
               coefficient =-1.0 // " you can input \alpha here. Note: alpha is not the same as param unsteady."
            END MODULE param#1
            MODULE param#2
               type = "already_defined"
               name = "Div_tau"
               coefficient =1.0 // 1.
            END MODULE param#2
         END MODULE list_of_parameters
      END MODULE FE_Parameter#ExternalForce_DIV

      MODULE FE_Parameter#ETA_P
         concrete_name = "FE_UniformParameter"
         name = "eta_p"
         value = vector( $DS_etaP )
      END MODULE FE_Parameter#ETA_P

      MODULE FE_Parameter#LAMBDA
         concrete_name = "FE_UniformParameter"
         name = "lambda"
         value = vector( $DS_Lambda )
      END MODULE FE_Parameter#LAMBDA
      
      MODULE FE_Parameter#secinvgamma
         concrete_name = "FE_DuDuFieldParameter"
         name = "secinvgammadot"
         field_name = "uu"
         field_level = 0
         coef = 0.5
         power = 0.5
      END MODULE FE_Parameter#secinvgamma
   END MODULE FE_SetOfParameters
   
///////////////////////////////////////////////////////////////////
   // One Step Iteration Stage
///////////////////////////////////////////////////////////////////
   MODULE FE_OneStepIteration
      concrete_name = "FE_SplitSystem"
      MODULE list_of_FE_OneStepIteration               
///////////////////////////////////////////////////////////////////
         // FE_OeStepIteration: Navier Stokes Solver
         // Optional Modules:
         // - NonlinearTerm -> implement nnlinear viscosity term
         // - advection     -> construction of the advection term
///////////////////////////////////////////////////////////////////
         MODULE FE_OneStepIteration#Navier_Stokes
            concrete_name = "MI_ViscoElastic"
            viscosity_term = "div_mu_D_uu"
            
            // Nonlinear Term (optional)
            if( $IS_Nonlinear = 1 )
            MODULE NonlinearTerm
               type = "viscosity"
               residual = 1.E-3
               maxiter  = 100
               storage_level = $IS_NONLIN // Make sure that the velocity has enough storage levels
            END MODULE NonlinearTerm
            
            // Discrete Fields
            velocity = "uu"
            velocity_level_to_update = $IS_CURRENT
            level_of_explicit_velocity = $IS_CURRENT          
            
            pressure = "pp"
            pressure_level_to_update = $IS_CURRENT
            level_of_explicit_pressure = $IS_CURRENT
            
            quadrature_rule_provider = "GE_QRprovider_5"          
            time_order = 1
            
            ss_field = "ss"
            level_of_field_SS = 0
            stress_field = "tau"
            param_diffusion = "elastic_diffusion"
            param_etap = "eta_p"
            param_lambda = "lambda"
            
            MODULE time_discretization_SS
               type = "Euler"
               field_explicit_SS = "ss"
               level_of_field_explicit_SS = 0 
               param_unsteady_SS  = "elastic_alpha"                             
            END MODULE time_discretization_SS
            
	    // S equation
            MODULE stabilization
               type = "SUPG"
               MODULE MI_TauStab
                  concrete_name = "FE_OptimalTauSUPG"
                  upwind_factor = 1.
               END MODULE MI_TauStab
            END MODULE stabilization
            
            //Parameters and advection term 
            param_unsteady = "alpha" 		// Is the equation unsteady 0?1
            param_Reynolds = "Reynolds"		// Reynolds number
            param_viscous  = "Viscosity"	// viscosity term
            param_source   = "pressuredrop"     // Source parameter
            
            dd = "dd"
            gammadot = "gammadot"
            param_div = "Div_tau" // divergence parameter
            
            // Advection term (optional)
            if ( $IS_Advection = 1 )
            MODULE advection 
               MODULE advective_field
                  MODULE xx1
                     field = "uu"
                     level = $IS_CURRENT
                     param_coef = "alpha"
                  END MODULE xx1
               END MODULE advective_field
            END MODULE advection
            
            // Discrete System
            MODULE MI_ViscoElasticSystem
               verbose_level = 1
               MODULE method
                  type = "augmented_Lagrangian"
                  augmentation_parameter = 1000000.
                  tolerance_on_divergence = 1.e-8	
                  tolerance_on_velocity_increment = 1.e-8
               END MODULE method
               
               MODULE LA_Matrix
                  concrete_name = "LA_PelMatrix"
               END MODULE LA_Matrix
               
               MODULE solver_DEVSS
                  concrete_name = "LA_PreconditionedSolver"
                  MODULE LA_IterativeSolver
                     concrete_name = "LA_GMRES_IS"
                     nb_iterations_max = 10000
                     restart = 50
                     MODULE LA_ConvergenceTest
                        concrete_name = "LA_DefaultConvergenceTest"
                        relative_tolerance = 1.e-08 // 1.e-8 
                        absolute_tolerance = 1.E-20
                     END MODULE LA_ConvergenceTest
                     verbose = false
                  END MODULE LA_IterativeSolver
                  MODULE LA_Preconditioner
                     concrete_name = "LA_Jacobi_PC"
                     smallest_inverted_item = 1.e-22
                  END MODULE LA_Preconditioner
               END MODULE solver_DEVSS
                            
               MODULE solver_SS
                  concrete_name = "LA_PreconditionedSolver"
                  MODULE LA_IterativeSolver
                     concrete_name = "LA_GMRES_IS"
                     nb_iterations_max = 10000
                     restart = 50
                     MODULE LA_ConvergenceTest
                        concrete_name = "LA_DefaultConvergenceTest"
                        relative_tolerance = 1.e-8 //1.e-12
                        absolute_tolerance = 1.E-20
                     END MODULE LA_ConvergenceTest
                     verbose = false
                  END MODULE LA_IterativeSolver
                  MODULE LA_Preconditioner
                     concrete_name = "LA_Jacobi_PC"
                     smallest_inverted_item = 1.e-22
                  END MODULE LA_Preconditioner
               END MODULE solver_SS
               
               MODULE solver_TAU
                  concrete_name = "LA_PreconditionedSolver"
                  MODULE LA_IterativeSolver
                     concrete_name = "LA_GMRES_IS"
                     nb_iterations_max = 10000
                     restart = 50
                     MODULE LA_ConvergenceTest
                        concrete_name = "LA_DefaultConvergenceTest"
                        relative_tolerance = 1.e-08 // 1.e-12 
                        absolute_tolerance = 1.E-20
                     END MODULE LA_ConvergenceTest
                     verbose = false
                  END MODULE LA_IterativeSolver
                  MODULE LA_Preconditioner
                     concrete_name = "LA_Jacobi_PC"
                     smallest_inverted_item = 1.e-22
                  END MODULE LA_Preconditioner
               END MODULE solver_TAU
               
               MODULE solver_A
                  concrete_name = "EXT_UMFsolver_DS"
               END MODULE solver_A
               
            END MODULE MI_ViscoElasticSystem
         END MODULE FE_OneStepIteration#Navier_Stokes
         
///////////////////////////////////////////////////////////////////
         // FE_OneStepIteration: Postprocessing (Parameters)
///////////////////////////////////////////////////////////////////
         MODULE FE_OneStepIteration#parameters_postprocessing
            concrete_name = "FE_ParameterSaver"
            MODULE parameters
               MODULE param#1
                  type = "at_cell_centers"
                  parameter_name = "secinvgammadot"
                  entry_name = "SecInvGammadot"
               END MODULE param#1
//             MODULE param#2
//                type = "at_cell_centers"
//                parameter_name = "Reynolds"
//                entry_name = "Reynolds"
//             END MODULE param#2
               MODULE param#4
                  type = "at_cell_centers"
                  parameter_name = "Viscosity"
                  entry_name = "viscosity"
               END MODULE param#4
               MODULE param#5
                  type = "at_cell_centers"
                  parameter_name = "Div_tau"
                  entry_name = "Div_tau"
               END MODULE param#5
            END MODULE parameters
         END MODULE FE_OneStepIteration#parameters_postprocessing
///////////////////////////////////////////////////////////////////
         
///////////////////////////////////////////////////////////////////
         // FE_OeStepIteration: FE_DOFsCopy (Setup of the new timestep)
         // - If another solver needs the correct $IS_INITIAL
         //   at the new time step during the execution of
         //   "do_before_inner_iteration_stage", this part has to be
         //   called after the other one step iterations.
///////////////////////////////////////////////////////////////////
//         MODULE FE_OneStepIteration#DOF_copy
//            concrete_name = "FE_DOFsCopy"
//            MODULE uu#1
//               field = "uu"
//               source = $IS_INITIAL
//               target = $IS_NONLIN
//            END MODULE uu#1
//            MODULE uu
//               field = "uu"
//               source = $IS_CURRENT
//               target = $IS_INITIAL
//            END MODULE uu
//            MODULE pp
//               field = "pp"
//               source = $IS_CURRENT
//               target = $IS_INITIAL
//            END MODULE pp
//            MODULE ss
//               field = "ss"
//               source = $IS_CURRENT
//               target = $IS_INITIAL
//            END MODULE ss
//         END MODULE FE_OneStepIteration#DOF_copy
///////////////////////////////////////////////////////////////////
         
      END MODULE list_of_FE_OneStepIteration
   END MODULE FE_OneStepIteration
   
END MODULE PEL_Application
