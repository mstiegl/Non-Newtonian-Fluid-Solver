$DS_one = 1.0
$SS_HW = "Hello, world!"   // A scalar string
$DVvar = < 0.0 1.0 2.0 >   // A vector of doubles
$BSistrue = true           // A scalar boolean
$DAtest=[ < 0.0 > , < 1.0 > ]
$IA_itab = array( < 0 0 > , < 1 1 > ) // An integer array
MODULE PEL_ObjectTest#PEL_Expression_TEST
   
   concrete_name = "PEL_Expression_TEST"
   
   $DS_two = $DS_one + $DS_one
   $DS_sin2 = sqr(sin($DS_x))
   
   MODULE RATIO_TEST00
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.005, 0.01, 0.1 )
      result = < 0.000000000000000e+00 4.897243015091150e-03
                 1.006821349989149e-02 1.552821123173338e-02
                 2.129339115672956e-02 2.738081118874604e-02
                 3.380848268006035e-02 4.059542371303669e-02
                 4.776171537049649e-02 5.532856115127623e-02
                 6.331834970677018e-02 7.175472108408192e-02
                 8.066263667178354e-02 9.006845305523711e-02
                 1.000000000000000e-01 >
   END MODULE RATIO_TEST00
   
   MODULE RATIO_TEST01
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.01, 0.1, 1.0  )
      result = < 0.000000000000000e+00 1.019289832258792e-02
                 2.140343341940714e-02 3.373320393016672e-02
                 4.729395188154065e-02 6.220857538083588e-02
                 7.861224241479117e-02 9.665361584762285e-02
                 1.164962007202079e-01 1.383198260606844e-01
                 1.623222746357946e-01 1.887210754130551e-01
                 2.177554749784458e-01 2.496886057761484e-01
                 2.848098708206204e-01 3.234375664931284e-01
                 3.659217671925774e-01 4.126474979835975e-01
                 4.640382239949076e-01 5.205596881916130e-01
                 5.827241323023338e-01 6.510949391545062e-01
                 7.262917384903328e-01 8.089960225362786e-01
                 8.999573222187991e-01 1.000000000000000e+00 >
   END MODULE RATIO_TEST01
   MODULE RATIO_TEST02
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.02, 0.2, 2.0 )
      result = < 0.000000000000000e+00 2.038579664517584e-02
                 4.280686683881427e-02 6.746640786033345e-02
                 9.458790376308131e-02 1.244171507616718e-01
                 1.572244848295823e-01 1.933072316952457e-01
                 2.329924014404159e-01 2.766396521213687e-01
                 3.246445492715892e-01 3.774421508261103e-01
                 4.355109499568915e-01 4.993772115522969e-01
                 5.696197416412409e-01 6.468751329862568e-01
                 7.318435343851547e-01 8.252949959671950e-01
                 9.280764479898151e-01 1.041119376383226e+00
                 1.165448264604668e+00 1.302189878309012e+00
                 1.452583476980666e+00 1.617992045072557e+00
                 1.799914644437598e+00 2.000000000000000e+00 >
   END MODULE RATIO_TEST02
   MODULE RATIO_TEST03
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.0003, 0.0005, 0.06 )
      result = < 0.e+00 3.006431112480359e-04 6.022958562931341e-04 9.049616257348662e-04 1.208643821559274e-03 
  1.513345857177109e-03 1.819071157462198e-03 2.125823158789940e-03 2.433605309075932e-03 2.742421067814721e-03 
  3.052273906118692e-03 3.363167306757082e-03 3.675104764195128e-03 3.988089784633344e-03 4.302125886046928e-03 
  4.617216598225312e-03 4.933365462811828e-03 5.250576033343525e-03 5.568851875291103e-03 5.888196566098996e-03 
  6.208613695225577e-03 6.530106864183508e-03 6.852679686580218e-03 7.176335788158526e-03 7.501078806837387e-03 
  7.826912392752787e-03 8.153840208298770e-03 8.481865928168603e-03 8.810993239396081e-03 9.141225841396967e-03 
  9.472567446010579e-03 9.805021777541506e-03 1.013859257280147e-02 1.047328358115133e-02 1.080909856454323e-02 
  1.114604129756286e-02 1.148411556747193e-02 1.182332517425069e-02 1.216367393064066e-02 1.250516566218750e-02 
  1.284780420728398e-02 1.319159341721316e-02 1.353653715619165e-02 1.388263930141304e-02 1.422990374309153e-02 
  1.457833438450557e-02 1.492793514204183e-02 1.527870994523915e-02 1.563066273683273e-02 1.598379747279845e-02 
  1.633811812239734e-02 1.669362866822019e-02 1.705033310623229e-02 1.740823544581841e-02 1.776733970982779e-02 
  1.812764993461941e-02 1.848917017010731e-02 1.885190447980618e-02 1.921585694087697e-02 1.958103164417275e-02 
  1.994743269428470e-02 2.031506420958820e-02 2.068393032228918e-02 2.105403517847052e-02 2.142538293813867e-02 
  2.179797777527043e-02 2.217182387785982e-02 2.254692544796518e-02 2.292328670175642e-02 2.330091186956237e-02 
  2.367980519591835e-02 2.405997093961389e-02 2.444141337374058e-02 2.482413678574010e-02 2.520814547745242e-02 
  2.559344376516417e-02 2.598003597965710e-02 2.636792646625682e-02 2.675711958488163e-02 2.714761971009147e-02 
  2.753943123113716e-02 2.793255855200972e-02 2.832700609148982e-02 2.872277828319753e-02 2.911987957564207e-02 
  2.951831443227188e-02 2.991808733152476e-02 3.031920276687820e-02 3.072166524689991e-02 3.112547929529845e-02 
  3.153064945097416e-02 3.193718026807010e-02 3.234507631602326e-02 3.275434217961593e-02 3.316498245902726e-02 
  3.357700176988489e-02 3.399040474331693e-02 3.440519602600392e-02 3.482138028023112e-02 3.523896218394088e-02 
  3.565794643078525e-02 3.607833773017873e-02 3.650014080735117e-02 3.692336040340092e-02 3.734800127534812e-02 
  3.777406819618816e-02 3.820156595494530e-02 3.863049935672654e-02 3.906087322277563e-02 3.949269239052724e-02 
  3.992596171366133e-02 4.036068606215771e-02 4.079687032235081e-02 4.123451939698456e-02 4.167363820526752e-02 
  4.211423168292815e-02 4.255630478227034e-02 4.299986247222901e-02 4.344490973842599e-02 4.389145158322608e-02 
  4.433949302579324e-02 4.478903910214703e-02 4.524009486521920e-02 4.569266538491049e-02 4.614675574814763e-02 
  4.660237105894050e-02 4.705951643843951e-02 4.751819702499314e-02 4.797841797420574e-02 4.844018445899543e-02 
  4.890350166965227e-02 4.936837481389661e-02 4.983480911693759e-02 5.030280982153192e-02 5.077238218804274e-02 
  5.124353149449883e-02 5.171626303665387e-02 5.219058212804600e-02 5.266649410005752e-02 5.314400430197484e-02 
  5.362311810104860e-02 5.410384088255396e-02 5.458617804985121e-02 5.507013502444642e-02 5.555571724605243e-02 
  5.604293017265000e-02 5.653177928054910e-02 5.702227006445051e-02 5.751440803750760e-02 5.800819873138823e-02 
  5.850364769633700e-02 5.900076050123759e-02 5.949954273367535e-02 6.e-02 >
   END MODULE RATIO_TEST03
   MODULE RATIO_TEST04
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.25, 0.25, 0.9 )
      result = < 0.e+00 2.25e-01 4.5e-01 6.75e-01 9.e-01  >
   END MODULE RATIO_TEST04
   MODULE RATIO_TEST05
      type = "DoubleVector"
      // Symmetry ?
      exp_to_eval = stretched_vector( -1., 0.2, 0.1, 0. ) << stretched_vector( 0., 0.1, 0.2, 1. )
      result = < -1.000000000000000e+00 -8.018230039074806e-01
                 -6.257736653957958e-01 -4.693812979591007e-01
                 -3.304510821501335e-01 -2.070332633583110e-01
                 -9.739578884178456e-02  0.000000000000000e+00
                  9.739578884178456e-02  2.070332633583110e-01 
                  3.304510821501335e-01  4.693812979591007e-01
                  6.257736653957958e-01  8.018230039074806e-01
                  1.000000000000000e+00 >
   END MODULE RATIO_TEST05
   MODULE RATIO_TEST06
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0., 0.2, 0.1, -1. ) 
      result = <   0.000000000000000e+00 -1.981769960925194e-01
                  -3.742263346042042e-01 -5.306187020408993e-01
                  -6.695489178498665e-01 -7.929667366416890e-01
                  -9.026042111582154e-01 -1.000000000000000e+00 >
   END MODULE RATIO_TEST06
   
   MODULE RATIO_TEST0
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 0.0, 0.3, 0.1, 1.0 )
      result = < 0.000000000000000e+00 3.078185661450209e-01
                 5.486774402043316e-01 7.371423464627396e-01
                 8.846105310156743e-01 1.000000000000000e+00 >
   END MODULE RATIO_TEST0
   
   MODULE RATIO_TEST1
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 1.0, 1.0, 8.0, 16.0 )
      result = < 1.0 2.0 4.0 8.0 16.0 >
   END MODULE RATIO_TEST1

   MODULE RATIO_TEST2
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 1.0, 1.0, 8.0, 1.0 )
      result = < 0. >
      exception = true
   END MODULE RATIO_TEST2
   
   MODULE RATIO_TEST3
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 1.0, -1.0, 8.0, 2.0 )
      result = < 0. >
      exception = true
   END MODULE RATIO_TEST3
   
   MODULE RATIO_TEST4
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 1.0, 1.0, -8.0, 2.0 )
      result = < 0. >
      exception = true
   END MODULE RATIO_TEST4
   
   MODULE REGU_TEST1
      type = "DoubleVector"
      exp_to_eval = regular_vector( 1.0, 4, 5.0 )
      result = < 1.0 2.0 3. 4.0 5.0 >
   END MODULE REGU_TEST1
   
   MODULE REGU_TEST2
      type = "IntVector"
      exp_to_eval = regular_vector( 1, 4, 5 )
      result = < 1 2 3 4 5 >
   END MODULE REGU_TEST2
   
   MODULE REGU_TEST3
      type = "IntVector"
      exp_to_eval = regular_vector( -100, 10, -70 )
      result = < -100 -97 -94 -91 -88 -85 -82 -79 -76 -73 -70 >
   END MODULE REGU_TEST3
   
   MODULE REGU_TEST4
      type = "IntVector"
      exp_to_eval = regular_vector( -100, 5, -80 )
      result = < -100 -96 -92 -88 -84 -80 >
   END MODULE REGU_TEST4
   
   MODULE REGU_TEST5
      type = "IntVector"
      exp_to_eval = regular_vector( -100, 5, -100 )
      result = < 0 >
      exception = true
   END MODULE REGU_TEST5

   MODULE REGU_TEST6
      type = "IntVector"
      exp_to_eval = regular_vector( -100, -5, -80 )
      result = < 0 >
      exception = true
   END MODULE REGU_TEST6
   
   MODULE REGU_TEST7
      type = "IntVector"
      exp_to_eval = regular_vector( 0, 5, -80 )
      result = <  0 -16 -32 -48 -64 -80 >
   END MODULE REGU_TEST7
   
   MODULE CONCAT
      type = "DoubleVector"
      exp_to_eval = stretched_vector( 1.0, 1.0, 8.0, 16.0 ) <<
                    regular_vector( 1.0, 4, 5.0 ) <<
                    < 8. 9. >
      result = < 1.0 2.0 4.0 8.0 16.0
                 1.0 2.0 3. 4.0 5.0
                 8.0 9.0 >
   END MODULE CONCAT
    
   MODULE GEOMETRIC_SEQUENCE1
      type = "DoubleVector"
      exp_to_eval = geometric_sequence( 1.0, 2.0, 4 )
      result = < 1.0 2.0 4.0 8.0 16.0 >
   END MODULE GEOMETRIC_SEQUENCE1
  
   MODULE GEOMETRIC_SEQUENCE2
      type = "DoubleVector"
      exp_to_eval = geometric_sequence( 3.0, -1.0, 2 )
      result = < 3.0 -3.0 3.0  >
   END MODULE GEOMETRIC_SEQUENCE2

   MODULE GEOMETRIC_SEQUENCE3
      $IS_N = 10
      $DS_x0 = 1.
      $DS_xn = pow( 2., double($IS_N) )
      $DS_dx0 = 1.
      $DS_dxn = pow( 2., double($IS_N-1) )
      type = "DoubleVector"
      exp_to_eval = stretched_vector( $DS_xn, $DS_dxn, $DS_dx0, $DS_x0 )
      result = geometric_sequence( $DS_xn, 0.5, $IS_N )
   END MODULE GEOMETRIC_SEQUENCE3
   
   MODULE GEOMETRIC_SEQUENCE4
      $IS_N = 10
      $DS_x0 = 1.
      $DS_xn = pow( 2., double($IS_N) )
      $DS_dx0 = 1.
      $DS_dxn = pow( 2., double($IS_N-1) )
      type = "DoubleVector"
      exp_to_eval = stretched_vector( $DS_x0, $DS_dx0, $DS_dxn, $DS_xn )
      result = geometric_sequence( $DS_x0, 2., $IS_N )
   END MODULE GEOMETRIC_SEQUENCE4
  
   MODULE SUM_DOUBLE
      type = "Double"
      exp_to_eval = sum( < 0.0 1.0 2.0 > )
      result = 3.0
   END MODULE SUM_DOUBLE
   
   MODULE SUM_INT
      type = "Int"
      exp_to_eval = sum( < 0 1 2 > )
      result = 3
   END MODULE SUM_INT
   
   MODULE REVERSE_DV
      type = "DoubleVector"
      exp_to_eval = reverse( < 0.0 1.0 2.0 > )
      result = < 2.0 1.0 0.0 >
   END MODULE REVERSE_DV
   
   MODULE REVERSE_IV
      type = "IntVector"
      exp_to_eval = reverse( < 0 1 2 > )
      result = < 2 1 0 >
   END MODULE REVERSE_IV
   
   MODULE REVERSE_BV
      type = "BoolVector"
      exp_to_eval = reverse( < true false false > )
      result = < false false true >
   END MODULE REVERSE_BV
   
   MODULE REVERSE_SV
      type = "StringVector"
      exp_to_eval = reverse( <"a" "b" "c" >)
      result = < "c" "b" "a" >
   END MODULE REVERSE_SV
      
   MODULE CONCAT_INT
      type = "IntVector"
      exp_to_eval = vector( 0, 1 ) << < 1 2 >
      result = < 0 1 2 >
   END MODULE CONCAT_INT
   
   MODULE CONCAT_STRING
      type = "StringVector"
      exp_to_eval = vector( "a" ) << < "a" "b" >
      result = < "a" "a" "b" >
   END MODULE CONCAT_STRING
   
   MODULE double
      type = "Double"
      exp_to_eval = $DS_two
      result = 2.0
   END MODULE double
   
   MODULE double_vec
      type = "DoubleVector"
      $DV_x = < 1.0 2.0 3.0 >
      exp_to_eval = $DV_x
      result = < 1.0 2.0 3.0 >
   END MODULE double_vec
   
   MODULE component
      type = "Double"
      $DV_x = < 1.0 2.0 3.0 >
      $IS_i = 1
      exp_to_eval = component( $DV_x, $IS_i )
      result = 2.0
   END MODULE component
   
   MODULE component_int
      type = "Int"
      exp_to_eval = component( $IV_x, $IS_i )
      result = 2
      
      $IV_x = < 1 2 3 >
      $IS_i = 1
      
   END MODULE component_int
   
   MODULE component_bool
      type = "Bool"
      exp_to_eval = component( $BV_x, $IS_i )
      result = false
      
      $BV_x = < true false true >
      $IS_i = 1
      
   END MODULE component_bool
   
   MODULE string_in_string
      type = "String"
      exp_to_eval = "chaine'toto'"
      result = "chaine'toto'"          
   END MODULE string_in_string
   
   MODULE component_string
      type = "String"
      exp_to_eval = component( $SV_x, $IS_i )
      result = "petit"
      
      $SV_x = < "il" "etait" "un" "petit" "navire" >
      $IS_i = 3
      
   END MODULE component_string
   
   MODULE size
      type = "Int"
      $DV_x = < 1.0 2.0 3.0 >
      exp_to_eval = size( $DV_x )
      result = 3
   END MODULE size
   
   MODULE size_int
      type = "Int"
      exp_to_eval = size( $IV_x )
      result = 2            
      $IV_x = < 1 2 >            
   END MODULE size_int
   
   MODULE size_bool
      type = "Int"
      exp_to_eval = size( $BV_x )
      result = 3            
      $BV_x = < true false true >
   END MODULE size_bool
   
   MODULE size_string
      type = "Int"
      exp_to_eval = size( $SV_x )
      $SV_x = < "il" "etait" "un" "petit" "navire" >
      result = 5          
   END MODULE size_string
   
   MODULE vector
      type = "DoubleVector"
      exp_to_eval = vector( 1.0, $DS_two )
      result = < 1.0 2.0 >
   END MODULE vector
   
   MODULE test
      type = "Int"
      exp_to_eval = ( $BS_monbool ? 1 : 2 )
      result = 2
      
      $BS_monbool = false
      
   END MODULE test
   
   MODULE lower_double
      type = "Bool"
      exp_to_eval = 1.0 < 2.0 
      result = true
   END MODULE lower_double
   
   MODULE greater_double
      type = "Bool"
      exp_to_eval = 1.0 > 2.0 
      result = false
   END MODULE greater_double
   
   MODULE lower_int
      type = "Bool"
      exp_to_eval = 1 < 2
      result = true
   END MODULE lower_int
   
   MODULE greater_int
      type = "Bool"
      exp_to_eval = 1 > 2
      result = false
   END MODULE greater_int
   
   MODULE lower_or_equal_precedence
      type = "Bool"
      exp_to_eval = 1.0 <= 1.0 + 2.0
      result = true
   END MODULE lower_or_equal_precedence
   
   MODULE lower_or_equal_double
      type = "Bool"
      exp_to_eval = 1.0 <= 1.0 
      result = true
   END MODULE lower_or_equal_double
   
   MODULE greater_or_equal_double
      type = "Bool"
      exp_to_eval = 1.0 >= 2.0 
      result = false
   END MODULE greater_or_equal_double
   
   MODULE lower_or_equal_int
      type = "Bool"
      exp_to_eval = 2 <= 1
      result = false
   END MODULE lower_or_equal_int
   
   MODULE greater_or_equal_int
      type = "Bool"
      exp_to_eval = 2 >= 2
      result = true
   END MODULE greater_or_equal_int
   
   MODULE equal_bool
      type = "Bool"
      exp_to_eval = ( true = true )
      result = true
   END MODULE equal_bool
   
   MODULE equal_bool2
      type = "Bool"
      exp_to_eval = ( true = false )
      result = false
   END MODULE equal_bool2
   
   MODULE nequal_bool
      type = "Bool"
      exp_to_eval = ( true != true )
      result = false
   END MODULE nequal_bool
   
   MODULE nequal_bool2
      type = "Bool"
      exp_to_eval = ( true != false )
      result = true
   END MODULE nequal_bool2
   
   MODULE equal_string
      type = "Bool"
      exp_to_eval = ( "toto" = "toto" )
      result = true
   END MODULE equal_string
   
   MODULE equal_string2
      type = "Bool"
      exp_to_eval = ( "toto" = "titi" )
      result = false
   END MODULE equal_string2
   
   MODULE nequal_string
      type = "Bool"
      exp_to_eval = ( "toto" != "toto" )
      result = false
   END MODULE nequal_string
   
   MODULE nequal_string2
      type = "Bool"
      exp_to_eval = ( "toto" != "titi" )
      result = true
   END MODULE nequal_string2
   
   MODULE equal_int
      type = "Bool"
      exp_to_eval = ( 2 = 2 )
      result = true
   END MODULE equal_int
   
   MODULE equal_int2
      type = "Bool"
      exp_to_eval = ( 2 = 3 )
      result = false
   END MODULE equal_int2
   
   MODULE nequal_int
      type = "Bool"
      exp_to_eval = ( 2 != 2 )
      result = false
   END MODULE nequal_int
   
   MODULE nequal_int2
      type = "Bool"
      exp_to_eval = ( 2 != 3 )
      result = true
   END MODULE nequal_int2
   
   MODULE equal_double
      type = "Bool"
      exp_to_eval = ( 2.5 = 2.5 )
      result = true
   END MODULE equal_double
   
   MODULE equal_double2
      type = "Bool"
      exp_to_eval = ( 2.5 = 2.6 )
      result = false
   END MODULE equal_double2
   
   MODULE nequal_double
      type = "Bool"
      exp_to_eval = ( 2.5 != 2.5 )
      result = false
   END MODULE nequal_double
   
   MODULE nequal_double2
      type = "Bool"
      exp_to_eval = ( 2.5 != 2.6 )
      result = true
   END MODULE nequal_double2
   
   MODULE algebraic
      type = "Double"
      exp_to_eval = 2.0 * 3. + 5.0 * 7.0 - 9. / 3. 
      result = 38.0
   END MODULE algebraic
   
   MODULE abs_double
      type = "Double"
      exp_to_eval = abs(-2.0)+abs(2.0) 
      result = 4.0
   END MODULE abs_double
   
   MODULE abs_int
      type = "Int"
      exp_to_eval = abs(-2)+abs(2) 
      result = 4
   END MODULE abs_int
   
   MODULE Trigonometric
      type = "Double"
      exp_to_eval = $DS_sin2 + cos( $DS_x )*cos( $DS_x )
      result = 1.0
      $DS_x = 0.4
   END MODULE Trigonometric
   
   MODULE Trigonometric2
      type = "Double"
      exp_to_eval = sin( $DS_x )/cos( $DS_x ) - tan( $DS_x )
      result = 0.0
      $DS_x = 0.4
   END MODULE Trigonometric2
   
   MODULE Trigonometric3
      type = "Double"
      exp_to_eval = sinh( $DS_x )/cosh( $DS_x ) - tanh( $DS_x )
      result = 0.0
      $DS_x = 0.4
   END MODULE Trigonometric3
   
   MODULE Trigonometric4
      type = "Double"
      exp_to_eval = acos( cos( $DS_x ) )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric4
   
   MODULE Trigonometric4_1
      type = "Double"
      exp_to_eval = acos( $DS_x )
      result = 0.0
      $DS_x = 1.0
   END MODULE Trigonometric4_1
   
   MODULE Trigonometric4_2
      type = "Double"
      exp_to_eval = acos( 0.5 )
      result = pi()/3.
   END MODULE Trigonometric4_2
   
   MODULE Trigonometric4_3
      type = "Double"
      exp_to_eval = acos( cos ( -pi()/3. ) )
      result = pi()/3.
   END MODULE Trigonometric4_3
   
   MODULE Trigonometric4_4
      type = "Double"
      exp_to_eval = acos( cos ( pi()/3. + 4.*pi()  ) )
      result = pi()/3.
   END MODULE Trigonometric4_4
   
   MODULE Trigonometric5
      type = "Double"
      exp_to_eval = asin( sin( $DS_x ) )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric5
   
   MODULE Trigonometric6
      type = "Double"
      exp_to_eval = atan( tan( $DS_x ) )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric6
   
   MODULE Trigonometric7
      type = "Double"
      exp_to_eval = atan2( tan($DS_x), 1. )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric7
   
   MODULE Trigonometric8
      type = "Double"
      exp_to_eval = acosh( cosh( $DS_x ) )
      result = $DS_x
      $DS_x = 40.
   END MODULE Trigonometric8
   
   MODULE Trigonometric8_1
      type = "Double"
      exp_to_eval = acosh( cosh( -3.0 ) )
      result = 3.0
   END MODULE Trigonometric8_1
   
   MODULE Trigonometric8_2
      type = "Double"
      exp_to_eval = acosh( 1.0 )
      result = 0.0
   END MODULE Trigonometric8_2
   
   MODULE Trigonometric9
      type = "Double"
      exp_to_eval = asinh( sinh( $DS_x ) )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric9
   
   MODULE Trigonometric10
      type = "Double"
      exp_to_eval = atanh( tanh( $DS_x ) )
      result = $DS_x
      $DS_x = 0.4
   END MODULE Trigonometric10
   
   MODULE Bessel1
      type = "Double"
      exp_to_eval = j0( $DS_x )
      result = 0.960398226659563
      $DS_x = 0.4
   END MODULE Bessel1
   
   MODULE Bessel2
      type = "Double"
      exp_to_eval = j1( $DS_x )
      result = 0.196026577955319
      $DS_x = 0.4
   END MODULE Bessel2
   
   MODULE Bessel3
      type = "Double"
      exp_to_eval = jn( 4, $DS_x )
      result = 6.61351077290968e-05
      $DS_x = 0.4
   END MODULE Bessel3
   
   MODULE Bessel4
      type = "Double"
      exp_to_eval = y0( $DS_x )
      result =  -0.60602456842701
      $DS_x = 0.4
   END MODULE Bessel4
   
   MODULE Bessel5
      type = "Double"
      exp_to_eval = y1( $DS_x )
      result = -1.78087204427005
      $DS_x = 0.4
   END MODULE Bessel5
   
   MODULE Bessel6
      type = "Double"
      exp_to_eval = yn( 4, $DS_x )
      result = -1209.73893162151
      $DS_x = 0.4
   END MODULE Bessel6
   
   MODULE erf1
      type = "Double"
      exp_to_eval = erf( $DS_x )
      result = 0.428392355046668
      $DS_x = 0.4
   END MODULE erf1
   
   MODULE erf2
      type = "Double"
      exp_to_eval = erfc( $DS_x )
      result = 0.571607644953331
      $DS_x = 0.4
   END MODULE erf2
   
   MODULE gamma0
      type = "Double"
      exp_to_eval = gamma( $DS_x )
      result = 24.0
      $DS_x = 5.0
   END MODULE gamma0
   
   MODULE gamma1
      type = "Double"
      exp_to_eval = gamma( $DS_x )
      result = 2.21815954375769
      $DS_x = 0.4
   END MODULE gamma1
   
   MODULE lgamma1
      type = "Double"
      exp_to_eval = lgamma( $DS_x )
      result = 0.796677817701784
      $DS_x = 0.4
   END MODULE lgamma1
   
   MODULE lgamma2
      type = "Double"
      exp_to_eval = exp( lgamma( $DS_x ) )
      result = gamma( $DS_x )
      $DS_x = 0.4
   END MODULE lgamma2
   
   MODULE incomplete_gamma#1
      type = "Double"
      exp_to_eval = incomplete_gamma( $DS_a, $DS_x )
      result = 3.91294629352816
      $DS_a = 0.2
      $DS_x = 0.4
   END MODULE incomplete_gamma#1
   
   MODULE incomplete_gamma#2
      type = "Double"
      exp_to_eval = incomplete_gamma( $DS_a, $DS_x, 1.E-12, 1.E-10, 50 )
      result = 0.995094539655341
      $DS_a = 0.5
      $DS_x = 0.3
   END MODULE incomplete_gamma#2
   
   MODULE En#1
      type = "Double"
      exp_to_eval = En( $IS_n, $DS_x )
      result = 0.148666495478845
      $IS_n = 5
      $DS_x = 0.4
   END MODULE En#1
   
   MODULE En#2
      type = "Double"
      exp_to_eval = En( $IS_n, $DS_x, 1.E-12, 1.E-10, 50 )
      result = 0.0489706649068581
      $IS_n = 5
      $DS_x = 1.3
   END MODULE En#2
   
   MODULE Ei#1
      type = "Double"
      exp_to_eval = Ei( $DS_x )
      result = 0.10476521853607
      $DS_x = 0.4
   END MODULE Ei#1
   
   MODULE Ei#2
      type = "Double"
      exp_to_eval = Ei( $DS_x, 1.E-12, 1.E-10, 50 )
      result = -0.302668539265993
      $DS_x = 0.3
   END MODULE Ei#2
   
   MODULE RangeDouble
      type = "Bool"
      exp_to_eval = in_range( $DS_one, < 1.0 2.0 > ) 
      result = true
   END MODULE RangeDouble
   
   MODULE RangeInt
      type = "Bool"
      exp_to_eval = in_range( $IS_x, < 1 2 > ) 
      result = false
      $IS_x = 3
   END MODULE RangeInt
   
   MODULE RangeInt2
      type = "Bool"
      exp_to_eval = in_range( $IS_x, < 1 2 > ) 
      result = true
      $IS_x = 1
   END MODULE RangeInt2
   
   MODULE InBox1
      type = "Bool"
      exp_to_eval = in_box( $DV_X, < -3.256 -5.0 >, < 0.0 1.32 > )
      result = true
      $DV_X = < -3.255 1.3 >
   END MODULE InBox1
   
   MODULE InBox2
      type = "Bool"
      exp_to_eval = in_box( $DV_X, < -3.256 -5.0 >, < 0.0 1.32 > )
      result = false
      $DV_X = < -3.257 1.3 >
   END MODULE InBox2
   
   MODULE InBox3
      type = "Bool"
      exp_to_eval = in_box( $DV_X, < 12.5 -3.256 -5. >, < 28. 0.0 1.32 > )
      result = true
      $DV_X = < 15.3 -3. 1.3 >
   END MODULE InBox3
   
   MODULE Exp
      type = "Double"
      exp_to_eval = exp( log( $DS_one ) )
      result = 1.0
   END MODULE Exp
   
   
   
   MODULE int_vector
      type = "IntVector"
      exp_to_eval = $IV_x
      result = < 0 1 2 >
      
      $IV_x = < 0 1 2 >
      
   END MODULE int_vector
   
   MODULE double_vector
      type = "DoubleVector"
      exp_to_eval = $DV_x
      result = < 0. 1. 2. >
      
      $DV_x = < 0. 1. 2. >
      
   END MODULE double_vector
   
   MODULE boolean_vector
      type = "BoolVector"
      exp_to_eval = $BV_x
      result = < true true false >
      
      $BV_x = < true true false >
      
   END MODULE boolean_vector
   
   MODULE cond_int
      type = "Bool"
      exp_to_eval = ( $BS_monbool ? $BS_monbool : $BS_monbool )
      result = false
      
      $BS_monbool = false
      
   END MODULE cond_int
   
   MODULE cond_str
      type = "String"
      exp_to_eval = ( $BS_monbool ? $SS_res : $SS_res )
      result = "titi"
      
      $BS_monbool = false
      $SS_res = "titi"
      
   END MODULE cond_str
   
   MODULE cond_dv
      type = "DoubleVector"
      exp_to_eval = ( $BS_monbool ? $DV_x : $DV_x )
      result = < 0. 1. >
      
      $BS_monbool = false
      $DV_x = < 0.0 1.0 >
      
   END MODULE cond_dv
   
   MODULE cond_iv
      type = "IntVector"
      exp_to_eval = ( $BS_monbool ? $IV_x : $IV_x )
      result = < 0 1 >
      
      $BS_monbool = false
      $IV_x = < 0 1 >
      
   END MODULE cond_iv
   
   MODULE cond_bv
      type = "BoolVector"
      exp_to_eval = ( $BS_monbool ? $BV_x : $BV_x )
      result = < true true >
      
      $BS_monbool = false
      $BV_x = < true true >
      
   END MODULE cond_bv
   
   MODULE cond_sv
      type = "StringVector"
      exp_to_eval = ( $BS_monbool ? $SV_x : $SV_x )
      result = < "true" "true" >
      
      $BS_monbool = false
      $SV_x = < "true" "true" >
      
   END MODULE cond_sv
   
   MODULE arith_double
      type = "Double"
      exp_to_eval = 1. / sqrt(sqr(2.0))
      result = 0.5
   END MODULE arith_double
   
   MODULE arith_int
      type = "Int"
      exp_to_eval = ( 11 - 1 ) / ( 2 + 1 )
      result = 3
   END MODULE arith_int
   
   MODULE vector_int
      type = "IntVector"
      exp_to_eval = vector( 0, 1 )
      result = < 0 1 >
   END MODULE vector_int
   
   MODULE vector_bool
      type = "BoolVector"
      exp_to_eval = vector( true, false )
      result = < true false >
   END MODULE vector_bool
   
   MODULE vector_string
      type = "StringVector"
      exp_to_eval = vector( "true", "false" )
      result = < "true" "false" >
   END MODULE vector_string
   
   MODULE comp_int
      type = "Bool"
      exp_to_eval = 1 < 2
      result = true
   END MODULE comp_int
   
   MODULE inclusion
      type = "Int"
      exp_to_eval = 1
      result = 2
   END MODULE inclusion
   
   MODULE inclusion1
      type = "Int"
      exp_to_eval = 1
      result = 2
   END MODULE inclusion1
   
   MODULE inclusion1
      result == 1
   END MODULE inclusion1
   
   MODULE arrayExpDouble
      type = "DoubleArray2D"
      exp_to_eval = array( < 0.0 1.0 -1.0 >, $DV_x )
      result = [ < 0.0 1.0 -1.0 >, < 2.0 3.0 4.0> ]
      $DV_x = < 2.0 3.0 4.0 >
   END MODULE arrayExpDouble
   
   MODULE arrayExpBool
      type = "BoolArray2D"
      exp_to_eval = array( < true false >, $BV_x )
      result = [ <true false >, < false true> ]
      $BV_x = < false true >
   END MODULE arrayExpBool
   
   MODULE arrayExpString
      type = "StringArray2D"
      exp_to_eval = array( < "a" "b" >, $SV_x )
      result = [ < "a" "b" >, < "c" "d" > ]
      $SV_x = < "c" "d" >
   END MODULE arrayExpString
   
   MODULE arrayExpDouble_1
      type = "DoubleArray2D"
      exp_to_eval = array( < 0.0 1.0 -1.0 >, $DV_x )
      result = [ < 0.0 1.0 -1.0 >, < 2.0 3.0 0.0> ]
      $DV_x = < 2.0 3.0 >
   END MODULE arrayExpDouble_1
   
   MODULE arrayExpDouble2
      type = "DoubleArray2D"
      exp_to_eval = $DA_x
      result = [ < 0.0 1.0 >, < 2.0 3.0 > ]
      
      $DA_x = [ < 0.0 1.0 >, < 2.0 3.0 > ]
      
   END MODULE arrayExpDouble2
   
   MODULE arrayExpBool2
      type = "BoolArray2D"
      exp_to_eval = $BA_x
      result = [ < true false >, < false true > ]
      
      $BA_x = [ < true false >, < false true > ]
      
   END MODULE arrayExpBool2
   
   MODULE arrayExpString2
      type = "StringArray2D"
      exp_to_eval = $SA_x
      result = [ < "a" "b" >, < "c" "d" > ]
      
      $SA_x = [ < "a" "b" >, < "c" "d" > ]
      
   END MODULE arrayExpString2
   MODULE arrayExpInt
      type = "IntArray2D"
      exp_to_eval = array( < 0 1 >, $IV_x )
      result = [ < 0 1 >, < 2 3 > ]
      
      $IV_x = < 2 3 >
      
   END MODULE arrayExpInt
   
   MODULE arrayExpInt_1
      type = "IntArray2D"
      exp_to_eval = array( < 0 1 -1 >, $IV_x )
      result = [ < 0 1 -1 >, < 2 3 0 > ]
      $IV_x = < 2 3 >
   END MODULE arrayExpInt_1
   
   MODULE arrayExpInt2
      type = "IntArray2D"
      exp_to_eval = $IA_x
      result = [ < 0 1 >, < 2 3 > ]
      
      $IA_x = [ < 0 1 >, < 2 3 > ]
      
   END MODULE arrayExpInt2
   
   MODULE string_concat
      type = "String"
      exp_to_eval = "Hello " + "world"
      result = "Hello world"
   END MODULE string_concat
   
   MODULE unary_minus_int
      type = "Int"
      exp_to_eval = 0-1
      result = -1
   END MODULE unary_minus_int
   
   MODULE unary_minus_double
      type = "Double"
      exp_to_eval = 0.0-1.
      result = -1.0
   END MODULE unary_minus_double
   
   MODULE Boolean
      type = "Bool"
      exp_to_eval = in_box( $DV_X, < -1.256 -5.0 >, < -1.0 -2.0 > ) ||
      in_box( $DV_X, < 0.0 0.0 >, < 1.0 2.0 > )
      $DV_X = < 0.5 1.0 >
      result = true
   END MODULE Boolean
   
   MODULE Boolean2
      type = "Bool"
      exp_to_eval = in_box( $DV_X, < -1.256 -5.0 >, < -1.0 -2.0 > ) ||
      in_box( $DV_X, < 0.0 0.0 >, < 1.0 2.0 > )
      $DV_X = < 0.5 3.0 >
      result = false
   END MODULE Boolean2
   
   MODULE TruthTable1
      type = "Bool"
      exp_to_eval = true || true
      result = true
   END MODULE TruthTable1
   
   MODULE TruthTable2
      type = "Bool"
      exp_to_eval = true || false
      result = true
   END MODULE TruthTable2
   
   MODULE TruthTable3
      type = "Bool"
      exp_to_eval = false || true
      result = true
   END MODULE TruthTable3
   
   MODULE TruthTable4
      type = "Bool"
      exp_to_eval = false || false
      result = false
   END MODULE TruthTable4
   
   MODULE TruthTable5
      type = "Bool"
      exp_to_eval = true && true
      result = true
   END MODULE TruthTable5
   
   MODULE TruthTable6
      type = "Bool"
      exp_to_eval = true && false
      result = false
   END MODULE TruthTable6
   
   MODULE TruthTable7
      type = "Bool"
      exp_to_eval = false && true
      result = false
   END MODULE TruthTable7
   
   MODULE TruthTable8
      type = "Bool"
      exp_to_eval = false && false
      result = false
   END MODULE TruthTable8
   
   MODULE TruthTable9
      type = "Bool"
      exp_to_eval = !false
      result = true
   END MODULE TruthTable9
   
   MODULE TruthTable10
      type = "Bool"
      exp_to_eval = !true
      result = false
   END MODULE TruthTable10
   
   MODULE PI
      type = "Double"
      exp_to_eval = pi()
      result = 3.141592653589793238
   END MODULE PI
   
   MODULE E
      type = "Double"
      exp_to_eval = e()
      result = 2.718281828459045235
   END MODULE E
   
   MODULE EULER
      type = "Double"
      exp_to_eval = euler()
      result = 0.577215664901532860
   END MODULE EULER
   
   #include "include1.pel"
   
   MODULE SORT_G_UNICITY
      exp_to_eval = sort( < 1.0 3.0 2.0 -1.0 20.0 2.0 1.0 > , "<" )
      result = < -1.0 1.0 2.0 3.0 20.0 >
      type = "DoubleVector"
   END MODULE SORT_G_UNICITY
   
   MODULE SORT_L_UNICITY
      exp_to_eval = sort( < 1.0 3.0 2.0 -1.0 20.0 2.0 1.0 > , ">" )
      result = < 20.0 3.0 2.0 1.0 -1.0 >
      type = "DoubleVector"
   END MODULE SORT_L_UNICITY
   
   MODULE SIGNED_INT
      exp_to_eval = < 1 -1 >
      result = vector( 1, -( 1 ) )
      type = "IntVector"
   END MODULE SIGNED_INT
   
   MODULE pow
      $DS_Y = pi()
      exp_to_eval = pow( $DS_Y, 1.0+1.0 )
      result = $DS_Y*$DS_Y
      type = "Double"
   END MODULE pow
   
   MODULE pow01
      exp_to_eval = pow( 0.0, 1.0 )
      result = 0.0
      type = "Double"
   END MODULE pow01
   
   MODULE pow10
      exp_to_eval = pow( 1.0, 0.0 )
      result = 1.0
      type = "Double"
   END MODULE pow10
   
   MODULE min
      exp_to_eval = min( 1.0, 2.0 )
      result = 1.0
      type = "Double"
   END MODULE min
   
   MODULE max
      exp_to_eval = max( 1.0, 2.0 )
      result = 2.0
      type = "Double"
   END MODULE max
   
   $BS_T = true
   
   if( !$BS_T ) MODULE cond_module // Not read
      exp_to_eval = true
      result = false
      type = "Bool"
      MODULE cond_module // Not read
         if( $BS_T ) MODULE cond_module // Not read
            exp_to_eval = false
            type = "Bool"
         END MODULE cond_module
      END MODULE PEL_ObjectTest#PEL_Expression_TEST
   END MODULE cond_module
   
   if( $BS_T ) MODULE cond_module // Read
      exp_to_eval = true
      result = true
      type = "Bool"
   END MODULE cond_module
   
   if( !$BS_T ) MODULE cond_module // Not read
      exp_to_eval = true
      result = false
      type = "Bool"
   END MODULE cond_module
   
   MODULE emptytrue
      exp_to_eval = empty( "toto" )
      result = false
      type = "Bool"
   END MODULE emptytrue
   
   MODULE emptyfalse
      exp_to_eval = empty( "" )
      result = true
      type = "Bool"
   END MODULE emptyfalse
   
   MODULE to_string_int
      exp_to_eval = to_string( 1 )
      result = "1"
      type = "String"
   END MODULE to_string_int
   
   MODULE to_string_double
      exp_to_eval = to_string( 1.0 )
      result = "1.000000e+00"
      type = "String"
   END MODULE to_string_double
   
   MODULE unit_sort1
      exp_to_eval = unit_sort( 0.0, 0.0, 1.0, 2 )
      result = 0
      type = "Int"
   END MODULE unit_sort1
   
   MODULE unit_sort2
      exp_to_eval = unit_sort( 0.1, 0.0, 1.0, 2 )
      result = 0
      type = "Int"
   END MODULE unit_sort2
   
   MODULE unit_sort3
      exp_to_eval = unit_sort( 0.499, 0.0, 1.0, 2 )
      result = 0
      type = "Int"
   END MODULE unit_sort3
   
   MODULE unit_sort4
      exp_to_eval = unit_sort( 0.501, 0.0, 1.0, 2 )
      result = 1
      type = "Int"
   END MODULE unit_sort4

   MODULE unit_sort5
      exp_to_eval = unit_sort( 0.9, 0.0, 1.0, 2 )
      result = 1
      type = "Int"
   END MODULE unit_sort5
   
   MODULE unit_sort6
      exp_to_eval = unit_sort( 1.0, 0.0, 1.0, 2 )
      result = 1
      type = "Int"
   END MODULE unit_sort6

   MODULE unit_sort7
      exp_to_eval = unit_sort( 0.0, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort7
   
   MODULE unit_sort8
      exp_to_eval = unit_sort( 0.1, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort8
   
   MODULE unit_sort9
      exp_to_eval = unit_sort( 0.249, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort9
   
   MODULE unit_sort10
      exp_to_eval = unit_sort( 0.251, 0.0, 1.0, 2, true )
      result = 1
      type = "Int"
   END MODULE unit_sort10

   MODULE unit_sort11
      exp_to_eval = unit_sort( 0.5, 0.0, 1.0, 2, true )
      result = 1
      type = "Int"
   END MODULE unit_sort11

   MODULE unit_sort12
      exp_to_eval = unit_sort( 0.749, 0.0, 1.0, 2, true )
      result = 1
      type = "Int"
   END MODULE unit_sort12

   MODULE unit_sort13
      exp_to_eval = unit_sort( 0.751, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort13
   
   MODULE unit_sort14
      exp_to_eval = unit_sort( 0.9, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort14
   
   MODULE unit_sort15
      exp_to_eval = unit_sort( 1.0, 0.0, 1.0, 2, true )
      result = 0
      type = "Int"
   END MODULE unit_sort15
   
   $DV_TABLE = < 0.0 0.25 0.3 0.4 0.5 1.0 >
   $DV_TABLE2 = regular_vector( 0.0, 21, 1. )
   $DV_TABLE3 = regular_vector( -1., 3, 0.5 )
   
   MODULE segm_sort1
      exp_to_eval = segm_sort( 0.0, $DV_TABLE , 2 )
      result = 0
      type = "Int"
   END MODULE segm_sort1
   
   MODULE segm_sort2
      exp_to_eval = segm_sort( 0.3, $DV_TABLE, 2 )
      result = 0
      type = "Int"
   END MODULE segm_sort2
   
   MODULE segm_sort3
      exp_to_eval = segm_sort( 0.34, $DV_TABLE, 2 )
      result = 0
      type = "Int"
   END MODULE segm_sort3
   
   MODULE segm_sort4
      exp_to_eval = segm_sort( 0.36, $DV_TABLE, 2 )
      result = 1
      type = "Int"
   END MODULE segm_sort4
   
   MODULE segm_sort5
      exp_to_eval = segm_sort( 1., $DV_TABLE, 2 )
      result = 1
      type = "Int"
   END MODULE segm_sort5
   
   MODULE segm_sort6
      exp_to_eval = segm_sort( 0., $DV_TABLE2, 3 )
      result = 0
      type = "Int"
   END MODULE segm_sort6
   
   MODULE segm_sort7
      exp_to_eval = segm_sort( 0.333, $DV_TABLE2, 3 )
      result = 0
      type = "Int"
   END MODULE segm_sort7
   
   MODULE segm_sort8
      exp_to_eval = segm_sort( 0.334, $DV_TABLE2, 3 )
      result = 1
      type = "Int"
   END MODULE segm_sort8
   
   MODULE segm_sort9
      exp_to_eval = segm_sort( 0.666, $DV_TABLE2, 3 )
      result = 1
      type = "Int"
   END MODULE segm_sort9
   
   MODULE segm_sort10
      exp_to_eval = segm_sort( 0.667, $DV_TABLE2, 3 )
      result = 2
      type = "Int"
   END MODULE segm_sort10
   
   MODULE segm_sort11
      exp_to_eval = segm_sort( 1., $DV_TABLE2, 3 )
      result = 2
      type = "Int"
   END MODULE segm_sort11
   
   MODULE segm_sort12
      exp_to_eval = segm_sort( -1., $DV_TABLE3, 3 )
      result = 0
      type = "Int"
   END MODULE segm_sort12
   
   MODULE segm_sort13
      exp_to_eval = segm_sort( -0.51, $DV_TABLE3, 3 )
      result = 0
      type = "Int"
   END MODULE segm_sort13
   
   MODULE segm_sort14
      exp_to_eval = segm_sort( -0.49, $DV_TABLE3, 3 )
      result = 1
      type = "Int"
   END MODULE segm_sort14
   
   MODULE segm_sort15
      exp_to_eval = segm_sort( -0.01, $DV_TABLE3, 3 )
      result = 1
      type = "Int"
   END MODULE segm_sort15
   
   MODULE segm_sort16
      exp_to_eval = segm_sort( 0.01, $DV_TABLE3, 3 )
      result = 2
      type = "Int"
   END MODULE segm_sort16
   
   MODULE segm_sort17
      exp_to_eval = segm_sort( -1., $DV_TABLE3, 3, true )
      result = 0
      type = "Int"
   END MODULE segm_sort17
   
   MODULE segm_sort18
      exp_to_eval = segm_sort( -0.76, $DV_TABLE3, 3, true )
      result = 0
      type = "Int"
   END MODULE segm_sort18

   MODULE segm_sort19
      exp_to_eval = segm_sort( -0.74, $DV_TABLE3, 3, true )
      result = 1
      type = "Int"
   END MODULE segm_sort19
   
   MODULE segm_sort20
      exp_to_eval = segm_sort( -0.26, $DV_TABLE3, 3, true )
      result = 1
      type = "Int"
   END MODULE segm_sort20
   
   MODULE segm_sort21
      exp_to_eval = segm_sort( -0.24, $DV_TABLE3, 3, true )
      result = 2
      type = "Int"
   END MODULE segm_sort21

   MODULE segm_sort22
      exp_to_eval = segm_sort( 0.24, $DV_TABLE3, 3, true )
      result = 2
      type = "Int"
   END MODULE segm_sort22

   MODULE segm_sort23
      exp_to_eval = segm_sort( 0.26, $DV_TABLE3, 3, true )
      result = 0
      type = "Int"
   END MODULE segm_sort23

   MODULE segm_sort24
      exp_to_eval = segm_sort( 0.5, $DV_TABLE3, 3, true )
      result = 0
      type = "Int"
   END MODULE segm_sort24
   
   MODULE segm2D_sort1
      exp_to_eval = segm2D_sort(
                         < 0.0 0.0 >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 0
      type = "Int"
   END MODULE segm2D_sort1
   
   MODULE segm2D_sort2
      exp_to_eval = segm2D_sort(
                         < 0.5 0. >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 1
      type = "Int"
   END MODULE segm2D_sort2
   
   MODULE segm2D_sort3
      exp_to_eval = segm2D_sort(
                         < 1. 1. >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 3
      type = "Int"
   END MODULE segm2D_sort3
   
   MODULE segm2D_sort4
      exp_to_eval = segm2D_sort(
                         < 0.5 0.5 >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm2D_sort4

   MODULE segm2D_sort5
      exp_to_eval = segm2D_sort(
                         < 0.24 0.5  >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 2
      type = "Int"
   END MODULE segm2D_sort5
   
   MODULE segm2D_sort6
      exp_to_eval = segm2D_sort(
                         < 0.26 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm2D_sort6
   
   MODULE segm2D_sort7
      exp_to_eval = segm2D_sort(
                         < 0.74 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm2D_sort7
   
   MODULE segm2D_sort8
      exp_to_eval = segm2D_sort(
                         < 0.76 0.5  >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 2
      type = "Int"
   END MODULE segm2D_sort8
   
   MODULE segm2D_sort9
      exp_to_eval = segm2D_sort(
                         < 0.5 0.24 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 1
      type = "Int"
   END MODULE segm2D_sort9
   
   MODULE segm2D_sort10
      exp_to_eval = segm2D_sort(
                         < 0.5 0.26 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm2D_sort10
   
   MODULE segm2D_sort11
      exp_to_eval = segm2D_sort(
                         < 0.5 0.74 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm2D_sort11
   
   MODULE segm2D_sort12
      exp_to_eval = segm2D_sort(
                         < 0.5 0.76 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 1
      type = "Int"
   END MODULE segm2D_sort12
   
   MODULE segm3D_sort1
      exp_to_eval = segm3D_sort(
                         < 0.0 0.0 0.0 >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 0
      type = "Int"
   END MODULE segm3D_sort1
   
   MODULE segm3D_sort2
      exp_to_eval = segm3D_sort(
                         < 0.5 0. 0.5 >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 5
      type = "Int"
   END MODULE segm3D_sort2
   
   MODULE segm3D_sort3
      exp_to_eval = segm3D_sort(
                         < 1. 1. 1. >,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2,
                         < 0.0 0.25 0.3 0.4 0.5 1.0 >, 2 )
      result = 7
      type = "Int"
   END MODULE segm3D_sort3

   MODULE segm3D_sort4
      exp_to_eval = segm3D_sort(
                         < 0.24 0.5 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 6
      type = "Int"
   END MODULE segm3D_sort4
   
   MODULE segm3D_sort5
      exp_to_eval = segm3D_sort(
                         < 0.26 0.5 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort5
   
   MODULE segm3D_sort6
      exp_to_eval = segm3D_sort(
                         < 0.74 0.5 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort6
   
   MODULE segm3D_sort7
      exp_to_eval = segm3D_sort(
                         < 0.76 0.5 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 6
      type = "Int"
   END MODULE segm3D_sort7
   
   MODULE segm3D_sort8
      exp_to_eval = segm3D_sort(
                         < 0.5 0.24 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 5
      type = "Int"
   END MODULE segm3D_sort8
   
   MODULE segm3D_sort9
      exp_to_eval = segm3D_sort(
                         < 0.5 0.26 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort9
   
   MODULE segm3D_sort10
      exp_to_eval = segm3D_sort(
                         < 0.5 0.74 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort10
   
   MODULE segm3D_sort11
      exp_to_eval = segm3D_sort(
                         < 0.5 0.76 0.5 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 5
      type = "Int"
   END MODULE segm3D_sort11
   
   MODULE segm3D_sort12
      exp_to_eval = segm3D_sort(
                         < 0.5 0.5 0.24 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm3D_sort12
   
   MODULE segm3D_sort13
      exp_to_eval = segm3D_sort(
                         < 0.5 0.5 0.26 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort13
   
   MODULE segm3D_sort14
      exp_to_eval = segm3D_sort(
                         < 0.5 0.5 0.74 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 7
      type = "Int"
   END MODULE segm3D_sort14
   
   MODULE segm3D_sort15
      exp_to_eval = segm3D_sort(
                         < 0.5 0.5 0.76 >,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         < 0.0 0.5 1.0 >, 2,
                         true )
      result = 3
      type = "Int"
   END MODULE segm3D_sort15

   MODULE rank_sequential
      exp_to_eval = rank()
      result = 0
      type = "Int"
   END MODULE rank_sequential
   
   MODULE nb_ranks_sequential
      exp_to_eval = nb_ranks()
      result = 1
      type = "Int"
   END MODULE nb_ranks_sequential
   
   MODULE is_defined_true
      $BS_a_variable = false
      exp_to_eval = is_defined( "BS_a_variable" )
      result = true
      type = "Bool"
   END MODULE is_defined_true
   
   MODULE is_defined_false
      exp_to_eval = is_defined( "BS_a_variable" )
      result = false
      type = "Bool"
   END MODULE is_defined_false
   
   MODULE to_double
      exp_to_eval = double( 1 )
      result = 1.0
      type = "Double"
   END MODULE to_double
   
   MODULE to_int1
      exp_to_eval = int( 1.0 )
      result = 1
      type = "Int"
   END MODULE to_int1
   
   MODULE to_int2
      exp_to_eval = int( 1.01 )
      result = 1
      type = "Int"
   END MODULE to_int2
   
   MODULE to_int3
      exp_to_eval = int( 1.99 )
      result = 1
      type = "Int"
   END MODULE to_int3
   
   MODULE to_int4
      exp_to_eval = int( -2.01 )
      result = -2
      type = "Int"
   END MODULE to_int4
   
   MODULE to_int5
      exp_to_eval = int( -2.9 )
      result = -2
      type = "Int"
   END MODULE to_int5
   
   $DS_value = 1.
   MODULE reaffect_var
      exp_to_eval = $DS_x
      $DS_x = 3.*$DS_value
      $DS_value == 2.
      result = 6.
      type = "Double"
   END MODULE reaffect_var
   
   MODULE value_double_0
      exp_to_eval = value( "DS_VAR", 1. )
      result = 1.
      type = "Double"
   END MODULE value_double_0
   
   MODULE value_double_1
      exp_to_eval = value( "DS_VAR", 1. )
      $DS_VAR = 2.
      result = 2.
      type = "Double"
   END MODULE value_double_1
   
   MODULE value_double_2
      exp_to_eval = value( "IS_VAR", 1. )
      result = 1.
      type = "Double"
      exception = true
   END MODULE value_double_2
   
   MODULE value_int_0
      exp_to_eval = value( "IS_VAR", 1 )
      result = 1
      type = "Int"
   END MODULE value_int_0
   
   MODULE value_int_1
      exp_to_eval = value( "IS_VAR", 1 )
      $IS_VAR = 2
      result = 2
      type = "Int"
   END MODULE value_int_1
   
   MODULE value_int_2
      exp_to_eval = value( "DS_VAR", 1 )
      result = 1
      type = "Int"
      exception = true
   END MODULE value_int_2
   
   MODULE value_bool_0
      exp_to_eval = value( "BS_VAR", true )
      result = true
      type = "Bool"
   END MODULE value_bool_0
   
   MODULE value_bool_1
      exp_to_eval = value( "BS_VAR", true )
      $BS_VAR = false
      result = false
      type = "Bool"
   END MODULE value_bool_1
   
   MODULE value_bool_2
      exp_to_eval = value( "DS_VAR", true )
      result = true
      type = "Bool"
      exception = true
   END MODULE value_bool_2
   
   MODULE value_string_0
      exp_to_eval = value( "SS_VAR", "toto" )
      result = "toto"
      type = "String"
   END MODULE value_string_0
   
   MODULE value_string_1
      exp_to_eval = value( "SS_VAR", "toto" )
      $SS_VAR = "titi"
      result = "titi"
      type = "String"
   END MODULE value_string_1
   
   MODULE value_string_2
      exp_to_eval = value( "DS_VAR", "toto" )
      result = "toto"
      type = "String"
      exception = true
   END MODULE value_string_2
   
   MODULE value_doubleVector_0
      exp_to_eval = value( "DV_VAR", $DV_DEF )
      $DV_DEF = < 1. 2. >
      result = $DV_DEF
      type = "DoubleVector"
   END MODULE value_doubleVector_0
   
   MODULE value_doubleVector_1
      exp_to_eval = value( "DV_VAR", $DV_DEF )
      $DV_DEF = < 1. 2. >
      $DV_VAR = < 20. 5. 6.>
      result = < 20. 5. 6.>
      type = "DoubleVector"
   END MODULE value_doubleVector_1
   
   MODULE value_doubleVector_2
      exp_to_eval = value( "DS_VAR", $DV_DEF )
      $DV_DEF = < 1. 2. >
      result = $DV_DEF
      type = "DoubleVector"
      exception = true
   END MODULE value_doubleVector_2
   
   MODULE value_intVector_0
      exp_to_eval = value( "IV_VAR", $IV_DEF )
      $IV_DEF = < 1 2 >
      result = $IV_DEF
      type = "IntVector"
   END MODULE value_intVector_0
   
   MODULE value_intVector_1
      exp_to_eval = value( "IV_VAR", $IV_DEF )
      $IV_DEF = < 1 2 >
      $IV_VAR = < 20 5 6 >
      result = < 20 5 6 >
      type = "IntVector"
   END MODULE value_intVector_1
   
   MODULE value_intVector_2
      exp_to_eval = value( "DS_VAR", $IV_DEF )
      $IV_DEF = < 1 2 >
      result = $IV_DEF
      type = "IntVector"
      exception = true
   END MODULE value_intVector_2
   
   MODULE value_stringVector_0
      exp_to_eval = value( "SV_VAR", $SV_DEF )
      $SV_DEF = < "toto" "titi" >
      result = $SV_DEF
      type = "StringVector"
   END MODULE value_stringVector_0
   
   MODULE value_stringVector_1
      exp_to_eval = value( "SV_VAR", $SV_DEF )
      $SV_DEF = < "toto" "titi" >
      $SV_VAR = < "tutu" >
      result = < "tutu" >
      type = "StringVector"
   END MODULE value_stringVector_1
   
   MODULE value_stringVector_2
      exp_to_eval = value( "DS_VAR", $SV_DEF )
      $SV_DEF = < "toto" "titi" >
      result = $SV_DEF
      type = "StringVector"
      exception = true
   END MODULE value_stringVector_2
   
   MODULE value_intArray2D_0
      exp_to_eval = value( "IA_VAR", $IA_DEF )
      $IA_DEF = [ < 1 2 >, < 3 4 > ]
      result = $IA_DEF
      type = "IntArray2D"
   END MODULE value_intArray2D_0
   
   MODULE value_intArray2D_1
      exp_to_eval = value( "IA_VAR", $IA_DEF )
      $IA_DEF = [ < 1 2 >, < 3 4 > ]
      $IA_VAR = [ < 1 3 2 >, < 2 3 4 >, < 10 3 9 > ]
      result = $IA_VAR
      type = "IntArray2D"
   END MODULE value_intArray2D_1
   
   MODULE value_intArray2D_2
      exp_to_eval = value( "DS_VAR", $IA_DEF )
      $IA_DEF = [ < 1 2 >, < 3 4 > ]
      result = $IA_DEF
      type = "IntArray2D"
      exception = true
   END MODULE value_intArray2D_2
   
   MODULE value_doubleArray2D_0
      exp_to_eval = value( "DA_VAR", $DA_DEF )
      $DA_DEF = [ < 1. 2. >, < 3. 4. > ]
      result = $DA_DEF
      type = "DoubleArray2D"
   END MODULE value_doubleArray2D_0   
   
   MODULE value_doubleArray2D_1
      exp_to_eval = value( "DA_VAR", $DA_DEF )
      $DA_DEF = [ < 1. 2. >, < 3. 4. > ]
      $DA_VAR = [ < 1. 3. 2. >, < 2. 3. 4. >, < 10. 3. 9. > ]
      result = $DA_VAR
      type = "DoubleArray2D"
   END MODULE value_doubleArray2D_1
   
   MODULE value_doubleArray2D_2
      exp_to_eval = value( "DS_VAR", $DA_DEF )
      $DA_DEF = [ < 1. 2. >, < 3. 4. > ]
      result = $DA_DEF
      type = "DoubleArray2D"
      exception = true
   END MODULE value_doubleArray2D_2
   
   MODULE value_boolArray2D_0
      exp_to_eval = value( "BA_VAR", $BA_DEF )
      $BA_DEF = [ < true>, <false> ]
      result = $BA_DEF
      type = "BoolArray2D"
   END MODULE value_boolArray2D_0
   
   MODULE value_stringArray2D_0
      exp_to_eval = value( "SA_VAR", $SA_DEF )
      $SA_DEF = [ < "a" >, < "b" > ]
      result = $SA_DEF
      type = "StringArray2D"
   END MODULE value_stringArray2D_0
   
   MODULE value_boolArray2D_1
      exp_to_eval = value( "BA_VAR", $BA_DEF )
      $BA_DEF = [ < true>, <false> ]
      $BA_VAR = [ < false>, <true> ]
      result = $BA_VAR
      type = "BoolArray2D"
   END MODULE value_boolArray2D_1
   
   MODULE value_stringArray2D_1
      exp_to_eval = value( "SA_VAR", $SA_DEF )
      $SA_DEF = [ < "a" >, < "b" > ]
      $SA_VAR = [ < "c" >, < "d" > ]
      result = $SA_VAR
      type = "StringArray2D"
   END MODULE value_stringArray2D_1
   
   MODULE value_boolArray2D_2
      exp_to_eval = value( "SA_VAR", $BA_DEF )
      $BA_DEF = [ < true>, <false> ]
      result = $BA_DEF
      exception = true
      type = "BoolArray2D"
   END MODULE value_boolArray2D_2
   
   MODULE value_stringArray2D_2
      exp_to_eval = value( "BA_VAR", $SA_DEF )
      $SA_DEF = [ < "a" >, < "b" > ]
      result = $SA_DEF
      exception = true
      type = "StringArray2D"
   END MODULE value_stringArray2D_2
   
   MODULE no_evaluable
      $DS_val1 = 3.*$DS_val2
      $DS_val2 = 2.*$DS_val3
      exp_to_eval = $DS_val1
      result = 1.
      type = "Double"
      exception = true
   END MODULE no_evaluable
   
   MODULE cycle
      $DS_val1 = 3.*$DS_val2
      $DS_val2 = 2.*$DS_val3
      $DS_val3 = 4.*$DS_val1
      exp_to_eval = $DS_val1
      result = 1.
      type = "Double"
      exception = true
   END MODULE cycle
   
   MODULE lin_inter_1D_from_file_0
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol.txt" ), 0. )
      result = 5.
   END MODULE lin_inter_1D_from_file_0
   
   MODULE lin_inter_1D_from_file_1
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol.txt" ), 1. )
      result = 5.
   END MODULE lin_inter_1D_from_file_1
   
   MODULE lin_inter_1D_from_file_2
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol.txt" ), 40. )
      result = 10.
   END MODULE lin_inter_1D_from_file_2
   
   MODULE lin_inter_1D_from_file_3
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol.txt" ), 3. )
      result = 6.
   END MODULE lin_inter_1D_from_file_3
   
   MODULE lin_inter_1D_from_file_4
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol.txt" ), 2. )
      result = 5.5
   END MODULE lin_inter_1D_from_file_4
   
   MODULE lin_inter_1D_from_file_5
      // Error : invalid character
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol2.txt" ), 2. )
      result = 0.
      exception = true
   END MODULE lin_inter_1D_from_file_5
   
   MODULE lin_inter_1D_from_file_6
      // Error : bad number of entries
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol3.txt" ), 2. )
      result = 0.
      exception = true
   END MODULE lin_inter_1D_from_file_6
   
   MODULE lin_inter_1D_from_file_7
      // Error : file not found
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol4.txt" ), 2. )
      result = 0.
      exception = true
   END MODULE lin_inter_1D_from_file_7
   
   MODULE lin_inter_1D_from_file_8
      // Error : bad ordered values
      type = "Double"
      exp_to_eval = interpol( join( this_file_dir(), "interpol5.txt" ), 2. )
      result = 0.
      exception = true
   END MODULE lin_inter_1D_from_file_8
   
   MODULE lin_inter_1D_0
      $DV_X_table = < 1.  3.  8. 30. >
      $DV_Y_table = < 5.  6. -1. 10. >
      type = "Double"
      exp_to_eval = interpol( $DV_X_table, $DV_Y_table, 0. )
      result = 5.
   END MODULE lin_inter_1D_0
   
   MODULE lin_inter_1D_1
      $DV_X_table = < 1.  3.  8. 30. >
      $DV_Y_table = < 5.  6. -1. 10. >
      type = "Double"
      exp_to_eval = interpol( $DV_X_table, $DV_Y_table, 1. )
      result = 5.
   END MODULE lin_inter_1D_1
   
   MODULE lin_inter_1D_2
      $DV_X_table = < 1.  3.  8. 30. >
      $DV_Y_table = < 5.  6. -1. 10. >
      type = "Double"
      exp_to_eval = interpol( $DV_X_table, $DV_Y_table, 40. )
      result = 10.
   END MODULE lin_inter_1D_2
   
   MODULE lin_inter_1D_3
      $DV_X_table = < 1.  3.  8. 30. >
      $DV_Y_table = < 5.  6. -1. 10. >
      type = "Double"
      exp_to_eval = interpol( $DV_X_table, $DV_Y_table, 3. )
      result = 6.
   END MODULE lin_inter_1D_3
   
   MODULE lin_inter_1D_4
      $DV_X_table = < 1.  3.  8. 30. >
      $DV_Y_table = < 5.  6. -1. 10. >
      type = "Double"
      exp_to_eval = interpol( $DV_X_table, $DV_Y_table, 2. )
      result = 5.5
   END MODULE lin_inter_1D_4
   
   MODULE increasing
      exp_to_eval = increasing( < 0. 1. 1. > )
      result = true
      type = "Bool"
   END MODULE increasing
   
   MODULE increasing_i
      exp_to_eval = increasing( < 0 1 1 > )
      result = true
      type = "Bool"
   END MODULE increasing_i
   
   MODULE greater
      exp_to_eval = greater( < 0. 1. 1. >, 0. )
      result = true
      type = "Bool"
   END MODULE greater
   
   MODULE greater_i
      exp_to_eval = greater( < 0 1 1 >, 0 )
      result = true
      type = "Bool"
   END MODULE greater_i
   
   MODULE nvector_i
      exp_to_eval = nvector( 1, 1 )
      result = < 1 >
      type = "IntVector"
   END MODULE nvector_i
   
   MODULE nvector_b
      exp_to_eval = nvector( 2, true )
      result = < true true >
      type = "BoolVector"
   END MODULE nvector_b
   
   MODULE nvector_d
      exp_to_eval = nvector( 2, 1.2 )
      result = < 1.2 1.2 >
      type = "DoubleVector"
   END MODULE nvector_d
   
   MODULE nvector_s
      $SS_STRING = "do"
      exp_to_eval = nvector( 2, $SS_STRING )
      result = < "do" "do" >
      type = "StringVector"
   END MODULE nvector_s
   
   MODULE conditional_vector_i
      exp_to_eval = conditional_vector( true, 1 )
      result = < 1 >
      type = "IntVector"
   END MODULE conditional_vector_i
   
   MODULE conditional_vector_b
      exp_to_eval = conditional_vector( true, true, false, true )
      result = < true >
      type = "BoolVector"
   END MODULE conditional_vector_b
   
   MODULE conditional_vector_d
      exp_to_eval = conditional_vector( true, 1.0, false, 2.0, true, 3.0 )
      result = < 1.0 3.0 >
      type = "DoubleVector"
   END MODULE conditional_vector_d
   
   MODULE conditional_vector_s
      $SS_STRING = "do"
      exp_to_eval = conditional_vector( (1=2), $SS_STRING, true, $SS_STRING )
      result = < "do" >
      type = "StringVector"
   END MODULE conditional_vector_s
   
   MODULE data_with_context#1
      $DS_val1 = 1.
      exp_to_eval = data_with_context( 3.*$DS_val1*$DS_val2, "DS_val2", -4. )
      result = -12.
      type = "Double"
   END MODULE data_with_context#1
   
   MODULE data_with_context#2
      $DS_val1 = 1.
      $DS_val2 = 9.
      exp_to_eval = data_with_context( 3.*$DS_val1*$DS_val2, "DS_val2", -4. )
      result = 27.
      type = "Double"
   END MODULE data_with_context#2
   
   MODULE data_with_context#3
      exp_to_eval = data_with_context( 3.*$DS_val1*$DS_val2, "DS_val2", -4. , "DS_val1", -1., "DV_val", < -1. 2.> )
      result = 12.
      type = "Double"
   END MODULE data_with_context#3

   MODULE middle_point#1
      exp_to_eval = middle_point( 1.1, vector( 1., 2., 4., 10. ) )
      result = 1.5
      type = "Double"
   END MODULE middle_point#1
   
   MODULE middle_point#2
      exp_to_eval = middle_point( 1.9, vector( 1., 2., 4., 10. ) )
      result = 1.5
      type = "Double"
   END MODULE middle_point#2
   
   MODULE middle_point#3
      exp_to_eval = middle_point( 2.1, vector( 1., 2., 4., 10. ) )
      result = 3.
      type = "Double"
   END MODULE middle_point#3
   
   MODULE middle_point#4
      exp_to_eval = middle_point( 3.9, vector( 1., 2., 4., 10. ) )
      result = 3.
      type = "Double"
   END MODULE middle_point#4
   
   MODULE middle_point#5
      exp_to_eval = middle_point( 0., vector( 1., 2., 4., 10. ) )
      result = 1.5
      type = "Double"
   END MODULE middle_point#5
   
   MODULE middle_point#6
      exp_to_eval = middle_point( 11., vector( 1., 2., 4., 10. ) )
      result = 7.
      type = "Double"
   END MODULE middle_point#6
   
   MODULE middle_points#1
      exp_to_eval = middle_points( vector( 1., 2., 4., 10. ) )
      result = vector( 1.5, 3., 7. )
      type = "DoubleVector"
   END MODULE middle_points#1
   
   MODULE middle_points#2
      exp_to_eval = middle_points( vector( 0.5, 1.1, 1.9, 4.9,11. ),
                                   vector( 1., 2., 4., 10. ) )
      result = vector( 1.5, 1.5, 1.5, 7., 7. )
      type = "DoubleVector"
   END MODULE middle_points#2
   
   MODULE x_cut_points#1
      exp_to_eval = x_cut_points( vector( 1., 2., 3. ), 3.9 )
      result = array( vector( 1.5, 3.9 ), vector( 2.5, 3.9 ) )
      type = "DoubleArray2D"
   END MODULE x_cut_points#1
   
   MODULE x_cut_points#2
      exp_to_eval = x_cut_points( vector( 1., 2., 3.), 3.9, 6. )
      result = array( vector( 1.5, 3.9, 6. ), vector( 2.5, 3.9, 6. ) )
      type = "DoubleArray2D"
   END MODULE x_cut_points#2
   
   MODULE y_cut_points#1
      exp_to_eval = y_cut_points( 3.9, vector(1., 2., 3. ) )
      result = array( vector( 3.9, 1.5 ), vector( 3.9, 2.5 ) )
      type = "DoubleArray2D"
   END MODULE y_cut_points#1
   
   MODULE y_cut_points#2
      exp_to_eval = y_cut_points( 3.9, vector(1., 2., 3. ), 6. )
      result = array( vector( 3.9, 1.5, 6. ), vector( 3.9, 2.5, 6. ) )
      type = "DoubleArray2D"
   END MODULE y_cut_points#2
   
   MODULE z_cut_points#1
      exp_to_eval = z_cut_points( 3.9, 6., vector(1., 2., 3. ) )
      result = array( vector( 3.9, 6., 1.5 ), vector( 3.9, 6., 2.5 ) )
      type = "DoubleArray2D"
   END MODULE z_cut_points#1

   #include "derivative.pel"
   
END MODULE PEL_ObjectTest#PEL_Expression_TEST


MODULE PEL_ObjectTest#PEL_Expression_TEST
   MODULE inclusion
      result == 1
   END MODULE inclusion
END MODULE PEL_ObjectTest#PEL_Expression_TEST

if( path_name_separator()="/" )
MODULE PEL_ObjectTest#PEL_Expression_TEST
   
   MODULE dirname1
      type = "String"
      exp_to_eval = dirname( "./" )
      result = "."
   END MODULE dirname1
   
   MODULE dirname2
      type = "String"
      exp_to_eval = dirname( "/" )
      result = "/"
   END MODULE dirname2
   
   MODULE dirname3
      type = "String"
      exp_to_eval = dirname( "" )
      result = "."
   END MODULE dirname3
   
   MODULE dirname4
      type = "String"
      exp_to_eval = dirname( "." )
      result = "."
   END MODULE dirname4
   
   MODULE basename1
      type = "String"
      exp_to_eval = basename( "./" )
      result = "."
   END MODULE basename1
   
   MODULE basename2
      type = "String"
      exp_to_eval = basename( "/" )
      result = "/"
   END MODULE basename2
   
   MODULE basename3
      type = "String"
      exp_to_eval = basename( "" )
      result = ""
   END MODULE basename3
   
   MODULE basename4
      type = "String"
      exp_to_eval = basename( "." )
      result = "."
   END MODULE basename4
   
   MODULE join
      type = "String"
      exp_to_eval = join( "basedir", "home", "name" )
      result = "basedir/home/name"
   END MODULE join
   
   MODULE join_with_slash
      type = "String"
      exp_to_eval = join( "basedir", "/home/name" )
      result = "basedir/home/name"
   END MODULE join_with_slash
   
END MODULE PEL_ObjectTest#PEL_Expression_TEST

if( path_name_separator()="\" )
MODULE PEL_ObjectTest#PEL_Expression_TEST
   
   MODULE join
      type = "String"
      exp_to_eval = join( "basedir", "home", "name" )
      result = "basedir\home\name"
   END MODULE join
   
   MODULE join_with_antislash
      type = "String"
      exp_to_eval = join( "basedir", "\home\name" )
      result = "basedir\home\name"
   END MODULE join_with_antislash
   
END MODULE PEL_ObjectTest#PEL_Expression_TEST
 
