
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[372] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   74,   72,
       71,   71,   70,   72,   72,   72,   70,   62,   62,   70,
       60,   60,   72,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   70,    7,    8,
        7,    7,    7,    7,   68,   69,   68,   73,   70,   73,
       70,   70,   73,   70,   62,   62,   70,   70,   70,   70,
       60,   60,   60,   73,   60,   60,   60,   60,   70,   70,
        0,   54,    0,    0,    0,    0,    0,    0,   66,   65,
       63,   62,    0,   42,   60,    0,   60,   61,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
        0,   65,    0,    0,    0,   67,   47,   45,   50,   48,
       46,   49,   60,   60,   60,   44,   54,    0,    0,    0,
       12,    0,    0,   55,   65,   65,   63,    0,   64,    0,
       59,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   34,   60,   60,   29,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   65,    0,   60,
       60,   60,    0,    0,    0,   12,   12,   12,    0,    0,
       65,   60,   35,   60,   60,   60,   60,   28,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   40,   65,    0,   60,   60,   60,
        0,   14,    0,   12,   12,    0,    0,   53,   65,   60,
       20,   41,   60,   60,   60,   60,   60,    0,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   27,   60,
        0,    0,    0,   60,   60,   60,    0,   14,   14,   18,
       12,   12,    0,   11,   53,   65,   60,   60,   37,   60,
       60,   60,   10,    0,   60,   60,   60,   60,   23,   36,
       21,   30,   60,   60,   27,   27,   27,   60,    0,    0,
        0,   52,   51,   60,   17,   13,   18,   12,   12,    0,
       11,   65,   60,   60,   60,    0,    0,   60,   43,    0,

        0,   26,   60,   25,   60,   60,   31,   60,   27,   27,
       22,    0,    0,    0,   17,   13,   12,    6,   65,   60,
       60,   60,    0,    0,   43,   59,   32,   60,   60,   60,
       33,    0,    0,    0,    6,   65,   60,   60,   60,    0,
       38,    0,   38,   24,   60,    0,    0,    1,   65,    9,
       56,   60,   19,   39,   38,   38,   60,    4,    0,    5,
       60,   58,    0,    5,   57,    0,    0,    0,    2,    3,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       28,   31,   32,   28,   33,   34,   28,   28,   35,   36,
       28,   37,   38,   39,   28,   28,   28,   40,   28,   28,
       41,   42,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   28,   28,   54,   55,   56,
       57,   58,   28,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    8,   68,    8,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    3,    3,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    3
    } ;

static yyconst flex_int16_t yy_base[396] =
    {   0,
        0,    0,   67,   68,   70,   73,  104,    0,  886,  887,
      887,  887,  887,  168,   29,    0,   75,  159,  163,  865,
      843,   52,    0,   46,  139,  135,   38,   39,  142,  144,
       53,  143,  145,  156,  148,  162,  170,    0,  887,  887,
      830,  177,  183,  853,  887,  887,  864,  887,  857,  187,
      887,  868,    0,  841,  197,  212,  841,  834,  826,  818,
      796,   49,  197,    0,  179,  183,  184,  192,  765,    0,
      192,  887,  215,  780,   45,  187,  769,  811,  887,  802,
      221,  229,  237,  887,  768,  760,  161,    0,  218,  219,
      213,  203,  221,  225,  227,  226,  230,  233,  231,  232,

      234,  240,  239,  235,  241,  249,  253,  257,  258,  262,
      732,  771,  291,  756,  750,  887,  887,  887,  887,  887,
      887,  887,  273,  267,  271,  887,  295,  733,  722,  733,
      263,  733,  731,  887,    0,  763,  302,  304,  306,  734,
      887,  265,  277,  285,  287,  288,  294,  289,  291,  292,
      297,  735,  301,  308,  734,  302,  305,  313,  315,  314,
      316,  317,  318,  307,  324,  321,  323,  759,  728,  332,
      347,  325,  714,  717,  712,    0,  715,  714,  704,  707,
      372,  349,  714,  334,  340,  342,  343,  708,  344,  348,
      350,  388,  354,  352,  364,  358,  361,  367,  369,  371,

      372,  374,  375,  376,  707,  731,  394,  391,  390,  382,
      686,  688,  690,  689,  688,  672,  683,    0,  717,  393,
      690,  395,  396,  399,  386,  400,  402,  677,  403,  405,
      406,  408,  409,  412,  413,  417,  420,  418,  478,  423,
      691,  697,  702,  424,  429,  430,  677,    0,  672,    0,
        0,  671,  672,    0,    0,  701,  440,  456,  674,  463,
      468,  546,  673,  657,  464,  455,  465,  466,  670,  666,
      467,  660,  474,  476,    0,  614,  491,  475,  660,  652,
      654,  638,  637,  482,    0,    0,    0,    0,    0,  628,
        0,  661,  487,  490,  489,  669,  653,  682,  887,  497,

      612,  631,  503,  629,  496,  491,  627,  495,  536,    0,
      626,  637,  638,  635,    0,    0,    0,    0,  648,  534,
      523,  531,  635,  552,  618,  639,  887,  746,  533,  535,
      617,  617,  620,  615,    0,  633,  543,  524,  545,  641,
      589,  634,  628,  603,  536,  601,  565,  887,  593,  566,
      564,  550,  887,  887,  695,  730,  556,  887,  565,  584,
      598,  552,  563,  577,  501,  503,  446,  196,  887,  887,
      887,  789,  793,  797,  801,  803,   93,  807,  811,  815,
      819,  823,  827,  831,  835,  839,  843,  847,  851,  855,
      859,  863,  867,  871,  875

    } ;

static yyconst flex_int16_t yy_def[396] =
    {   0,
      371,    1,  372,  372,  373,  373,  371,    7,  371,  371,
      371,  371,  371,  374,  371,  375,  371,  371,  371,  371,
      376,  376,  377,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  377,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  374,
      371,  371,  375,  371,  371,  371,  371,  371,  371,  371,
      376,  376,  376,  377,  376,  376,  376,  376,  371,  377,
      374,  371,  374,  371,  371,  371,  371,  371,  371,  378,
      371,  371,  371,  371,  376,  379,  376,  377,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      371,  378,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  376,  376,  376,  371,  374,  371,  371,  371,
      380,  371,  371,  371,  378,  378,  371,  371,  371,  379,
      371,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  378,  371,  376,
      376,  376,  371,  371,  371,  380,  380,  380,  371,  371,
      378,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  378,  371,  376,  376,  376,
      371,  381,  371,  380,  380,  371,  371,  382,  378,  376,
      376,  376,  376,  376,  376,  376,  376,  371,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  383,  376,
      371,  371,  371,  376,  376,  376,  371,  381,  381,  384,
      385,  380,  371,  386,  382,  378,  376,  376,  376,  376,
      376,  387,  376,  371,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  388,  383,  389,  376,  371,  371,
      371,  376,  376,  376,  390,  391,  384,  385,  392,  371,
      386,  378,  376,  376,  376,  371,  393,  387,  371,  394,

      371,  376,  376,  376,  376,  376,  376,  376,  389,  388,
      376,  371,  371,  371,  390,  391,  392,  395,  378,  376,
      376,  376,  371,  394,  379,  393,  371,  376,  376,  376,
      376,  371,  371,  371,  395,  378,  376,  376,  376,  371,
      371,  371,  379,  376,  376,  371,  371,  371,  378,  376,
      376,  376,  371,  371,  379,  371,  376,  371,  371,  378,
      376,  376,  371,  378,  376,  371,  371,  371,  371,  371,
        0,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371

    } ;

static yyconst flex_int16_t yy_nxt[957] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   13,   13,   16,
       13,   13,   13,   13,   13,   13,   17,   18,   19,   20,
       13,   13,   13,   13,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   22,   21,   21,   21,   21,
       13,   10,   13,   23,   21,   21,   24,   25,   26,   27,
       21,   21,   28,   29,   30,   31,   32,   33,   21,   34,
       35,   36,   37,   21,   21,   21,   21,   13,   38,   40,
       40,   43,   46,   41,   41,   46,   74,   75,   86,   86,
       87,   76,   47,   42,   42,   47,   86,   79,  123,   86,
       77,   80,   86,   86,   97,   88,   96,   89,  129,   90,

      130,  100,   91,   44,   48,   12,   12,   12,   49,   50,
       48,   51,   52,   53,   51,   51,   51,   51,   54,   51,
       51,   55,   56,   57,   51,   58,   59,   60,   61,   61,
       61,   61,   62,   63,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   51,   48,   51,   64,   61,   61,
       65,   66,   61,   61,   61,   61,   61,   61,   61,   61,
       67,   61,   61,   68,   61,   61,   61,   61,   61,   61,
       61,   69,   70,   72,   81,   86,   82,   82,   81,   86,
       82,   82,   86,   86,   86,   86,  113,   83,   86,   79,
       94,   83,   72,  112,  142,   92,   86,   72,   98,   95,

      101,   86,   86,  102,   93,   99,  103,   83,  104,   73,
       86,   83,   81,  106,   82,   82,  105,  107,  114,   86,
      127,  108,  109,   86,   86,   83,  110,   81,   73,   82,
       82,  124,   86,   73,  370,   91,  131,   86,  137,  137,
       83,  101,  132,   86,   81,   83,   82,   82,   93,   83,
      138,  138,  125,   86,  139,  139,   73,   83,   86,   86,
       83,   86,  143,  144,  146,   86,   86,   86,  145,   83,
       86,   86,   86,   86,   86,   86,  147,   83,  150,   86,
       86,   86,  156,  151,  159,  161,  148,  149,  153,   86,
      152,  154,  157,   86,  113,  155,  158,   86,   86,  162,

       72,  160,   86,  171,  170,   86,  163,   86,  182,  165,
      177,   86,  164,   86,  167,  172,  166,   86,  178,  137,
      137,  139,  139,  139,  139,   86,  114,   86,   86,   86,
       83,   86,   86,  186,   86,  183,   73,   86,  187,  189,
      190,   86,   86,  188,  184,   86,  185,   86,   86,  191,
       83,  192,  193,   86,   86,   86,   86,   86,   86,  202,
      194,   86,  198,   86,   86,   86,  201,  195,  197,  208,
      205,  209,   86,  196,   86,  218,  199,  220,  200,  203,
       86,  204,   86,   86,   86,  210,  219,   86,   86,   86,
       86,  228,   86,  221,   86,  223,  230,  224,   86,  229,

      222,   86,  225,  226,   86,  227,  232,   86,  231,   86,
      234,   86,   86,  233,   86,   86,   86,  236,  241,  237,
      242,  235,   86,  245,  238,  239,   86,  243,   86,  244,
       86,   86,  257,   86,  246,   86,   86,  240,  258,   86,
       86,  261,   86,   86,  259,   86,   86,  262,   86,   86,
      263,  260,   86,   86,  268,  269,  265,   86,   86,  271,
       86,  282,  283,   86,   86,  266,  267,  278,  273,   86,
       86,  296,  270,  274,  369,  293,  284,  272,  275,  275,
       86,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  140,  275,   86,   86,  275,  275,  275,

      275,  275,  294,   86,   86,   86,   86,   86,   86,  295,
      306,  303,  302,  304,   86,   86,   86,  325,  277,  275,
      275,  320,   86,  307,  308,  306,  305,   86,  311,   86,
       86,   86,  322,  310,  321,   86,   86,  330,  140,  326,
      368,   86,  331,   86,  329,  275,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  328,  297,   86,   86,  297,  299,  297,  297,  297,
      337,   86,  325,   86,   86,   86,   86,  339,  310,  345,
      344,  350,  338,   86,  351,   86,  300,  297,  297,  352,
       86,  364,   86,  341,  326,  357,   86,  366,  364,  367,

      363,  341,  341,  341,   86,  341,   86,  360,  359,  361,
      341,  341,  341,  297,  275,  275,  362,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  341,
      275,  341,  355,  275,  275,  275,  275,  275,   86,  358,
      355,  355,  355,   86,  355,  354,  353,  349,  348,  355,
      355,  355,  347,  346,  277,  275,  275,   86,  365,  299,
      141,  340,  336,  334,  333,  332,   86,   86,  355,   86,
      356,   86,  327,  299,  323,  319,  318,   86,   86,  314,
      313,  275,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  312,  297,  355,

       86,  297,  299,  297,  297,  297,   86,  355,  355,  355,
       86,  355,  301,   86,   86,  292,  355,  355,  355,  290,
      289,  286,  300,  297,  297,  285,  281,  280,  279,  264,
       86,  256,  254,  253,  341,  355,  252,  356,  251,  250,
      249,  247,  341,  341,  341,  219,  341,   86,   86,  297,
      341,  341,  341,  341,   86,  217,  342,  216,  341,  341,
      341,  215,  341,  214,  213,  212,  211,  341,  341,  341,
      341,  207,  341,  206,   86,   86,  141,  181,  180,  179,
      175,  174,  173,  169,  115,  168,  343,  132,  341,   39,
       39,   39,   39,   45,   45,   45,   45,   71,   71,   71,

       71,   78,  141,   78,   78,   85,   85,  135,   86,  135,
      135,  140,  140,  140,  140,  176,  136,  176,  176,  248,
      134,  248,  248,  255,  133,  255,  255,  276,  128,  276,
      276,  287,  126,  287,  287,  288,   86,  288,  288,  291,
      122,  291,  291,  298,  298,  298,  298,  275,  121,  275,
      275,  309,  309,  309,  309,  315,  120,  315,  315,  316,
       84,  316,  316,  317,  119,  317,  317,  297,  297,  297,
      297,  324,  324,  324,  324,  335,  118,  335,  335,  117,
      116,  115,  111,   86,   84,  371,    9,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371
    } ;

static yyconst flex_int16_t yy_chk[957] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    4,    5,    3,    4,    6,   15,   15,   27,   28,
       22,   15,    5,    3,    4,    6,   24,   17,   62,   62,
       15,   17,   22,   31,   28,  377,   27,   24,   75,   24,

       75,   31,   24,    4,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   14,   18,   26,   18,   18,   19,   25,
       19,   19,   29,   32,   30,   33,   43,   18,   35,   42,
       26,   19,   50,   42,   87,   25,   34,   71,   29,   26,

       32,   87,   36,   33,   25,   30,   33,   18,   34,   14,
       37,   19,   55,   35,   55,   55,   34,   36,   43,   65,
       73,   36,   37,   66,   67,   55,   37,   56,   50,   56,
       56,   63,   68,   71,  368,   65,   76,   63,   81,   81,
       56,   67,   76,   92,   82,   55,   82,   82,   66,   81,
       83,   83,   68,   91,   83,   83,   73,   82,   89,   90,
       56,   93,   89,   90,   92,   94,   96,   95,   91,   81,
       97,   99,  100,   98,  101,  104,   93,   82,   96,  103,
      102,  105,  101,   97,  103,  105,   94,   95,   98,  106,
       97,   99,  102,  107,  113,  100,  102,  108,  109,  105,

      127,  104,  110,  124,  123,  142,  106,  124,  142,  108,
      131,  125,  107,  123,  110,  125,  109,  143,  131,  137,
      137,  138,  138,  139,  139,  144,  113,  145,  146,  148,
      137,  149,  150,  146,  147,  143,  127,  151,  147,  149,
      150,  153,  156,  148,  144,  157,  145,  164,  154,  151,
      137,  153,  154,  158,  160,  159,  161,  162,  163,  164,
      156,  166,  160,  167,  165,  172,  163,  157,  159,  170,
      167,  171,  170,  158,  184,  181,  161,  182,  162,  165,
      185,  166,  186,  187,  189,  172,  181,  171,  190,  182,
      191,  192,  194,  184,  193,  186,  194,  187,  196,  193,

      185,  197,  189,  190,  195,  191,  196,  198,  195,  199,
      198,  200,  201,  197,  202,  203,  204,  200,  207,  201,
      207,  199,  210,  209,  202,  203,  225,  207,  192,  208,
      209,  208,  220,  220,  210,  222,  223,  204,  222,  224,
      226,  225,  227,  229,  223,  230,  231,  226,  232,  233,
      227,  224,  234,  235,  232,  233,  229,  236,  238,  235,
      237,  244,  245,  240,  244,  230,  231,  240,  237,  245,
      246,  261,  234,  238,  367,  257,  246,  236,  239,  239,
      257,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  277,  239,  266,  258,  239,  239,  239,

      239,  239,  258,  260,  265,  267,  268,  271,  261,  260,
      271,  266,  265,  267,  273,  278,  274,  300,  239,  239,
      239,  293,  284,  273,  274,  284,  268,  293,  278,  295,
      294,  306,  295,  277,  294,  308,  305,  306,  309,  300,
      366,  365,  308,  303,  305,  239,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  303,  262,  321,  338,  262,  262,  262,  262,  262,
      320,  322,  324,  329,  320,  330,  345,  322,  309,  330,
      329,  337,  321,  337,  338,  339,  262,  262,  262,  339,
      352,  364,  362,  341,  324,  345,  357,  363,  360,  363,

      359,  341,  341,  341,  351,  341,  350,  349,  347,  352,
      341,  341,  341,  262,  276,  276,  357,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  341,
      276,  341,  343,  276,  276,  276,  276,  276,  361,  346,
      343,  343,  343,  344,  343,  342,  340,  336,  334,  343,
      343,  343,  333,  332,  276,  276,  276,  331,  361,  326,
      325,  323,  319,  314,  313,  312,  311,  307,  343,  304,
      343,  302,  301,  297,  296,  292,  290,  283,  282,  281,
      280,  276,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  279,  298,  355,

      272,  298,  298,  298,  298,  298,  270,  355,  355,  355,
      269,  355,  264,  263,  259,  256,  355,  355,  355,  253,
      252,  249,  298,  298,  298,  247,  243,  242,  241,  228,
      221,  219,  217,  216,  356,  355,  215,  355,  214,  213,
      212,  211,  356,  356,  356,  206,  356,  205,  188,  298,
      328,  356,  356,  356,  183,  180,  328,  179,  328,  328,
      328,  178,  328,  177,  175,  174,  173,  328,  328,  328,
      356,  169,  356,  168,  155,  152,  140,  136,  133,  132,
      130,  129,  128,  115,  114,  112,  328,  111,  328,  372,
      372,  372,  372,  373,  373,  373,  373,  374,  374,  374,

      374,  375,   86,  375,  375,  376,  376,  378,   85,  378,
      378,  379,  379,  379,  379,  380,   80,  380,  380,  381,
       78,  381,  381,  382,   77,  382,  382,  383,   74,  383,
      383,  384,   69,  384,  384,  385,   61,  385,  385,  386,
       60,  386,  386,  387,  387,  387,  387,  388,   59,  388,
      388,  389,  389,  389,  389,  390,   58,  390,  390,  391,
       57,  391,  391,  392,   54,  392,  392,  393,  393,  393,
      393,  394,  394,  394,  394,  395,   52,  395,  395,   49,
       47,   44,   41,   21,   20,    9,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[73] =
    {   0,
       42,   47,   52,   57,   62,   78,   82,   83,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   97,  101,
      105,  109,  113,  117,  121,  125,  129,  133,  137,  141,
      145,  149,  150,  151,  152,  153,  154,  158,  159,  163,
      167,  171,  175,  179,  183,  187,  191,  195,  199,  203,
      207,  208,  212,  216,  217,  221,  222,  223,  227,  228,
      229,  233,  234,  235,  239,  243,  248,  262,  263,  266,
      271,  275
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Docify.fl"
#line 3 "Docify.fl"

 // Docify.fl
 // Description et identification des symbols terminaux
 // Ce file est compile par flex
 
#include <stdio.h>
#include <string>
#include <DOC_Tools.hh>
#include <DOC_Text.hh>
#include <DOC_Docify.hh>
#include <PEL_Root.hh>
#ifdef _WIN32

/* Windows doesn't define the isatty() function.
   This function is implemented in PELbase/grammar */

int isatty (int fd) ;
#endif

/* Mots clef */
#define IDENTIFICATEUR(id) { yylval = 0 ; \
			     DOC_Tools::record( &yytext[0] ) ; \
			     return( id ) ; }

/* DOC_Text de charactere */
#define TEXT(id) { yylval = DOC_Text::create( PEL_Root::object(), yytext,\
					  DOC_Tools::current_line_number() ) ; \
		     DOC_Tools::record( &yytext[0] ) ; \
                     return( id ) ; }

static string comment ;

void yyerror( const char * s )  ;




#line 920 "lex.yy.c"

#define INITIAL 0
#define CCMODE 1
#define COMMENT 2
#define CHECK 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 41 "Docify.fl"

#line 1140 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 372 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 887 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 73 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 73 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 74 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "Docify.fl"
{ 
		          BEGIN( CHECK ) ;
			  IDENTIFICATEUR( YYDOC_PEL_LABEL ) ;
                        } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "Docify.fl"
{ 
		          BEGIN( CHECK ) ;
			  IDENTIFICATEUR( YYDOC_PEL_CHECK_PRE ) ;
                        } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 52 "Docify.fl"
{ 
		           BEGIN( CHECK ) ;
			   IDENTIFICATEUR( YYDOC_PEL_CHECK_POST ) ;
                         } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "Docify.fl"
{ 
		          BEGIN( CHECK ) ;
			  IDENTIFICATEUR( YYDOC_PEL_ASSERT ) ;
                        } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "Docify.fl"
{ /* On saute les comments de presentation */
			  DOC_Tools::record( &yytext[0] ) ;
			  if( DOC_Tools::is_implementation_file() )
			  {
			    DOC_Tools::toggle_cc_mode() ;
		            if( DOC_Tools::is_cc_mode() )
			    {
			      BEGIN(CCMODE);
			    }
			    else
			    {
			      BEGIN(0);
			    }
			  }
                        } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "Docify.fl"
{ /* Inclusion de file */
			  TEXT( YYDOC_INCLUDE ) ;
                        } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "Docify.fl"
{ if( !DOC_Tools::is_implementation_file() ) BEGIN(0) ; DOC_Tools::record(&yytext[0]) ; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 83 "Docify.fl"
{ DOC_Tools::record(&yytext[0]) ; }
	YY_BREAK
case 9:
#line 86 "Docify.fl"
case 10:
#line 87 "Docify.fl"
case 11:
#line 88 "Docify.fl"
case 12:
#line 89 "Docify.fl"
case 13:
#line 90 "Docify.fl"
case 14:
#line 91 "Docify.fl"
case 15:
#line 92 "Docify.fl"
case 16:
#line 93 "Docify.fl"
case 17:
#line 94 "Docify.fl"
case 18:
YY_RULE_SETUP
#line 94 "Docify.fl"
{ /* Ordres du preprocesseur ignores */
			DOC_Tools::record( &yytext[0] ) ; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "Docify.fl"
{ /* Mot clef extern */ 
			  IDENTIFICATEUR( YYDOC_EXTERN ) ;
			 }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 101 "Docify.fl"
{ /* Mot clef class */
			  IDENTIFICATEUR( YYDOC_CLASS ) ;
                        } 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_STATIC ) ;
                        } 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 109 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_VIRTUAL ) ;
                        } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 113 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_PUBLIC ) ;
                        } 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 117 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_PROTECTED ) ;
                        } 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 121 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_PRIVATE ) ;
                        } 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "Docify.fl"
{ /* Mot clef de niveau de protection */
			  IDENTIFICATEUR( YYDOC_MUTABLE ) ;
                        } 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "Docify.fl"
{ /* Mot clef using */
			  IDENTIFICATEUR( YYDOC_USING ) ;
                        } 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 133 "Docify.fl"
{ /* Mot clef enum */
			  IDENTIFICATEUR( YYDOC_ENUM ) ;
                        } 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 137 "Docify.fl"
{ /* Mot clef new */
			  IDENTIFICATEUR( YYDOC_NEW ) ;
                        } 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "Docify.fl"
{ /* Mot clef enum */
			  IDENTIFICATEUR( YYDOC_STRUCT ) ;
                        } 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 145 "Docify.fl"
{ /* Mot clef enum */
			  IDENTIFICATEUR( YYDOC_TYPEDEF ) ;
                        } 
	YY_BREAK
case 32:
#line 150 "Docify.fl"
case 33:
#line 151 "Docify.fl"
case 34:
#line 152 "Docify.fl"
case 35:
#line 153 "Docify.fl"
case 36:
#line 154 "Docify.fl"
case 37:
YY_RULE_SETUP
#line 154 "Docify.fl"
{ /* DOC_Types de base du C */
			  TEXT( YYDOC_TYPE_BASE ) ;
                        } 
	YY_BREAK
case 38:
#line 159 "Docify.fl"
case 39:
YY_RULE_SETUP
#line 159 "Docify.fl"
{ /* Operateur */
			  TEXT( YYDOC_OPERATOR ) ;
                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "Docify.fl"
{ /* DOC_Type void */
			  IDENTIFICATEUR( YYDOC_VOID ) ;
                        } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "Docify.fl"
{ /* Modificateur const */
			  IDENTIFICATEUR( YYDOC_CONST ) ;
                        } 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 171 "Docify.fl"
{ /* Modificateur const */
			  IDENTIFICATEUR( YYDOC_POINTPOINT ) ;
                        } 
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 175 "Docify.fl"
{ /* Friend */
			  TEXT( YYDOC_FRIEND ) ;
                        } 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 179 "Docify.fl"
{ /* Operateur ou */
			  IDENTIFICATEUR( YYDOC_OROR ) ;
                        } 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 183 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_ANDAND ) ;
                        } 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_EGALEGAL ) ;
                        } 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 191 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_DIFFEGAL ) ;
                        } 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 195 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_INFEGAL ) ;
                        } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 199 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_SUPEGAL ) ;
                        } 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 203 "Docify.fl"
{ /* Operateur et */
			  IDENTIFICATEUR( YYDOC_FLECHE ) ;
                        } 
	YY_BREAK
case 51:
#line 208 "Docify.fl"
case 52:
YY_RULE_SETUP
#line 208 "Docify.fl"
{ /* Operateur FORALL et EXISTS */
			  TEXT( YYDOC_FORALLEXISTS ) ;
                        } 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 212 "Docify.fl"
{ /* DOC_Category de method */
			  TEXT( YYDOC_CATEGORY ) ;
                        } 
	YY_BREAK
case 54:
/* rule 54 can match eol */
#line 217 "Docify.fl"
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 217 "Docify.fl"
{ /* DOC_Text de caratere */
			  TEXT( YYDOC_CHAINE ) ;
                        } 
	YY_BREAK
case 56:
#line 222 "Docify.fl"
case 57:
#line 223 "Docify.fl"
case 58:
YY_RULE_SETUP
#line 223 "Docify.fl"
{ /* Identificateur de cast */
			  TEXT( YYDOC_CAST ) ;
                        } 
	YY_BREAK
case 59:
/* rule 59 can match eol */
#line 228 "Docify.fl"
case 60:
/* rule 60 can match eol */
#line 229 "Docify.fl"
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 229 "Docify.fl"
{ /* Identificateur quelconque */
			  TEXT( YYDOC_IDENTIF ) ;
                        } 
	YY_BREAK
case 62:
#line 234 "Docify.fl"
case 63:
#line 235 "Docify.fl"
case 64:
YY_RULE_SETUP
#line 235 "Docify.fl"
{ /* Identificateur de chiffre */
			  TEXT( YYDOC_CHIFFRE ) ;
                        } 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 239 "Docify.fl"
{ /* Comment */
			  TEXT( YYDOC_COMMENT ) ; 
                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 243 "Docify.fl"
{ /* Comment on several lines                            
			     TEXT( YYDOC_COMMENT ) ; */
			  comment = "/*" ;
			  BEGIN( COMMENT ) ;
                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 248 "Docify.fl"
{  comment += "*/" ;
			   yylval = DOC_Text::create( PEL_Root::object(), comment ) ; 
			   DOC_Tools::record( &yytext[0] ) ; 
		           if( DOC_Tools::is_implementation_file() && DOC_Tools::is_cc_mode() )
			   {
			     BEGIN(CCMODE);
			   }
			   else
			   {
			     BEGIN(0);
			   }
		           return( YYDOC_COMMENT ) ; 
			}
	YY_BREAK
case 68:
#line 263 "Docify.fl"
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 263 "Docify.fl"
{  comment += yytext[0] ; DOC_Tools::record( &yytext[0] ) ; 
                           }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 266 "Docify.fl"
{ 
                          /* Caracteres de ponctuation retournes */
                          IDENTIFICATEUR( yytext[0] ) ;
                        }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 271 "Docify.fl"
{ /* Caracteres ignores */
                          DOC_Tools::record( &yytext[0] ) ;
                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "Docify.fl"
{ /* Caracteres non reconnus */
                          DOC_Tools::record( &yytext[0] ) ;
			  char message[] =  "Caractere inconnu :  " ;
			  message[20] = yytext[0] ;
                          yyerror( message ) ;
                        }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 282 "Docify.fl"
ECHO;
	YY_BREAK
#line 1679 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CCMODE):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(CHECK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 372 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 372 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 371);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-or-c++ */
/* %if-c-only */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

/* %if-c++-only */
/* %endif */

/* %if-c-only */

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
/* %endif */
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 282 "Docify.fl"



extern int yyparse( void ) ;

void switch_mode( void )
{
   if( DOC_Tools::is_implementation_file() )
   {
	BEGIN(CCMODE);
   }
   else
   {
        BEGIN(0);
   }
}



void switch_to_buffer( FILE * file )
{ 	
   YY_BUFFER_STATE old_buffer = YY_CURRENT_BUFFER ;
   FILE * file_old = yyin ;
   yyin = file ;
   yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE ) ) ;
   switch_mode() ;
   yyparse() ;
   yy_delete_buffer(YY_CURRENT_BUFFER ) ;
   yy_switch_to_buffer(old_buffer ) ;
   yyin = file_old ;
}


void yyerror( const char * s ) 
{
   DOC_Tools::yyerror( s ) ;
}


