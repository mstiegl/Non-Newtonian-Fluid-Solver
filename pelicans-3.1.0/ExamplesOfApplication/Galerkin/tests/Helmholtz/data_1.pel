MODULE PEL_Application

   //*** solution
      
   $DS_u   =          cos( pi()*$DS_x ) * sin( pi()*$DS_y )
   $DS_d1u = - pi() * sin( pi()*$DS_x ) * sin( pi()*$DS_y )
   $DS_d2u =   pi() * cos( pi()*$DS_x ) * cos( pi()*$DS_y )
   
   $DV_sol = vector( $DS_u )
   $DA_grad_sol = array( vector( $DS_d1u, $DS_d2u ) )

   //*** edp

   $DS_alpha = 1.0
   $DS_kappa = 1.0
   $DV_f = vector( (2.0*pi()*pi() + 1.0) *
                   cos( pi()*$DS_x ) * sin( pi()*$DS_y )  )

   $SV_Dirichlet_colors = < "bottom" "top"  >
   $DV_Dirichlet_value  = < 0.0 > 

   //*** numerical method
                   
   $SS_element_name = "PDE_2D_Q1_4nodes"
   $SS_quadrature_rule_provider = "GE_QRprovider_5"

   $SS_solver           = "LA_CG_IS"
   $SS_preconditioner   = "LA_Jacobi_PC"
   
END MODULE PEL_Application

#include ( join( this_file_dir(), "data_0.pel" ) )
