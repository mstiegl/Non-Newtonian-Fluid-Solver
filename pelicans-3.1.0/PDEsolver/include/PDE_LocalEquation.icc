/*
 *  Copyright 1995-2010 by IRSN
 *
 *  This software is an application framework, with a set of integrated  
 *  reusable components, whose purpose is to simplify the task of developing 
 *  softwares of numerical mathematics and scientific computing.
 * 
 *  This software is governed by the CeCILL-C license under French law and 
 *  abiding by the rules of distribution of free software. You can use, modify 
 *  and/or redistribute the software under the terms of the CeCILL-C license  
 *  as circulated by CEA, CNRS and INRIA at the following URL 
 *  "http://www.cecill.info". 
 *
 *  As a counterpart to the access to the source code and rights to copy,  
 *  modify and redistribute granted by the license, users are provided only 
 *  with a limited warranty and the software's author, the holder of the  
 *  economic rights, and the successive licensors have only limited liability. 
 *
 *  In this respect, the user's attention is drawn to the risks associated  
 *  with loading, using, modifying and/or developing or reproducing the  
 *  software by the user in light of its specific status of free software,
 *  that may mean that it is complicated to manipulate, and that also  
 *  therefore means that it is reserved for developers and experienced 
 *  professionals having in-depth computer knowledge. Users are therefore 
 *  encouraged to load and test the software's suitability as regards their 
 *  requirements in conditions enabling the security of their systems and/or 
 *  data to be ensured and, more generally, to use and operate it in the same 
 *  conditions as regards security. 
 *
 *  The fact that you are presently reading this means that you have had 
 *  knowledge of the CeCILL-C license and that you accept its terms.
 */

// #include <PEL_assertions.hh>

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: nb_rows( void ) const
//----------------------------------------------------------------------
{
   return( nbRows ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: nb_row_sub_indices( void ) const
//----------------------------------------------------------------------
{
   return( nbComps1 ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: nb_columns( void ) const
//----------------------------------------------------------------------
{
   return( nbCols ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: nb_column_sub_indices( void ) const
//----------------------------------------------------------------------
{
   return( nbComps2 ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: mat_idx( size_t i, size_t j, size_t ic, size_t jc ) const
//----------------------------------------------------------------------
{
   return( ( ( nbCols*i + j ) * nbComps1 + ic ) * nbComps2 + jc ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: mat_idx( size_t i, size_t j ) const
//----------------------------------------------------------------------
{
   return( nbCols*i + j ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: vec_idx( size_t i, size_t ic ) const
//----------------------------------------------------------------------
{
   return( i*nbComps1 + ic ) ;
}

//----------------------------------------------------------------------
inline
bool
PDE_LocalEquation:: matrix_item_is_set(
                        size_t i, size_t j, size_t ic, size_t jc ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: matrix_item_is_set" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;
   PEL_CHECK_PRE( jc<nb_column_sub_indices() ) ;

   return( A_IS_SET[ mat_idx( i, j, ic, jc ) ] ) ;
}

//----------------------------------------------------------------------
inline
double
PDE_LocalEquation:: matrix_item( 
                        size_t i, size_t j, size_t ic, size_t jc ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: matrix_item" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;
   PEL_CHECK_PRE( jc<nb_column_sub_indices() ) ;

   return( A[ mat_idx( i, j, ic, jc ) ] ) ;
}

//----------------------------------------------------------------------
inline
void
PDE_LocalEquation:: add_to_matrix( double x, 
                                   size_t i, 
                                   size_t j, 
                                   size_t ic, 
                                   size_t jc )
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: add_to_matrix" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;
   PEL_CHECK_PRE( jc<nb_column_sub_indices() ) ;
   // PEL_SAVEOLD( double, matrix_item, matrix_item(i,j,ic,jc) ) ;
   
   size_t idx = mat_idx( i, j, ic, jc ) ;
   A_IS_SET[ idx ] = true ;
   A[ idx ] += x ;

   PEL_CHECK_POST( matrix_item_is_set( i, j, ic, jc ) ) ;
   PEL_CHECK_POST( FORMAL( matrix_item(i,j,ic,jc)==OLD(matrix_item)+x ) ) ;
}

//----------------------------------------------------------------------
inline
void
PDE_LocalEquation:: add_to_matrix( double x, 
                                   size_t i, 
                                   size_t j )
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: add_to_matrix" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;
   PEL_CHECK_PRE( nb_row_sub_indices()==1 ) ;
   PEL_CHECK_PRE( nb_column_sub_indices()==1 ) ;
   // PEL_SAVEOLD( double, matrix_item, matrix_item(i,j,ic,jc) ) ;
   
   size_t idx = mat_idx( i, j ) ;
   A_IS_SET[ idx ] = true ;
   A[ idx ] += x ;

   PEL_CHECK_POST( matrix_item_is_set( i, j, 0, 0 ) ) ;
   PEL_CHECK_POST( FORMAL( matrix_item(i,j,0,0)==OLD(matrix_item)+x ) ) ;
}

//----------------------------------------------------------------------
inline
double
PDE_LocalEquation:: vector_item( size_t i, size_t ic ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: vector_item" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;

   return( b[ vec_idx( i, ic ) ] ) ;
}

//----------------------------------------------------------------------
inline
void
PDE_LocalEquation:: add_to_vector( double x, size_t i, size_t ic )
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: add_to_vector" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;
   // PEL_SAVEOLD( double, vector_item, vector_item(i,ic) ) ;

   b[ vec_idx( i, ic ) ] += x ;

   PEL_CHECK_POST( FORMAL( vector_item(i,ic)==OLD(vector_item)+x ) ) ;
}

//----------------------------------------------------------------------
inline
void
PDE_LocalEquation:: add_to_vector( double x, size_t i )
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: add_to_vector" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( nb_row_sub_indices()==1 ) ;
   // PEL_SAVEOLD( double, vector_item, vector_item(i,ic) ) ;

   b[ i ] += x ;

   PEL_CHECK_POST( FORMAL( vector_item(i,ic)==OLD(vector_item)+x ) ) ;
}


//----------------------------------------------------------------------
inline
void
PDE_LocalEquation:: nullify_then_unset_matrix_item(
                              size_t i, size_t j, size_t ic, size_t jc )
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: nullify_then_unset_matrix_item" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;
   PEL_CHECK_PRE( ic<nb_row_sub_indices() ) ;
   PEL_CHECK_PRE( jc<nb_column_sub_indices() ) ;

   size_t idx = mat_idx( i, j, ic, jc ) ;
   A_IS_SET[ idx ] = false ;
   A[ idx ] = 0. ;

   PEL_CHECK_POST( !matrix_item_is_set( i, j, ic, jc ) ) ;
#ifndef _WIN32
   PEL_CHECK_POST( matrix_item(i,j,ic,jc) == 0. ) ;
#endif
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: row_node( size_t i ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: row_node" ) ;
   PEL_CHECK_PRE( i<nb_rows() ) ;

   return( loc2node1(i) ) ;
}

//----------------------------------------------------------------------
inline
size_t
PDE_LocalEquation:: column_node( size_t j ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "PDE_LocalEquation:: column_node" ) ;
   PEL_CHECK_PRE( j<nb_columns() ) ;

   return( loc2node2(j) ) ;
}



