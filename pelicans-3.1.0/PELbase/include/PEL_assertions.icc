/*
 *  Copyright 1995-2010 by IRSN
 *
 *  This software is an application framework, with a set of integrated
 *  reusable components, whose purpose is to simplify the task of developing
 *  softwares of numerical mathematics and scientific computing.
 *
 *  This software is governed by the CeCILL-C license under French law and
 *  abiding by the rules of distribution of free software. You can use, modify
 *  and/or redistribute the software under the terms of the CeCILL-C license
 *  as circulated by CEA, CNRS and INRIA at the following URL
 *  "http://www.cecill.info".
 *
 *  As a counterpart to the access to the source code and rights to copy,
 *  modify and redistribute granted by the license, users are provided only
 *  with a limited warranty and the software's author, the holder of the
 *  economic rights, and the successive licensors have only limited liability.
 *
 *  In this respect, the user's attention is drawn to the risks associated
 *  with loading, using, modifying and/or developing or reproducing the
 *  software by the user in light of its specific status of free software,
 *  that may mean that it is complicated to manipulate, and that also
 *  therefore means that it is reserved for developers and experienced
 *  professionals having in-depth computer knowledge. Users are therefore
 *  encouraged to load and test the software's suitability as regards their
 *  requirements in conditions enabling the security of their systems and/or
 *  data to be ensured and, more generally, to use and operate it in the same
 *  conditions as regards security.
 *
 *  The fact that you are presently reading this means that you have had
 *  knowledge of the CeCILL-C license and that you accept its terms.
 */

//----------------------------------------------------------------------
inline
PEL_Assertion:: PEL_Assertion( void )
//----------------------------------------------------------------------
{
}

//----------------------------------------------------------------------
inline
PEL_Assertion:: ~PEL_Assertion( void )
//----------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------
inline
PEL_Assertion&
PEL_Assertion:: object( void )
//-----------------------------------------------------------------------
{
    negation = false ;
    eval = true ;
    return unique_instance ;
}

//-----------------------------------------------------------------------
inline
bool
PEL_Assertion:: is_handling_check( CheckType a_check )
//-----------------------------------------------------------------------
{
   return( (checking_level & a_check) != 0 ) ;
}

//-----------------------------------------------------------------------
inline
bool
PEL_Assertion:: is_checking( void )
//-----------------------------------------------------------------------
{
   return( current_check != None ) ;
}

//-----------------------------------------------------------------------
inline
bool
PEL_Assertion:: do_eval( bool& shortCut )
//-----------------------------------------------------------------------
{
    bool ee = eval ;
    shortCut = ! eval && PEL_Assertion::result ;
    eval = false ;
    return ee ;
}

//-----------------------------------------------------------------------
inline
bool&
PEL_Assertion:: push_bool( void )
//-----------------------------------------------------------------------
{
   return bool_table[ ++nb_bool ] ;
}

//-----------------------------------------------------------------------
inline
bool
PEL_Assertion:: pop_bool( void )
//-----------------------------------------------------------------------
{
   return bool_table[ nb_bool-- ] ;
}

//-----------------------------------------------------------------------
inline
const PEL_Assertion&
operator!( PEL_Assertion const& a )
//-----------------------------------------------------------------------
{
    PEL_Assertion::negation = !PEL_Assertion::negation ;
    return a ;
}

//-----------------------------------------------------------------------
inline
bool
operator&&( bool left, PEL_Assertion const& a )
//-----------------------------------------------------------------------
{
    PEL_Assertion::eval = left ;
    return left ;
}

//-----------------------------------------------------------------------
inline
bool
operator||( bool left, PEL_Assertion const& a )
//-----------------------------------------------------------------------
{
    PEL_Assertion::eval = !left ;
    return left ;
}

//-----------------------------------------------------------------------
inline
PEL_Assertion:: operator bool( void ) const
//-----------------------------------------------------------------------
{
    PEL_Assertion::eval = true ;
    return false ;
}

//---------------------------------------------------------------------
inline
PEL_Marker:: PEL_Marker( const char* name )
//---------------------------------------------------------------------
{
   ring[ ring_pos++ ] = name ;
   ring_pos = ring_pos % 256 ;
}

//---------------------------------------------------------------------
inline
PEL_Marker:: ~PEL_Marker( void )
//---------------------------------------------------------------------
{
   ring_pos = ( ring_pos-1 ) % 256 ;
}

//----------------------------------------------------------------------
inline
size_t
PEL_Marker:: nb_labels( void )
//----------------------------------------------------------------------
{
   return ring_pos ;
}

//----------------------------------------------------------------------
inline
char const*
PEL_Marker:: label( size_t i )
//----------------------------------------------------------------------
{
   return( ring[ i ] ) ;
}
