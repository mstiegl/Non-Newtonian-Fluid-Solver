MODULE PEL_Application

   concrete_name = "PEL_TestSuite"

   without_data_deck = < "PEL_assertions_TEST"
   "PEL_List_TEST"
   "PEL_BalancedBinaryTree_TEST"
   "PEL_Map_TEST"
   "PEL_String_TEST"
   "PEL_Vector_TEST"
   "PEL_Double_TEST"
   "PEL_Int_TEST"
   "PEL_DoubleArray2D_TEST"
   "PEL_IntArray2D_TEST"
   "PEL_DoubleArray3D_TEST"
   "PEL_IntArray3D_TEST"
   >

   MODULE with_data_deck
      MODULE PEL_ObjectTest#1
         concrete_name = "PEL_BinStored_TEST"
         MODULE DATA
            MODULE test0
               type = "Double"
               key = "real"
               real = 1.0/3.0
            END MODULE test0
            MODULE test1
               type = "DoubleVector"
               key = "vector_double"
               vector_double = stretched_vector( 0.0, 1.0/3., 1.0/7., 1.0 )
            END MODULE test1
            MODULE test2
               type = "IntVector"
               key = "vector_int"
               vector_int = < 1 2 10 1000 >
            END MODULE test2
            MODULE test3
               type = "BoolVector"
               key = "vector_bool"
               vector_bool = < true false false true >
            END MODULE test3
            MODULE test4
               type = "DoubleArray2D"
               key = "array_double"
               array_double = array( stretched_vector( 0.0, 1.0/3., 1.0/7., 1.0 ),
               < 1. 1. 2. 3. > )
            END MODULE test4
            MODULE test5
               type = "IntArray2D"
               key = "array_int"
               array_int = array( < 1 2 3 >, < 1 2 3 > )
            END MODULE test5
            MODULE test6
               type = "IntArray3D"
               key = "array3D_int"
               array3D_int = array( array ( < 1 2 3 >, < 1 2 3 > ),
               array ( < 1 2 3 >, < 1 2 3 > ) )
            END MODULE test6
            MODULE test7
               type = "DoubleArray3D"
               key = "array3D_double"
               array3D_double = array( array ( < 1.0 2.0 3.0 >, < 1.0 2.0 3.0 > ),
               array ( < 1.0 2.0 3.0 >, < 1.0 2.0 3.0 > ) )
            END MODULE test7
         END MODULE DATA

         MODULE BINARY_EXP
            vector_double = binary( "DoubleVector", "test.bin", 1 )
            vector_bool = binary( "BoolVector", "test.bin", 3 )
            real = binary( "Double", "test.bin", 0 )
            vector_int = binary( "IntVector", "test.bin", 2 )
            array_double = binary( "DoubleArray2D", "test.bin", 4 )
            array_int = binary( "IntArray2D", "test.bin", 5 )
            array3D_int = binary( "IntArray3D", "test.bin", 6 )
            array3D_double = binary( "DoubleArray3D", "test.bin", 7 )
         END MODULE BINARY_EXP

      END MODULE PEL_ObjectTest#1

      $DS_one = 1.0
      MODULE PEL_ObjectTest#2
         concrete_name = "PEL_Expression_TEST"

         $DS_two = $DS_one + $DS_one
         $DS_sin2 = sqr(sin($DS_x))

         MODULE RATIO_TEST00
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 0., 0.005, 0.01, 0.1 )
            result = < 0. 0.00499999999999994 0.0102645823823223 0.015807747914374 0.0216442382348413 0.0277895750579868 0.0342601014525005 0.0410730253046823 0.0482464650815423 0.0557994980155238 0.0637522108389918 0.0721257532034116 0.0809423939252825 0.0902255802084081 0.1 >
         END MODULE RATIO_TEST00

         MODULE RATIO_TEST01
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 0., 0.01, 0.1, 1.0 )
            result = < 0. 0.00999999999999999 0.020944198609389 0.0329217469295643 0.0460302136965196 0.0603763800727331 0.076077109483195 0.0932602995812321 0.112065924098813 0.132647173068212 0.155171700703252 0.179822991105306 0.206801852919087 0.236328055113615 0.268642117213405 0.304007268563028 0.342711592585165 0.385070373499207 0.431428664616694 0.48216409913486 0.537689966324906 0.598458578173548 0.66496495390239 0.737750852379099 0.817409185268292 0.904588846871508 1. >
         END MODULE RATIO_TEST01
         MODULE RATIO_TEST02
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 0., 0.02, 0.2, 2.0 )
            result = < 0. 0.02 0.0418883972187781 0.0658434938591287 0.0920604273930392 0.120752760145466 0.15215421896639 0.186520599162464 0.224131848197625 0.265294346136425 0.310343401406504 0.359645982210613 0.413603705838175 0.472656110227231 0.53728423442681 0.608014537126055 0.68542318517033 0.770140746998414 0.862857329233389 0.96432819826972 1.07537993264981 1.1969171563471 1.32992990780478 1.4755017047582 1.63481837053658 1.80917769374302 2. >
         END MODULE RATIO_TEST02
         MODULE RATIO_TEST03
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 0., 0.0003, 0.0005, 0.06 )
            result = < 0. 0.000299999999999921 0.000600985022766098 0.000902958302531364 0.00120592308414786 0.00150988262312191 0.001814840185649 0.00212079904864886 0.00242776249980069 0.0027357338375785 0.00304471637128652 0.00335471342109481 0.00366572831807487 0.0039777644042355 0.00429082503255867 0.00460491356703557 0.00492003338270272 0.00523618786567832 0.00555338041319853 0.00587161443365405 0.00619089334662673 0.00651122058292628 0.00683259958462719 0.00715503380510568 0.0074785267090768 0.0078030817726317 0.00812870248327495 0.00845539233996203 0.00878315485313692 0.00911199354476981 0.00944191194839499 0.00977291360914875 0.0101050020838076 0.0104381809408262 0.0107724537603762 0.0111078241343841 0.0114442956665705 0.0117818719724882 0.0121205566795615 0.012460353427125 0.0128012658664626 0.0131432976608471 0.013486452485579 0.0138307340280267 0.0141761459876654 0.0145226920761174 0.0148703760171917 0.015219201546924 0.0155691724136171 0.0159202923778809 0.0162725652126731 0.0166259947033392 0.016980584647654 0.0173363388558615 0.0176932611507166 0.0180513553675257 0.0184106253541883 0.0187710749712378 0.0191327080918836 0.0194955286020523 0.0198595404004296 0.0202247473985022 0.0205911535205998 0.0209587627039373 0.021327578898657 0.0216976060678712 0.0220688481877049 0.0224413092473379 0.0228149932490486 0.0231899042082561 0.0235660461535641 0.0239434231268037 0.024322039183077 0.0247018983908006 0.0250830048317494 0.0254653626011006 0.0258489758074774 0.0262338485729932 0.0266199850332961 0.0270073893376134 0.0273960656487956 0.0277860181433619 0.0281772510115445 0.028569768457334 0.0289635746985244 0.0293586739667583 0.0297550705075727 0.0301527685804444 0.0305517724588356 0.0309520864302402 0.0313537147962299 0.0317566618724997 0.0321609319889153 0.0325665294895589 0.032973458732776 0.0333817240912226 0.0337913299519116 0.0342022807162605 0.0346145808001384 0.0350282346339135 0.0354432466625006 0.0358596213454092 0.0362773631567909 0.0366964765854881 0.0371169661350816 0.0375388363239396 0.0379620916852656 0.0383867367671478 0.0388127761326075 0.0392402143596481 0.0396690560413048 0.0400993057856933 0.0405309682160597 0.0409640479708304 0.0413985497036612 0.0418344780834881 0.0422718377945769 0.042710633536574 0.0431508700245564 0.0435925519890828 0.0440356841762442 0.044480271347715 0.044926318280804 0.0453738297685061 0.0458228106195534 0.046273265658467 0.0467251997256089 0.0471786176772341 0.0476335243855426 0.0480899247387317 0.0485478236410489 0.0490072260128442 0.0494681367906232 0.0499305609270999 0.0503945033912502 0.0508599691683653 0.0513269632601049 0.0517954906845515 0.0522655564762637 0.0527371656863308 0.0532103233824269 0.0536850346488653 0.0541613045866531 0.0546391383135463 0.0551185409641044 0.0555995176897458 0.0560820736588033 0.0565662140565791 0.0570519440854011 0.0575392689646787 0.0580281939309584 0.0585187242379807 0.0590108651567362 0.0595046219755222 0.06 >
         END MODULE RATIO_TEST03

         MODULE RATIO_TEST0
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 0.0, 0.3, 0.1, 1.0 )
            result = < 0.0 0.3 0.526804457410423
            0.698271997081211 0.827904004742989 0.925907728612167
            1.0 >
         END MODULE RATIO_TEST0

         MODULE RATIO_TEST1
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 1.0, 1.0, 8.0, 16.0 )
            result = < 1.0 2.0 4.0 8.0 16.0 >
         END MODULE RATIO_TEST1

         MODULE REGU_TEST
            type = "DoubleVector"
            exp_to_eval = regular_vector( 1.0, 4, 5.0 )
            result = < 1.0 2.0 3. 4.0 5.0 >
         END MODULE REGU_TEST

         MODULE CONCAT
            type = "DoubleVector"
            exp_to_eval = stretched_vector( 1.0, 1.0, 8.0, 16.0 ) <<
            regular_vector( 1.0, 4, 5.0 ) <<
            < 8. 9. >
            result = < 1.0 2.0 4.0 8.0 16.0
            1.0 2.0 3. 4.0 5.0
            8.0 9.0 >
         END MODULE CONCAT

         MODULE double
            type = "Double"
            exp_to_eval = $DS_two
            result = 2.0
         END MODULE double

         MODULE double_vec
            type = "DoubleVector"
            $DV_x = < 1.0 2.0 3.0 >
            exp_to_eval = $DV_x
            result = < 1.0 2.0 3.0 >
         END MODULE double_vec

         MODULE component
            type = "Double"
            $DV_x = < 1.0 2.0 3.0 >
            $IS_i = 1
            exp_to_eval = component( $DV_x, $IS_i )
            result = 2.0
         END MODULE component

         MODULE component_int
            type = "Int"
            exp_to_eval = component( $IV_x, $IS_i )
            result = 2

            $IV_x = < 1 2 3 >
            $IS_i = 1

         END MODULE component_int

         MODULE component_bool
            type = "Bool"
            exp_to_eval = component( $BV_x, $IS_i )
            result = false

            $BV_x = < true false true >
            $IS_i = 1

         END MODULE component_bool

         MODULE vector
            type = "DoubleVector"
            exp_to_eval = vector( 1.0, $DS_two )
            result = < 1.0 2.0 >
         END MODULE vector

         MODULE test
            type = "Int"
            exp_to_eval = ( $BS_monbool ? 1 : 2 )
            result = 2

            $BS_monbool = false

         END MODULE test

         MODULE lower
            type = "Bool"
            exp_to_eval = 1.0 < 2.0
            result = true
         END MODULE lower

         MODULE greater
            type = "Bool"
            exp_to_eval = 1.0 > 2.0
            result = false
         END MODULE greater

         MODULE algebraic
            type = "Double"
            exp_to_eval = 2.0 * 3. + 5.0 * 7.0 - 9. / 3.
            result = 38.0
         END MODULE algebraic

         MODULE Trigonometric
            type = "Double"
            exp_to_eval = $DS_sin2 + cos( $DS_x )*cos( $DS_x )
            result = 1.0
            $DS_x = 0.4
         END MODULE Trigonometric

         MODULE Trigonometric2
            type = "Double"
            exp_to_eval = sin( $DS_x )/cos( $DS_x ) - tan( $DS_x )
            result = 0.0
            $DS_x = 0.4
         END MODULE Trigonometric2

         MODULE Trigonometric3
            type = "Double"
            exp_to_eval = sinh( $DS_x )/cosh( $DS_x ) - tanh( $DS_x )
            result = 0.0
            $DS_x = 0.4
         END MODULE Trigonometric3

         MODULE RangeDouble
            type = "Bool"
            exp_to_eval = in_range( $DS_one, < 1.0 2.0 > )
            result = true
         END MODULE RangeDouble

         MODULE RangeInt
            type = "Bool"
            exp_to_eval = in_range( $IS_x, < 1 2 > )
            result = false
            $IS_x = 3
         END MODULE RangeInt

         MODULE InBox1
            type = "Bool"
            exp_to_eval = in_box( $DV_X, < -3.256 -5.0 >, < 0.0 1.32 > )
            result = true
            $DV_X = < -3.255 1.3 >
         END MODULE InBox1

         MODULE InBox2
            type = "Bool"
            exp_to_eval = in_box( $DV_X, < -3.256 -5.0 >, < 0.0 1.32 > )
            result = false
            $DV_X = < -3.257 1.3 >
         END MODULE InBox2

         MODULE InBox3
            type = "Bool"
            exp_to_eval = in_box( $DV_X, < 12.5 -3.256 -5.0 >, < 28. 0.0 1.32 > )
            result = true
            $DV_X = < 15.3 -3. 1.3 >
         END MODULE InBox3

         MODULE Exp
            type = "Double"
            exp_to_eval = exp( log( $DS_one ) )
            result = 1.0
         END MODULE Exp

         MODULE String
            type = "String"
            exp_to_eval = component( $SV_x, 10 - 9 )
            result = "toto"

            $SV_x = < "titi" "toto" "tutu" >

         END MODULE String

         MODULE int_vector
            type = "IntVector"
            exp_to_eval = $IV_x
            result = < 0 1 2 >

            $IV_x = < 0 1 2 >

         END MODULE int_vector

         MODULE double_vector
            type = "DoubleVector"
            exp_to_eval = $DV_x
            result = < 0. 1. 2. >

            $DV_x = < 0. 1. 2. >

         END MODULE double_vector

         MODULE boolean_vector
            type = "BoolVector"
            exp_to_eval = $BV_x
            result = < true true false >

            $BV_x = < true true false >

         END MODULE boolean_vector

         MODULE cond_int
            type = "Bool"
            exp_to_eval = ( $BS_monbool ? $BS_monbool : $BS_monbool )
            result = false

            $BS_monbool = false

         END MODULE cond_int

         MODULE cond_str
            type = "String"
            exp_to_eval = ( $BS_monbool ? $SS_res : $SS_res )
            result = "titi"

            $BS_monbool = false
            $SS_res = "titi"

         END MODULE cond_str

         MODULE cond_dv
            type = "DoubleVector"
            exp_to_eval = ( $BS_monbool ? $DV_x : $DV_x )
            result = < 0. 1. >

            $BS_monbool = false
            $DV_x = < 0.0 1.0 >

         END MODULE cond_dv

         MODULE cond_iv
            type = "IntVector"
            exp_to_eval = ( $BS_monbool ? $IV_x : $IV_x )
            result = < 0 1 >

            $BS_monbool = false
            $IV_x = < 0 1 >

         END MODULE cond_iv

         MODULE cond_bv
            type = "BoolVector"
            exp_to_eval = ( $BS_monbool ? $BV_x : $BV_x )
            result = < true true >

            $BS_monbool = false
            $BV_x = < true true >

         END MODULE cond_bv

         MODULE cond_sv
            type = "StringVector"
            exp_to_eval = ( $BS_monbool ? $SV_x : $SV_x )
            result = < "true" "true" >

            $BS_monbool = false
            $SV_x = < "true" "true" >

         END MODULE cond_sv

         MODULE arith_double
            type = "Double"
            exp_to_eval = 1. / sqrt(sqr(2.0))
            result = 0.5
         END MODULE arith_double

         MODULE arith_int
            type = "Int"
            exp_to_eval = ( 11 - 1 ) / ( 2 + 1 )
            result = 3
         END MODULE arith_int

         MODULE vector_int
            type = "IntVector"
            exp_to_eval = vector( 0, 1 )
            result = < 0 1 >
         END MODULE vector_int

         MODULE vector_bool
            type = "BoolVector"
            exp_to_eval = vector( true, false )
            result = < true false >
         END MODULE vector_bool

         MODULE vector_string
            type = "StringVector"
            exp_to_eval = vector( "true", "false" )
            result = < "true" "false" >
         END MODULE vector_string

         MODULE comp_int
            type = "Bool"
            exp_to_eval = 1 < 2
            result = true
         END MODULE comp_int

         MODULE inclusion
            type = "Int"
            exp_to_eval = 1
            result = 2
         END MODULE inclusion

         MODULE inclusion1
            type = "Int"
            exp_to_eval = 1
            result = 2
         END MODULE inclusion1

         MODULE inclusion1
            result == 1
         END MODULE inclusion1

         MODULE arrayExpDouble
            type = "DoubleArray2D"
            exp_to_eval = array( < 0.0 1.0 >, $DV_x )
            result = array( < 0.0 1.0 >, < 2.0 3.0 > )

            $DV_x = < 2.0 3.0 >

         END MODULE arrayExpDouble

         MODULE arrayExpDouble2
            type = "DoubleArray2D"
            exp_to_eval = $DA_x
            result = array( < 0.0 1.0 >, < 2.0 3.0 > )

            $DA_x = array( < 0.0 1.0 >, < 2.0 3.0 > )

         END MODULE arrayExpDouble2

         MODULE arrayExpInt
            type = "IntArray2D"
            exp_to_eval = array( < 0 1 >, $IV_x )
            result = array( < 0 1 >, < 2 3 > )

            $IV_x = < 2 3 >

         END MODULE arrayExpInt

         MODULE arrayExpInt2
            type = "IntArray2D"
            exp_to_eval = $IA_x
            result = array( < 0 1 >, < 2 3 > )

            $IA_x = array( < 0 1 >, < 2 3 > )

         END MODULE arrayExpInt2

         MODULE environement
            type = "String"
            exp_to_eval = join( getenv("PELICANSHOME"),
            "UnitTests", "PELbase", "tests" )
            result = this_file_dir()
         END MODULE environement

         MODULE string_concat
            type = "String"
            exp_to_eval = "Hello " + "world"
            result = "Hello world"
         END MODULE string_concat

         MODULE join
            type = "String"
            exp_to_eval = join( "basedir", "home", "name" )
            result = "basedir/home/name"
         END MODULE join

         MODULE join_with_slash
            type = "String"
            exp_to_eval = join( "basedir", "/home/name" )
            result = "basedir/home/name"
         END MODULE join_with_slash

         MODULE unary_minus_int
            type = "Int"
            exp_to_eval = 0-1
            result = -1
         END MODULE unary_minus_int

         MODULE unary_minus_double
            type = "Double"
            exp_to_eval = 0.0-1.
            result = -1.0
         END MODULE unary_minus_double

         MODULE Boolean
            type = "Bool"
            exp_to_eval = in_box( $DV_X, < -1.256 -5.0 >, < -1.0 -2.0 > ) ||
            in_box( $DV_X, < 0.0 0.0 >, < 1.0 2.0 > )
            $DV_X = < 0.5 1.0 >
            result = true
         END MODULE Boolean

         MODULE Boolean2
            type = "Bool"
            exp_to_eval = in_box( $DV_X, < -1.256 -5.0 >, < -1.0 -2.0 > ) ||
            in_box( $DV_X, < 0.0 0.0 >, < 1.0 2.0 > )
            $DV_X = < 0.5 3.0 >
            result = false
         END MODULE Boolean2

         MODULE TruthTable1
            type = "Bool"
            exp_to_eval = true || true
            result = true
         END MODULE TruthTable1

         MODULE TruthTable2
            type = "Bool"
            exp_to_eval = true || false
            result = true
         END MODULE TruthTable2

         MODULE TruthTable3
            type = "Bool"
            exp_to_eval = false || true
            result = true
         END MODULE TruthTable3

         MODULE TruthTable4
            type = "Bool"
            exp_to_eval = false || false
            result = false
         END MODULE TruthTable4

         MODULE TruthTable5
            type = "Bool"
            exp_to_eval = true && true
            result = true
         END MODULE TruthTable5

         MODULE TruthTable6
            type = "Bool"
            exp_to_eval = true && false
            result = false
         END MODULE TruthTable6

         MODULE TruthTable7
            type = "Bool"
            exp_to_eval = false && true
            result = false
         END MODULE TruthTable7

         MODULE TruthTable8
            type = "Bool"
            exp_to_eval = false && false
            result = false
         END MODULE TruthTable8

         MODULE TruthTable9
            type = "Bool"
            exp_to_eval = !false
         result = true
      END MODULE TruthTable9

      MODULE TruthTable10
         type = "Bool"
         exp_to_eval = !true
         result = false
      END MODULE TruthTable10

      MODULE PI
         type = "Double"
         exp_to_eval = pi()
         result = 3.141592653589793238
      END MODULE PI


MODULE include1
   type = "Bool"
   exp_to_eval = true
   result = true
END MODULE include1


MODULE include2
   type = "Bool"
   exp_to_eval = true
   result = true
END MODULE include2

      MODULE SORT_G_UNICITY
         exp_to_eval = sort( < 1.0 3.0 2.0 -1.0 20.0 2.0 1.0 > , "<" )
         result = < -1.0 1.0 2.0 3.0 20.0 >
         type = "DoubleVector"
      END MODULE SORT_G_UNICITY

      MODULE SORT_L_UNICITY
         exp_to_eval = sort( < 1.0 3.0 2.0 -1.0 20.0 2.0 1.0 > , ">" )
         result = < 20.0 3.0 2.0 1.0 -1.0 >
         type = "DoubleVector"
      END MODULE SORT_L_UNICITY

      MODULE SIGNED_INT
         exp_to_eval = < 1 -1 >
         result = vector( 1, -( 1 ) )
         type = "IntVector"
      END MODULE SIGNED_INT

      MODULE pow
         $DS_Y = pi()
         exp_to_eval = pow( $DS_Y, 1.0+1.0 )
         result = $DS_Y*$DS_Y
         type = "Double"
      END MODULE pow


   END MODULE PEL_ObjectTest#2

    MODULE PEL_ObjectTest#Randomizer
      concrete_name = "PEL_Randomizer_TEST"
      MODULE one
         serie = 1
         result = < 0.285381 0.253358 0.0934685 0.608497 >
         verbose = false
      END MODULE one
      MODULE two
         serie = 2
         result = < 0.414874 0.989473 0.774229 0.235516 >
         verbose = false
      END MODULE two
      MODULE three
         serie = 1
         result = < 0.285381 0.253358 0.0934685 0.608497 >
         verbose = false
      END MODULE three
   END MODULE PEL_ObjectTest#Randomizer

   END MODULE with_data_deck
END MODULE PEL_Application

MODULE PEL_Application
   MODULE with_data_deck
   MODULE PEL_ObjectTest#2
      MODULE inclusion
         result == 1
      END MODULE inclusion
  END MODULE PEL_ObjectTest#2
   END MODULE with_data_deck
END MODULE PEL_Application
