.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ARCH 1"
.TH ARCH 1 "2010-03-17" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
arch \- discover and name the compiler architecture.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
pel arch [\-help|\-man]
.PP
pel arch [\-verbose] compiler
.PP
pel arch \-getvariable <var> compiler
.PP
pel arch \-getvariable_extra <var> compiler
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`pel arch\*(C'\fR discovers the compiler architecture by selecting the
architecture-makefile and the extra-makefile that are the more closely
related to the current machine, the chosen compiler and external APIs, and
returns a string caracterizing the matching compiler architecture (its name).
.PP
\&\f(CW\*(C`pel arch\*(C'\fR searches successively two files:
.IP "\(bu" 4
the architecture\-makefile, called:  \fIxxx.mak\fR,  which essentially formalizes
the usage of the current compiler on the current machine;
.IP "\(bu" 4
the extra\-makefile, called \fIextra\-xxx.mak\fR, which essentially describes the
linkage of the enabled external APIs with \s-1PELICANS\s0 on the current machine.
.PP
In both cases, \fIxxx\fR denotes symbolically a character sequence which matches
one of the following patterns tried out in sequence:
.RS 4
.IP "1." 4
<hostname>\-<compiler>
.IP "2." 4
<hostname>
.IP "3." 4
<sysname>\-<release>\-<compiler>
.IP "4." 4
<sysname>\-<compiler>
.IP "5." 4
<compiler>
.IP "6." 4
<sysname>\-<release>
.IP "7." 4
<sysname>
.RE
.RS 4
.RE
.PP
Where :
.IP "hostname" 12
.IX Item "hostname"
is the name of the current host. It may be substitued if a file named
\&'arch_file.cfg' exists in the searched paths.
.IP "sysname" 12
.IX Item "sysname"
is the name of the curent operating system name given by \fIuname\fR\|(1).
.IP "release" 12
.IX Item "release"
is the release of the curent operating system name given by \fIuname\fR\|(1).
.Sh "The Searched Paths"
.IX Subsection "The Searched Paths"
First, \f(CW\*(C`pel arch\*(C'\fR searches in the directory given by the environment
variable \fI\s-1PELARCHDIR\s0\fR (if defined), then in the \fI$PELICANSHOME/etc\fR
directory (if it is not defined, the subdirectory
\&\f(CW\*(C`etc\*(C'\fR of the current directory is searched instead).
.Sh "Hostname Substitution"
.IX Subsection "Hostname Substitution"
When a file named 'arch_file.cfg' is encountered in the searched paths,
\&\f(CW\*(C`pel arch\*(C'\fR tries to substitute the current hostname by an alias name found
in this file. The first match found returns. When no match is found, the
current hostname is used.
.PP
This file is a two columns file. Comments starts with '#' (sharp).
.RS 4
.IP "Column 1 :" 4
.IX Item "Column 1 :"
contains a perl (\fIperlre\fR\|(1)) regular expression matching hostnames.
.IP "Column 2 :" 4
.IX Item "Column 2 :"
contains the alias for the regular expression.
.RE
.RS 4
.RE
.PP
\&'arch_file.cfg' file example:
 sinux1 pinux    # sinux1 vers pinux
 sinux\ed+ sinux  # les autres noeuds sinux vers sinux
 pinux\ed+ pinux  # les noeuds pinux vers pinux
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-help\fR" 4
.IX Item "-h, -help"
Print a brief help message and exit.
.IP "\fB\-m, \-man\fR" 4
.IX Item "-m, -man"
Print the manual page and exit.
.IP "\fB\-v, \-verbose\fR" 4
.IX Item "-v, -verbose"
Execute verbosely.
.IP "\fB\-getvariable\fR var" 4
.IX Item "-getvariable var"
Return the value of the variable var
defined in the achitecture-makefile of the current
compiler architecture.
.IP "\fB\-getvariable_extra\fR var" 4
.IX Item "-getvariable_extra var"
Return the value of the variable var
defined in the extra-makefile of the current
compiler architecture.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\fBcompiler\fR" 4
.IX Item "compiler"
Name of the compiler for which a compiler architecture
for the current hardware platform
will be searched.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.ie n .IP """pel arch \-verbose CC""" 4
.el .IP "\f(CWpel arch \-verbose CC\fR" 4
.IX Item "pel arch -verbose CC"
Find the available compiler architecture for compiler \s-1CC\s0
and return a string caracterizing it.
.ie n .IP """pel arch \-getvariable DYNAMIC_LIB_EXT CC""" 4
.el .IP "\f(CWpel arch \-getvariable DYNAMIC_LIB_EXT CC\fR" 4
.IX Item "pel arch -getvariable DYNAMIC_LIB_EXT CC"
Find the available compiler architecture for compiler \s-1CC\s0
and return the value of the variable \s-1DYNAMIC_LIB_EXT\s0 that it defines
in the achitecture\-makefile.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PELICANSHOME\s0" 4
.IX Item "PELICANSHOME"
The \s-1PELICANS\s0 root directory.
.IP "\s-1PELARCHDIR\s0" 4
.IX Item "PELARCHDIR"
A user directory where user's architecture \s-1GNU\s0 Makefiles are stored.
