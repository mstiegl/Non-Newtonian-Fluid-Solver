MODULE PEL_ObjectTest#PDE_ReferenceElement_TEST

   MODULE PDE_0D_Q0_1node
      name = "PDE_0D_Q0_1node"
      MODULE geometry
         dimension = 0
         reference_polyhedron = "GE_ReferencePoint"
         nb_nodes = 1
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 1
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 1
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 1
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
   END MODULE PDE_0D_Q0_1node
   
   MODULE PDE_1D_P0_1node
      name = "PDE_1D_P0_1node"
      MODULE geometry
         dimension = 1
         reference_polyhedron = "GE_ReferenceSegment"
         nb_nodes = 1
         node_locations = array( vector( 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0. )
            second_derivative = array( vector( 0. ) )
         END MODULE constante
      END MODULE value_at_random_points
   END MODULE PDE_1D_P0_1node
   
   MODULE PDE_1D_P1_2nodes
      name = "PDE_1D_P1_2nodes"
      MODULE geometry
         dimension = 1
         reference_polyhedron = "GE_ReferenceSegment"
         nb_nodes = 2
         node_locations = array( vector( 0. ),
                                 vector( 1. ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.-$DS_x, $DS_x )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0. )
            second_derivative = array( vector( 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1. )
            second_derivative = array( vector( 0. ) )
         END MODULE x
      END MODULE value_at_random_points
   END MODULE PDE_1D_P1_2nodes
   
   MODULE PDE_1D_P2_3nodes
      name = "PDE_1D_P2_3nodes"
      MODULE geometry
         dimension = 1
         reference_polyhedron = "GE_ReferenceSegment"
         nb_nodes = 3
         node_locations = array( vector( 0. ),
                                 vector( 0.5 ),
                                 vector( 1. ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( (1.0-$DS_x)*(1.0-2.0*$DS_x),
                                   4.0*$DS_x*(1.0-$DS_x),
                                   $DS_x*(2.0*$DS_x-1.0) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-6
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0. )
            second_derivative = array( vector( 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1. )
            second_derivative = array( vector( 0. ) )
         END MODULE x
         MODULE x2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x
            gradient = vector( 2.0*$DS_x )
            second_derivative = array( vector( 2.0 ) )
         END MODULE x2
      END MODULE value_at_random_points
   END MODULE PDE_1D_P2_3nodes
   
   MODULE PDE_2D_P0_1node
      name = "PDE_2D_P0_1node"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 1
         node_locations = array( vector( 1./3., 1./3. ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
      END MODULE value_at_random_points
   END MODULE PDE_2D_P0_1node
   
   MODULE PDE_2D_P1_3nodes
      name = "PDE_2D_P1_3nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 3
         node_locations = array( vector( 0., 0. ),
                                 vector( 1., 0. ),
                                 vector( 0., 1. ) )
      END MODULE geometry  
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.0-$DS_x-$DS_y,
                                   $DS_x,
                                   $DS_y )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x + 0.5* $DS_y  - 1.0
            gradient = vector( 1., 0.5 )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_P1_3nodes
   
   MODULE PDE_2D_P1isoNonConf_3nodes
      name = "PDE_2D_P1isoNonConf_3nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 3
         node_locations = array( vector( 0.5, 0.0 ),
                                 vector( 0.5, 0.5 ),
                                 vector( 0.0, 0.5 ) )
      END MODULE geometry  
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes

      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.-2.*$DS_y,
         -1.+2.*($DS_x+$DS_y),
         1.-2.*$DS_x )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
            vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
            vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
            vector( 0., 0. ) )
         END MODULE y
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x + 0.5* $DS_y  - 1.0
            gradient = vector( 1., 0.5 )
            second_derivative = array( vector( 0., 0. ),
            vector( 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_P1isoNonConf_3nodes
   
   MODULE PDE_2D_P1bubble_4nodes
      name = "PDE_2D_P1bubble_4nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 4
         node_locations = array( vector( 0., 0. ),
                                 vector( 1., 0. ),
                                 vector( 0., 1. ),
                                 vector( 1./3., 1./3. ) )
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.0-$DS_x-$DS_y,
                                   $DS_x,
                                   $DS_y,
                                   27.*$DS_x*$DS_y*(1.-$DS_x-$DS_y) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-6
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x + 0.5* $DS_y  - 1.0
            gradient = vector( 1., 0.5 )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_P1bubble_4nodes
   
   MODULE PDE_2D_P2_6nodes
      name = "PDE_2D_P2_6nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 6
         node_locations = array( vector( 0.0, 0.0 ),
                                 vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.0 ),
                                 vector( 0.5, 0.5 ),
                                 vector( 0.0, 1.0 ),
                                 vector( 0.0, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( (1.-$DS_x-$DS_y)*(1.-2.*$DS_x-2.*$DS_y),
                                   4.*$DS_x*(1.-$DS_x-$DS_y),
                                   -$DS_x*(1.-2.*$DS_x) ,
                                   4.*$DS_x*$DS_y,
                                   -$DS_y*(1.-2.*$DS_y),
                                   4.*$DS_y*(1.-$DS_x-$DS_y) )
      END MODULE bf_value_at_random_points  
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-6
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points  
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-6
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE x2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x
            gradient = vector( 2.*$DS_x, 0. )
            second_derivative = array( vector( 2., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x2
         MODULE y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y*$DS_y
            gradient = vector( 0., 2.*$DS_y )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 2. ) )
         END MODULE y2
         MODULE xy
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y
            gradient = vector( $DS_y, $DS_x )
            second_derivative = array( vector( 0., 1. ),
                                       vector( 1., 0. ) )
         END MODULE xy
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y+0.1*sqr($DS_x)+0.2*sqr($DS_y)  
                                                  +$DS_x+0.5*$DS_y-1.0
            gradient = vector( $DS_y+0.1*2.0*$DS_x+1.0 ,
                               $DS_x+0.2*2.0*$DS_y+0.5 )
            second_derivative = array( vector( 0.2, 1. ),
                                       vector( 1., 0.4 ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_P2_6nodes
   
   MODULE PDE_2D_P1isoP2_6nodes
      name = "PDE_2D_P1isoP2_6nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceTriangle"
         nb_nodes = 6
         node_locations = array( vector( 0.0, 0.0 ),
                                 vector( 0.5, 0.0 ),
                                 vector( 0.0, 0.5 ),
                                 vector( 1.0, 0.0 ),
                                 vector( 0.5, 0.5 ),
                                 vector( 0.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         $DS_DD = $DS_x+$DS_y-0.5
         basis_functions =
            vector( ( $DS_DD<0. ? 1.0-2.0*($DS_x+$DS_y) : 0. ),
                    ( $DS_DD<0. ? 2.0*$DS_x :
                    ( $DS_x>0.5 ? 2.*(1.-$DS_x-$DS_y) :
                    ( $DS_y<0.5 ? 2.*(0.5-$DS_y) : 0. ) ) ),
                    ( $DS_DD<0. ? 2.*$DS_y :
                    ( $DS_y>0.5 ? 2.*(1.-$DS_x-$DS_y) :
                    ( $DS_x<0.5 ? 2.*(0.5-$DS_x) : 0. ) ) ),
                    ( $DS_x>0.5 ? 2.*($DS_x-0.5) : 0. ),
                    ( $DS_x>0.5 ? 2.*$DS_y :
                    ( $DS_y>0.5 ? 2.*$DS_x :
                    ( $DS_DD>0. ? 2.*($DS_x+$DS_y-0.5) : 0. ) ) ),
                    ( $DS_y>0.5 ? 2.*($DS_y-0.5) : 0. ) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x+0.5*$DS_y-1.0
            gradient = vector( 1., 0.5 ) 
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_P1isoP2_6nodes
   
   MODULE PDE_2D_Q1isoQ2_9nodes
      name = "PDE_2D_Q1isoQ2_9nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 9
         node_locations = array( vector( 0.0, 0.0 ),
                                 vector( 1.0, 0.0 ),
                                 vector( 1.0, 1.0 ),
                                 vector( 0.0, 1.0 ),
                                 vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.5 ),
                                 vector( 0.5, 1.0 ),
                                 vector( 0.0, 0.5 ),
                                 vector( 0.5, 0.5 ) )
      END MODULE geometry  
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE dbf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-7
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 100
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0.),
                                       vector( 0., 0.) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE xy
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y
            gradient = vector( $DS_y, $DS_x )
            second_derivative = array( vector( 0., 1. ),
                                       vector( 1., 0. ) )
         END MODULE xy
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x + 0.5*$DS_y - 1.0 - 0.21*$DS_x*$DS_y
            gradient = vector( 1.0 - 0.21*$DS_y, 0.5 - 0.21*$DS_x )
            second_derivative = array( vector(  0.00, -0.21 ),
                                       vector( -0.21,  0.00 ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q1isoQ2_9nodes
   
   MODULE PDE_2D_Q0_1node
      name = "PDE_2D_Q0_1node"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 1
         node_locations = array( vector( 0.5, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = < 1. >
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q0_1node
   
   MODULE PDE_2D_Q1_4nodes
      name = "PDE_2D_Q1_4nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 4
         node_locations = array( vector( 0., 0. ),
                                 vector( 1., 0. ),
                                 vector( 1., 1. ),
                                 vector( 0., 1. ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( (1.-$DS_x)*(1.-$DS_y),
                                   $DS_x*(1.-$DS_y),
                                   $DS_x*$DS_y,
                                   (1.-$DS_x)*$DS_y )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE xy
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y
            gradient = vector( $DS_y, $DS_x )
            second_derivative = array( vector( 0., 1. ),
                                       vector( 1., 0. ) )
         END MODULE xy
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 0.1*$DS_x*$DS_y+$DS_x+0.5*$DS_y-1.0
            gradient = vector( 0.1*$DS_y+1.0, 0.1*$DS_x+0.5 )
            second_derivative = array( vector( 0., 0.1 ),
                                       vector( 0.1, 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q1_4nodes
   
   MODULE PDE_2D_Q1isoNonConfA_4nodes
      name = "PDE_2D_Q1isoNonConfA_4nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 4
         node_locations = array( vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.5 ),
                                 vector( 0.5, 1.0 ),
                                 vector( 0.0, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( 0.75+1.5*$DS_x-2.5*$DS_y-1.5*($DS_x*$DS_x-$DS_y*$DS_y),
                    -0.25-0.5*$DS_x+1.5*$DS_y+1.5*($DS_x*$DS_x-$DS_y*$DS_y),
                    -0.25+1.5*$DS_x-0.5*$DS_y-1.5*($DS_x*$DS_x-$DS_y*$DS_y),
                    0.75-2.5*$DS_x+1.5*$DS_y+1.5*($DS_x*$DS_x-$DS_y*$DS_y ) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-7
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE x2_minus_y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x-$DS_y*$DS_y
            gradient = vector( 2.*$DS_x, -2.*$DS_y )
            second_derivative = array( vector( 2., 0. ),
                                       vector( 0., -2. ) )
         END MODULE x2_minus_y2
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q1isoNonConfA_4nodes
   
   MODULE PDE_2D_Q1isoNonConfB_4nodes
      name = "PDE_2D_Q1isoNonConfB_4nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 4
         node_locations = array( vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.5 ),
                                 vector( 0.5, 1.0 ),
                                 vector( 0.0, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( 0.75+$DS_x-2.*$DS_y-$DS_x*$DS_x+$DS_y*$DS_y,
                    -0.25+$DS_y+$DS_x*$DS_x-$DS_y*$DS_y,
                    -0.25+$DS_x-$DS_x*$DS_x+$DS_y*$DS_y,
                    0.75-2.*$DS_x+$DS_y+$DS_x*$DS_x-$DS_y*$DS_y )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-7
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE x2_minus_y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x-$DS_y*$DS_y
            gradient = vector( 2.*$DS_x, -2.*$DS_y )
            second_derivative = array( vector( 2., 0. ),
                                       vector( 0., -2. ) )
         END MODULE x2_minus_y2
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q1isoNonConfB_4nodes
   
   MODULE PDE_2D_Q1bubbles_6nodes
      name = "PDE_2D_Q1bubbles_6nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 6
         node_locations = array( vector( 0., 0. ),
                                 vector( 1., 0. ),
                                 vector( 1., 1. ),
                                 vector( 0., 1. ),
                                 vector( 2./3., 1./3. ),
                                 vector( 1./3., 2./3. ) )
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( (1.-$DS_x)*(1.-$DS_y),
                    $DS_x*(1.-$DS_y),
                    $DS_x*$DS_y,
                    (1.-$DS_x)*$DS_y,
                    ( $DS_x<$DS_y ? 0. :
                                    27.*(1.-$DS_x)*$DS_y*($DS_x-$DS_y) ),
                    ( $DS_x>$DS_y ? 0. :
                                    27.0*$DS_x*(1.0-$DS_y)*($DS_y-$DS_x) ) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-6
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-6
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
   END MODULE PDE_2D_Q1bubbles_6nodes
      
   MODULE PDE_2D_Q2_8nodes
      name = "PDE_2D_Q2_8nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 8
         node_locations = array( vector( 0.0, 0.0 ),
                                 vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.0 ),
                                 vector( 1.0, 0.5 ),
                                 vector( 1.0, 1.0 ),
                                 vector( 0.5, 1.0 ),
                                 vector( 0.0, 1.0 ),
                                 vector( 0.0, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( (1.-$DS_x)*(1.-$DS_y)*(1.-2.*$DS_x-2.*$DS_y),
                    4.*$DS_x*(1.-$DS_x)*(1.-$DS_y),
                    $DS_x*($DS_y-1.)*(1.-2.*$DS_x+2.*$DS_y),
                    4.*$DS_x*$DS_y*(1.-$DS_y),
                    $DS_x*$DS_y*(2.*$DS_x+2.*$DS_y-3.),
                    4.*$DS_x*$DS_y*(1.-$DS_x),
                    $DS_y*($DS_x-1.)*(1.+2.*$DS_x-2.*$DS_y),
                    4.*$DS_y*(1.-$DS_x)*(1.-$DS_y) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE x2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x
            gradient = vector( 2.*$DS_x, 0. )
            second_derivative = array( vector( 2., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x2
         MODULE y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y*$DS_y
            gradient = vector( 0., 2.*$DS_y )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 2. ) )
         END MODULE y2
         MODULE xy2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y*$DS_y
            gradient = vector( $DS_y*$DS_y, 2.*$DS_x*$DS_y )
            second_derivative = array( vector( 0., 2.*$DS_y ),
                                       vector( 2.*$DS_y, 2.*$DS_x ) )
         END MODULE xy2
         MODULE x2y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x*$DS_y
            gradient = vector( 2.*$DS_x*$DS_y, $DS_x*$DS_x )
            second_derivative = array( vector( 2.*$DS_y, 2.*$DS_x ),
                                       vector( 2.*$DS_x, 0. ) )
         END MODULE x2y
         MODULE xy
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y
            gradient = vector( $DS_y, $DS_x )
            second_derivative = array( vector( 0., 1. ),
                                       vector( 1., 0. ) )
         END MODULE xy
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*sqr($DS_y)-sqr($DS_x)*$DS_y+$DS_x*$DS_y
                         +0.1*sqr($DS_x)+0.2* sqr($DS_y)  
                         +$DS_x+0.5*$DS_y -1.0
            gradient =
               vector( sqr($DS_y)-2.0*$DS_x*$DS_y+$DS_y+0.2*$DS_x+1.,
                       2.0*$DS_x*$DS_y-sqr($DS_x)+$DS_x+0.4*$DS_y+ 0.5 )
            second_derivative =
               array( vector( -2.0*$DS_y+0.2, 1.0+2.0*$DS_y-2.0*$DS_x ),
                      vector( 1.0+2.0*$DS_y-2.0*$DS_x, 2.0*$DS_x+0.4 ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q2_8nodes
   
   MODULE PDE_2D_Q2_9nodes
      name = "PDE_2D_Q2_9nodes"
      MODULE geometry
         dimension = 2
         reference_polyhedron = "GE_ReferenceSquare"
         nb_nodes = 9
         node_locations = array( vector( 0.0, 0.0 ),
                                 vector( 1.0, 0.0 ),
                                 vector( 1.0, 1.0 ),
                                 vector( 0.0, 1.0 ),
                                 vector( 0.5, 0.0 ),
                                 vector( 1.0, 0.5 ),
                                 vector( 0.5, 1.0 ),
                                 vector( 0.0, 0.5 ),
                                 vector( 0.5, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
         vector( (1.-$DS_x)*(1.-2.*$DS_x)*(1.-$DS_y)*(1.-2.*$DS_y),
                 $DS_x*(2.*$DS_x-1.)*(1.-$DS_y)*(1.-2.*$DS_y),
                 $DS_x*(2.*$DS_x-1.)*$DS_y*(2.*$DS_y-1.),
                 (1.-$DS_x)*(1.-2.*$DS_x)*$DS_y*(2.*$DS_y-1.),
                 4.*$DS_x *(1.-$DS_x)*(1.-$DS_y)*(1.-2.*$DS_y),
                 $DS_x*(2.*$DS_x-1.)*4.*$DS_y*(1.-$DS_y),
                 4.*$DS_x*(1.-$DS_x)*$DS_y*(2.*$DS_y-1.),
                 (1.-$DS_x)*(1.-2.*$DS_x)*4.*$DS_y*(1.-$DS_y),
                 4.*$DS_x*(1.-$DS_x)*4.*$DS_y*(1.-$DS_y) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-4
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1. )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 0. ) )
         END MODULE y
         MODULE x2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x
            gradient = vector( 2.*$DS_x, 0. )
            second_derivative = array( vector( 2., 0. ),
                                       vector( 0., 0. ) )
         END MODULE x2
         MODULE y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y*$DS_y
            gradient = vector( 0., 2.*$DS_y )
            second_derivative = array( vector( 0., 0. ),
                                       vector( 0., 2. ) )
         END MODULE y2
         MODULE xy2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y*$DS_y
            gradient = vector( $DS_y*$DS_y, 2.*$DS_x*$DS_y )
            second_derivative = array( vector( 0., 2.*$DS_y ),
                                       vector( 2.*$DS_y, 2.*$DS_x ) )
         END MODULE xy2
         MODULE x2y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x*$DS_y
            gradient = vector( 2.*$DS_x*$DS_y, $DS_x*$DS_x )
            second_derivative = array( vector( 2.*$DS_y, 2.*$DS_x ),
                                       vector( 2.*$DS_x, 0. ) )
         END MODULE x2y
         MODULE x2y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x*$DS_y*$DS_y
            gradient = vector( 2.*$DS_x*$DS_y*$DS_y, 2.*$DS_x*$DS_x*$DS_y )
            second_derivative =
               array( vector( 2.*$DS_y*$DS_y, 4.*$DS_x*$DS_y ),
                      vector( 4.*$DS_x*$DS_y, 2.*$DS_x*$DS_x ) )
         END MODULE x2y2
         MODULE xy
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y
            gradient = vector( $DS_y, $DS_x )
            second_derivative = array( vector( 0., 1. ),
                                       vector( 1., 0. ) )
         END MODULE xy
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 0.3*sqr($DS_x*$DS_y)+$DS_x*sqr($DS_y)
                          -sqr($DS_x)*$DS_y+$DS_x*$DS_y
                          +0.1*sqr($DS_x) + 0.2* sqr($DS_y)  
                          +$DS_x+0.5* $DS_y-1.0
            gradient =
               vector( 0.6*$DS_x*sqr($DS_y)+sqr($DS_y)
                                 -2.0*$DS_x*$DS_y+$DS_y+0.2*$DS_x+1.0 ,
                       0.6*$DS_y*sqr($DS_x)+2.0*$DS_x*$DS_y-sqr($DS_x)
                                 +$DS_x+0.4*$DS_y+0.5  )
            second_derivative =
               array( vector( 0.6*sqr($DS_y)-2.0*$DS_y+0.2,
                              1.2*$DS_x*$DS_y+1.0+2.0*$DS_y-2.0*$DS_x ),
                      vector( 1.2*$DS_x*$DS_y+1.0+2.0*$DS_y-2.0*$DS_x,
                              0.6*sqr($DS_x)+2.0*$DS_x+0.4 ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_2D_Q2_9nodes
   
   MODULE PDE_3D_P0_1node
      name = "PDE_3D_P0_1node"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 1
         node_locations = array( vector( 0.25, 0.25, 0.25 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
      END MODULE value_at_random_points
   END MODULE PDE_3D_P0_1node
   
   MODULE PDE_3D_P1_4nodes
      name = "PDE_3D_P1_4nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 4
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.0-$DS_x-$DS_y-$DS_z,
                                   $DS_x,
                                   $DS_y,
                                   $DS_z )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE z
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x+0.5*$DS_y+0.1*$DS_z-1.
            gradient = vector( 1., 0.5, 0.1 )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_3D_P1_4nodes
   
   MODULE PDE_3D_P1isoNonConf_4nodes
      name = "PDE_3D_P1isoNonConf_4nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 4
         node_locations = array( vector( 1./3., 1./3., 0.0 ),
                                 vector( 1./3., 0.0,   1./3. ),
                                 vector( 1./3., 1./3., 1./3. ),
                                 vector( 0.0,   1./3., 1./3. ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes

      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1.0-3.0*$DS_z,
                                   1.0-3.0*$DS_y,
                                  -2.0+3.0*($DS_x+$DS_y+$DS_z),
                                   1.0-3.0*$DS_x )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-6
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE z
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x+0.5*$DS_y+0.1*$DS_z-1.
            gradient = vector( 1., 0.5, 0.1 )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_3D_P1isoNonConf_4nodes
   
   MODULE PDE_3D_P1bubble_5nodes
      name = "PDE_3D_P1bubble_5nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 5
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.0, 1.0 ),
                                 vector( 0.25, 0.25, 0.25 ) )
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( 1.0-$DS_x-$DS_y-$DS_z,
                    $DS_x,
                    $DS_y,
                    $DS_z,
                    256.*$DS_x*$DS_y*$DS_z*(1.0-$DS_x-$DS_y-$DS_z) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-6
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE z
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x+0.5*$DS_y+0.1*$DS_z-1.
            gradient = vector( 1., 0.5, 0.1 )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_3D_P1bubble_5nodes
   
   MODULE PDE_3D_P2_10nodes
      name = "PDE_3D_P2_10nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 10
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 0.5, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 0.5, 0.5, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.5, 0.0 ),
                                 vector( 0.0, 0.0, 0.5 ),
                                 vector( 0.5, 0.0, 0.5 ),
                                 vector( 0.0, 0.5, 0.5 ),
                                 vector( 0.0, 0.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( -(1.-$DS_x-$DS_y-$DS_z)*(1.-2.*(1.-$DS_x-$DS_y-$DS_z)),
                    4.*$DS_x*(1.-$DS_x-$DS_y-$DS_z),
                    -$DS_x*(1.-2.*$DS_x),
                    4.*$DS_x*$DS_y,
                    -$DS_y*(1.-2.*$DS_y),
                    4.*$DS_y*(1.-$DS_x-$DS_y-$DS_z),
                    4.*$DS_z*(1.-$DS_x-$DS_y-$DS_z),
                    4.*$DS_x*$DS_z,
                    4.*$DS_y*$DS_z,
                    -$DS_z*(1.-2.*$DS_z) )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE f1
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*($DS_x-2.0*$DS_y-2.5*$DS_z+1.0)
                                   +$DS_y*(-1.5*$DS_y+$DS_z+0.1)
                                   +(-2.0-3.0*$DS_z)*$DS_z-1.0
            gradient = vector( 2.0*$DS_x-2.0*$DS_y-2.5*$DS_z+1.0,
                               -2.0*$DS_x-3.0*$DS_y+$DS_z+0.1,
                               -2.5*$DS_x+$DS_y-6.0*$DS_z-2.0 )
            second_derivative = array( vector( 2., -2., -2.5 ),
                                       vector( -2., -3., 1. ),
                                       vector( -2.5, 1., -6. ) )
         END MODULE f1
         MODULE f2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*($DS_x-2.0)+2.*$DS_y*(-1.5*$DS_y+$DS_z)
                                                        -2.0*$DS_z-6.0
            gradient = vector( 2.0*$DS_x-2.0,
                               -6.0*$DS_y+2.*$DS_z,
                               2.*$DS_y-2.0 )
            second_derivative = array( vector( 2., 0., -0. ),
                                       vector( 0., -6., 2. ),
                                       vector( 0., 2.,  0. ) )
         END MODULE f2
      END MODULE value_at_random_points         
   END MODULE PDE_3D_P2_10nodes
   
   MODULE PDE_3D_Q0_1node
      name = "PDE_3D_Q0_1node"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 1
         node_locations = array( vector( 0.5, 0.5, 0.5 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( 1. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q0_1node
   
   MODULE PDE_3D_Q1_8nodes
      name = "PDE_3D_Q1_8nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 8
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 1.0, 1.0, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.0, 1.0 ),
                                 vector( 1.0, 0.0, 1.0 ),
                                 vector( 1.0, 1.0, 1.0 ),
                                 vector( 0.0, 1.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector( (1.-$DS_x)*(1.-$DS_y)*(1.-$DS_z),
                                   $DS_x*(1.-$DS_y)*(1.-$DS_z),
                                   $DS_x*$DS_y*(1.-$DS_z),
                                   (1.-$DS_x)*$DS_y*(1.-$DS_z),
                                   (1.-$DS_x)*(1.-$DS_y)*$DS_z,
                                   $DS_x*(1.-$DS_y)*$DS_z,
                                   $DS_x*$DS_y*$DS_z,
                                   (1.-$DS_x)*$DS_y*$DS_z )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE z
         MODULE xyz
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y*$DS_z
            gradient = vector( $DS_y*$DS_z, $DS_x*$DS_z, $DS_x*$DS_y )
            second_derivative = array( vector( 0., $DS_z, $DS_y ),
                                       vector( $DS_z, 0., $DS_x ),
                                       vector( $DS_y, $DS_x, 0. ) )
         END MODULE xyz
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 0.1*$DS_x*$DS_y+0.2*$DS_x*$DS_z+0.3*$DS_y*$DS_z
                            -$DS_x*$DS_y*$DS_z+$DS_x+0.5*$DS_y+0.1*$DS_z-1.0
            gradient =
               vector( 0.1*$DS_y+0.2*$DS_z-$DS_y*$DS_z+1.0,
                       0.1*$DS_x+0.3*$DS_z-$DS_x*$DS_z+0.5,
                       0.2*$DS_x+0.3*$DS_y-$DS_x*$DS_y+0.1 )
            second_derivative =
               array( vector( 0.0, 0.1-$DS_z, 0.2-$DS_y ),
                      vector( 0.1-$DS_z, 0.0, 0.3- $DS_x ),
                      vector( 0.2-$DS_y, 0.3- $DS_x, 0.0 ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q1_8nodes
   
   MODULE PDE_3D_Q1isoNonConfA_6nodes
      name = "PDE_3D_Q1isoNonConfA_6nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 6
         node_locations = array( vector( 0.5, 0.5, 0.0 ),
                                 vector( 0.5, 0.0, 0.5 ),
                                 vector( 1.0, 0.5, 0.5 ),
                                 vector( 0.5, 1.0, 0.5 ),
                                 vector( 0.0, 0.5, 0.5 ),
                                 vector( 0.5, 0.5, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector(
          2./3.+$DS_x+$DS_y-3.*$DS_z-$DS_x*$DS_x-$DS_y*$DS_y+2.*$DS_z*$DS_z ,
          2./3.+$DS_x-3.*$DS_y+$DS_z-$DS_x*$DS_x+2.*$DS_y*$DS_y-$DS_z*$DS_z,
         -1./3.-$DS_x+$DS_y+$DS_z+2.*$DS_x*$DS_x-$DS_y*$DS_y-$DS_z*$DS_z,
         -1./3.+$DS_x-$DS_y+$DS_z-$DS_x*$DS_x+2.*$DS_y*$DS_y-$DS_z*$DS_z ,
          2./3.-3.*$DS_x+$DS_y+$DS_z+2.*$DS_x*$DS_x-$DS_y*$DS_y-$DS_z*$DS_z,
         -1./3.+$DS_x+$DS_y-$DS_z-$DS_x*$DS_x-$DS_y*$DS_y+2.*$DS_z*$DS_z )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-6
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE z
         MODULE x2_minus_y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x-$DS_y*$DS_y
            gradient = vector( 2.*$DS_x, -2.*$DS_y, 0. )
            second_derivative = array( vector( 2., 0., 0. ),
            vector( 0., -2., 0. ), vector( 0., 0., 0. ) )
         END MODULE x2_minus_y2
         MODULE y2_minus_z2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y*$DS_y-$DS_z*$DS_z
            gradient = vector( 0., 2.*$DS_y, -2.*$DS_z )
            second_derivative = array(
              vector( 0., 0., 0. ),
              vector( 0., 2., 0. ),
              vector( 0., 0., -2. ) )
         END MODULE y2_minus_z2
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q1isoNonConfA_6nodes
   
   MODULE PDE_3D_Q1isoNonConfB_6nodes
      name = "PDE_3D_Q1isoNonConfB_6nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 6
         node_locations = array(
         vector( 0.5, 0.5, 0.0 ),
         vector( 0.5, 0.0, 0.5 ),
         vector( 1.0, 0.5, 0.5 ),
         vector( 0.5, 1.0, 0.5 ),
         vector( 0.0, 0.5, 0.5 ),
         vector( 0.5, 0.5, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions = vector(
         2.*(1.+$DS_x+$DS_y-3.5*$DS_z-$DS_x*$DS_x-$DS_y*$DS_y+2.*$DS_z*$DS_z)/3.,
         2.*(1.+$DS_x-3.5*$DS_y+$DS_z-$DS_x*$DS_x+2.*$DS_y*$DS_y-$DS_z*$DS_z)/3.,
         2.*(-0.5-0.5*$DS_x+$DS_y+$DS_z+2.*$DS_x*$DS_x-$DS_y*$DS_y-$DS_z*$DS_z)/3.,
         2.*(-0.5+$DS_x-0.5*$DS_y+$DS_z-$DS_x*$DS_x+2.*$DS_y*$DS_y-$DS_z*$DS_z)/3.,
         2.*(1.-3.5*$DS_x+$DS_y+$DS_z+2.*$DS_x*$DS_x-$DS_y*$DS_y-$DS_z*$DS_z)/3. ,
         2.*(-0.5+$DS_x+$DS_y-0.5*$DS_z-$DS_x*$DS_x-$DS_y*$DS_y+2.*$DS_z*$DS_z)/3. )
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
            vector( 0., 0., 0. ),
            vector( 0., 0., 0. ) )
         END MODULE z
         MODULE x2_minus_y2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_x-$DS_y*$DS_y
            gradient = vector( 2.*$DS_x, -2.*$DS_y, 0. )
            second_derivative = array( vector( 2., 0., 0. ),
            vector( 0., -2., 0. ), vector( 0., 0., 0. ) )
         END MODULE x2_minus_y2
         MODULE y2_minus_z2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y*$DS_y-$DS_z*$DS_z
            gradient = vector( 0., 2.*$DS_y, -2.*$DS_z )
            second_derivative = array(
            vector( 0., 0., 0. ),
            vector( 0., 2., 0. ),
            vector( 0., 0., -2. ) )
         END MODULE y2_minus_z2
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q1isoNonConfB_6nodes

   MODULE PDE_3D_Q2_27nodes
      name = "PDE_3D_Q2_27nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 27
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 0.5, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 1.0, 0.5, 0.0 ),
                                 vector( 0.5, 0.5, 0.0 ),
                                 vector( 0.0, 0.5, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.5, 1.0, 0.0 ),
                                 vector( 1.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.0, 0.5 ),
                                 vector( 0.5, 0.0, 0.5 ),
                                 vector( 1.0, 0.0, 0.5 ),
                                 vector( 1.0, 0.5, 0.5 ),
                                 vector( 0.5, 0.5, 0.5 ),
                                 vector( 0.0, 0.5, 0.5 ),
                                 vector( 0.0, 1.0, 0.5 ),
                                 vector( 0.5, 1.0, 0.5 ),
                                 vector( 1.0, 1.0, 0.5 ),
                                 vector( 0.0, 0.0, 1.0 ),
                                 vector( 0.5, 0.0, 1.0 ),
                                 vector( 1.0, 0.0, 1.0 ),
                                 vector( 1.0, 0.5, 1.0 ),
                                 vector( 0.5, 0.5, 1.0 ),
                                 vector( 0.0, 0.5, 1.0 ),
                                 vector( 0.0, 1.0, 1.0 ),
                                 vector( 0.5, 1.0, 1.0 ),
                                 vector( 1.0, 1.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
         basis_functions =
            vector( 8.*(1.-$DS_x)*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    16.*$DS_x*(1.-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    -8.*$DS_x*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    -16.*$DS_x*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    32.*$DS_x*(1.-$DS_x)*$DS_y*(1.-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    16.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    -8.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    -16.*$DS_x*(1.-$DS_x)*$DS_y*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    8.*$DS_x*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*(1.-$DS_z)*(0.5-$DS_z),
                    16.*(1.-$DS_x)*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*$DS_z*(1.-$DS_z),
                    32.*$DS_x*(1.-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)* $DS_z*(1.-$DS_z),
                    -16.*$DS_x*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*$DS_z*(1.-$DS_z),
                    -32.*$DS_x*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*$DS_z*(1.-$DS_z),
                    64.*$DS_x*(1.-$DS_x)*$DS_y*(1.-$DS_y)* $DS_z*(1.-$DS_z),
                    32.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*$DS_z*(1.-$DS_z),
                    -16.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(1.-$DS_z),
                    -32.*$DS_x*(1.-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(1.-$DS_z),
                    16.*$DS_x*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(1.-$DS_z),
                    -8.*(1.-$DS_x)*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)*$DS_z*(0.5-$DS_z),
                    -16.*$DS_x*(1.-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)* $DS_z*(0.5-$DS_z),
                    8.*$DS_x*(0.5-$DS_x)*(1.-$DS_y)*(0.5-$DS_y)* $DS_z*(0.5-$DS_z),
                    16.*$DS_x*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*$DS_z*(0.5-$DS_z),
                    -32.*$DS_x*(1.-$DS_x)*$DS_y*(1.-$DS_y)* $DS_z*(0.5-$DS_z),
                    -16.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(1.-$DS_y)*$DS_z*(0.5-$DS_z),
                    8.*(1.-$DS_x)*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(0.5-$DS_z),
                    16.*$DS_x*(1.-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(0.5-$DS_z),
                    -8.*$DS_x*(0.5-$DS_x)*$DS_y*(0.5-$DS_y)*$DS_z*(0.5-$DS_z) )
                    // This is the end of the nigthmare !
      END MODULE bf_value_at_random_points
      MODULE dbf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 1.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 10
         dbl_epsilon = 5.E-5
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         $DS_A = 3.0*$DS_x*$DS_x + 8.0* $DS_x + 1.0
         $DS_B = $DS_y*$DS_y + 2.0*$DS_y + 1.0
         $DS_C = 5.0*$DS_z*$DS_z + $DS_z + 1.0
         $DS_D = 6.0*$DS_x +8.0
         $DS_E = 2.0 * $DS_y +2.0
         $DS_F = 10.0* $DS_z +1.0
         MODULE f1
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_D*$DS_E*$DS_F
            gradient = vector( 6.0*$DS_E*$DS_F, 2.0*$DS_D*$DS_F,
                               10.0*$DS_D*$DS_E )
            second_derivative =
               array( vector( 0.0, 12.0*$DS_F, 60.0*$DS_E ),
                      vector( 12.0*$DS_F, 0.0 , 20.0*$DS_D),
                      vector( 60.0*$DS_E, 20.0*$DS_D, 0.0 ) ) 
         END MODULE f1
         MODULE f2
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_A*$DS_B
            gradient = vector( $DS_D*$DS_B, $DS_A*$DS_E, 0.0 )
            second_derivative =
               array( vector( 6.0*$DS_B, $DS_D*$DS_E, 0.0 ),
                      vector( $DS_D*$DS_E, 2.0*$DS_A , 0.0),
                      vector( 0.0, 0.0, 0.0 ) )  
         END MODULE f2
         MODULE f3
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_A*$DS_B*$DS_C
            gradient = vector( $DS_D*$DS_B*$DS_C,
                               $DS_A*$DS_E*$DS_C,
                               $DS_A*$DS_B*$DS_F )
            second_derivative =
               array( vector( 6.0*$DS_B*$DS_C,
                              $DS_D*$DS_E*$DS_C,
                              $DS_D*$DS_B*$DS_F ),
                      vector( $DS_D*$DS_E*$DS_C,
                              2.0*$DS_A*$DS_C,
                              $DS_A*$DS_E*$DS_F ),
                      vector( $DS_D*$DS_B*$DS_F,
                              $DS_A*$DS_E*$DS_F,
                              10.0*$DS_A*$DS_B ) ) 
         END MODULE f3
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q2_27nodes
   
   MODULE PDE_3D_Q1isoQ2_27nodes
      name = "PDE_3D_Q1isoQ2_27nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceCube"
         nb_nodes = 27
         node_locations = array( vector( 0.0, 0.0, 0.0 ),
                                 vector( 0.5, 0.0, 0.0 ),
                                 vector( 1.0, 0.0, 0.0 ),
                                 vector( 1.0, 0.5, 0.0 ),
                                 vector( 0.5, 0.5, 0.0 ),
                                 vector( 0.0, 0.5, 0.0 ),
                                 vector( 0.0, 1.0, 0.0 ),
                                 vector( 0.5, 1.0, 0.0 ),
                                 vector( 1.0, 1.0, 0.0 ),
                                 vector( 0.0, 0.0, 0.5 ),
                                 vector( 0.5, 0.0, 0.5 ),
                                 vector( 1.0, 0.0, 0.5 ),
                                 vector( 1.0, 0.5, 0.5 ),
                                 vector( 0.5, 0.5, 0.5 ),
                                 vector( 0.0, 0.5, 0.5 ),
                                 vector( 0.0, 1.0, 0.5 ),
                                 vector( 0.5, 1.0, 0.5 ),
                                 vector( 1.0, 1.0, 0.5 ),
                                 vector( 0.0, 0.0, 1.0 ),
                                 vector( 0.5, 0.0, 1.0 ),
                                 vector( 1.0, 0.0, 1.0 ),
                                 vector( 1.0, 0.5, 1.0 ),
                                 vector( 0.5, 0.5, 1.0 ),
                                 vector( 0.0, 0.5, 1.0 ),
                                 vector( 0.0, 1.0, 1.0 ),
                                 vector( 0.5, 1.0, 1.0 ),
                                 vector( 1.0, 1.0, 1.0 ) )
      END MODULE geometry
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE dbf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 1.E-5
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 5.E-5
         dbl_minimum = 3.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         $DS_D = 6.0*$DS_x +8.0
         $DS_E = 2.0 * $DS_y +2.0
         $DS_F = 10.0* $DS_z +1.0
         MODULE constante
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 4.0
            gradient = vector( 0.0, 0.0, 0.0 )
            second_derivative =
               array( vector( 0.0, 0.0, 0.0 ),
                      vector( 0.0, 0.0, 0.0 ),
                      vector( 0.0, 0.0, 0.0 ) ) 
         END MODULE constante
         MODULE x
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE z
         MODULE xyz
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x*$DS_y*$DS_z
            gradient = vector( $DS_y*$DS_z, $DS_x*$DS_z, $DS_x*$DS_y )
            second_derivative = array( vector( 0., $DS_z, $DS_y ),
                                       vector( $DS_z, 0., $DS_x ),
                                       vector( $DS_y, $DS_x, 0. ) )
         END MODULE xyz
         MODULE f1
            nb_random_points = 500
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_D*$DS_E*$DS_F
            gradient = vector( 6.0*$DS_E*$DS_F, 2.0*$DS_D*$DS_F,
                               10.0*$DS_D*$DS_E )
            second_derivative =
               array( vector( 0.0, 12.0*$DS_F, 60.0*$DS_E ),
                      vector( 12.0*$DS_F, 0.0 , 20.0*$DS_D),
                      vector( 60.0*$DS_E, 20.0*$DS_D, 0.0 ) ) 
         END MODULE f1
      END MODULE value_at_random_points
   END MODULE PDE_3D_Q1isoQ2_27nodes
   
   MODULE PDE_3D_P1isoP2_10nodes
      name = "PDE_3D_P1isoP2_10nodes"
      MODULE geometry
         dimension = 3
         reference_polyhedron = "GE_ReferenceTetrahedron"
         nb_nodes = 10
         node_locations = array( vector( 0.0, 0.0, 0.0 ),   // 0
                                 vector( 1.0, 0.0, 0.0 ),   // 1
                                 vector( 0.0, 1.0, 0.0 ),   // 2
                                 vector( 0.0, 0.0, 1.0 ),   // 3
                                 vector( 0.5, 0.0, 0.0 ),   // 4
                                 vector( 0.5, 0.5, 0.0 ),   // 5
                                 vector( 0.0, 0.5, 0.0 ),   // 6
                                 vector( 0.0, 0.0, 0.5 ),   // 7
                                 vector( 0.5, 0.0, 0.5 ),   // 8
                                 vector( 0.0, 0.5, 0.5 ) )  // 9
      END MODULE geometry  
      MODULE bf_value_at_nodes
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE bf_value_at_nodes
      MODULE dbf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 1.E-7
         dbl_minimum = 1.E-8
      END MODULE dbf_value_at_random_points
      MODULE d2bf_value_at_random_points
         nb_random_points = 500
         dbl_epsilon = 1.E-8
         dbl_minimum = 1.E-8
      END MODULE d2bf_value_at_random_points
      MODULE value_at_random_points
         MODULE constante
            nb_random_points = 100
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = 3.
            gradient = vector( 0., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE constante
         MODULE x
            nb_random_points = 100
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x
            gradient = vector( 1., 0., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE x
         MODULE y
            nb_random_points = 100
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_y
            gradient = vector( 0., 1., 0. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE y
         MODULE z
            nb_random_points = 100
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_z
            gradient = vector( 0., 0., 1. )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE z
         MODULE f
            nb_random_points = 10
            dbl_epsilon = 1.E-8
            dbl_minimum = 1.E-8
            function = $DS_x + 0.5*$DS_y - 3.14*$DS_z - 1.0
            gradient = vector( 1.0, 0.5, -3.14 )
            second_derivative = array( vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ),
                                       vector( 0., 0., 0. ) )
         END MODULE f
      END MODULE value_at_random_points
   END MODULE PDE_3D_P1isoP2_10nodes
   
END MODULE PEL_ObjectTest#PDE_ReferenceElement_TEST
