.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TEST 1"
.TH TEST 1 "2010-03-17" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
test \- comparison between runs of a PELICANS\-based application (for regression testing)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
pel test [\-help|\-man]
.PP
pel test [options...] \fIexe\fR \fIdirs\fR
.PP
pel test \-build_pattern \fIfilename\fR \fIexe\fR \fIdirs\fR
.PP
pel test \-verify_pattern \fIfilename\fR \fIexe\fR \fIdirs\fR
.PP
pel test \-build_then_verify_pattern \fIfilename\fR \fIexe\fR \fIdirs\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Comparing in details two runs of an application is important for
the sake of non regression or installation testing.
.PP
Given a hierarchy of directories containing reference runs
of a given application, \f(CW\*(C`pel test\*(C'\fR will perform the following actions:
.IP "1." 4
create, in the
working directory, a subdirectory
in which that hierarchy is duplicated;
.IP "2." 4
in all subdirectories of the duplicate hierarchy, run the application
with the associated reference data file (called \fIdata.pel\fR);
.IP "3." 4
compare the results of this run with the reference results.
.PP
On completion, the conclusions of all these comparisons are recorded
in a report file located in the current directory.
.PP
The essentials of \f(CW\*(C`pel test\*(C'\fR tasks are forwarded to the PELICANS-based
application \*(L"peltest\*(R" (contained in the executable specified by the
\&\fB\-peltest_exe\fR option if any, or by the argument \fIexe\fR).
.PP
Further details are given below.
.IP "." 4
If a test failure is pronounced, the character sequence
\&\*(L"Test failed\*(R" will appear in the report file.
.IP "." 4
Runs are performed with the commands like:
.Sp
sequential: \fIexe\fR \fIdata.pel\fR \-v [opts...] > \fIresu\fR
.Sp
parallel:   \fImpirun\fR [mpi_opts...] \fIexe\fR \fIdata.pel\fR \-v \-o \fIresu\fR [opts...]
.Sp
where the options \f(CW\*(C`opts...\*(C'\fR and \f(CW\*(C`mpi_opts...\*(C'\fR are determined
for all runs by the calling options of \f(CW\*(C`pel test\*(C'\fR (see below)
and for one specific run by a possible file \fIconfig.pel\fR in
the reference directory of that run.
.Sp
A file \fIconfig.pel\fR containing:
.Sp
.Vb 3
\&  MODULE test_config
\&    run_options = vector( "...", "..." )
\&  END MODULE test_config
.Ve
.Sp
leads to the addition in \f(CW\*(C`opts...\*(C'\fR of all items in the StringVector
(only for the run associated to the directory
containing the considered file \fIconfig.pel\fR).
.Sp
A file \fIconfig.pel\fR containing:
.Sp
.Vb 3
\&  MODULE test_config
\&    mpi_options = vector( "...", "..." )
\&  END MODULE test_config
.Ve
.Sp
switches to parallel execution and leads to the addition in \f(CW\*(C`mpi_opts...\*(C'\fR of
all items in the StringVector (only for the run associated to the directory
containing the considered file \fIconfig.pel\fR).
An additional optional StringVector data of keyword \f(CW\*(C`mpi_machinefile\*(C'\fR
can be used to specify the list of possible machines to run on
(this data is written on a temporary machine file transmitted to \fImpirun\fR
via the option \f(CW\*(C`\-machinefile\*(C'\fR).
.IP "." 4
The exit code is tested. The test failure is pronounced
if it is non zero, unless it exists a file \fIconfig.pel\fR, stored in
the reference directory, containing:
.Sp
.Vb 3
\&  MODULE test_config
\&    failure_expected = true
\&  END MODULE test_config
.Ve
.Sp
in which case success might be pronounced if exit code is non zero and
one or more produced files called \fIexpected.err*\fR are identical
(same name and same content) to those present in the reference directory.
.IP "." 4
The test failure is pronounced if the \fIresu\fR file has not been produced.
.IP "." 4
All files that have been produced during the run (other than \fIresu\fR) 
are compared (as described below) with the reference ones (that must exist).
This comparison might be avoided from some particular file of a particular
run if the associated reference directory stores a file \fIconfig.pel\fR
containing:
.Sp
.Vb 3
\&  MODULE test_config
\&    files_to_ignore = vector( "...", "..." )
\&  END MODULE test_config
.Ve
.Sp
The items of the StringVector correspond to files produced during the run for
which no comparison will be performed.
.IP "." 4
The comparison method between the reference and produced files
depends on the format of these files.
.Sp
There are three \*(L"native\*(R" formats understood by \s-1PELICANS:\s0
the format called \s-1GENE\s0, for \f(CW\*(C`TIC\*(C'\fR postprocessing; the
format called \s-1PEL\s0, for Hierarchical Data Structures with the \s-1PELICANS\s0 format;
the format called \s-1CSV\s0, for comma separated values.
.Sp
The files with format \s-1GENE\s0, \s-1PEL\s0 or \s-1CSV\s0 are compared to the reference ones
with the PELICANS-based application \*(L"pelcmp\*(R" (contained in the
executable specified by the \fB\-peltest_exe\fR option if any, or by the
argument \fIexe\fR). If they are not identical, the comparison results
are recorded in the report file (the test failure is not pronounced since
differences may be acceptable, depending on the use case).
.Sp
The other files are compared line by line with the reference ones.
If they are not the same, the test failure is pronounced.
.IP "." 4
The format of a file, say \fIsave.zzz\fR, is determined as follows.
It can be specified via a configuration file \fIconfig.pel\fR stored
in the reference directory:
.Sp
.Vb 8
\&  MODULE test_config
\&    MODULE PEL_Comparator
\&      MODULE xxx               // xxx is a non significant name
\&        filename = "save.zzz"
\&        format = "CSV"         // either "GENE", "PEL" of "CSV"
\&      END MODULE xxx
\&    END MODULE PEL_Comparator
\&  END MODULE test_config
.Ve
.Sp
If such a specification is absent, the format is identified on the
basis of a motif appearing in the file name: \fI.gene\fR gives the \s-1GENE\s0
format, \fI.pel\fR gives the \s-1PEL\s0 format, \fI.csv\fR gives the \s-1CSV\s0 format.
.IP "." 4
The files with format \s-1GENE\s0 or \s-1PEL\s0 contain data identified by keywords.
The comparison might ignore some of these data if the associated
reference directory stores a file \fIconfig.pel\fR
containing:
.Sp
.Vb 8
\&  MODULE test_config
\&    MODULE PEL_Comparator
\&      MODULE xxx               // xxx is a non significant name
\&        filename = "save.zzz"  // file with format GENE or PEL
\&        ignore_data = vector( "...", "..." )
\&      END MODULE xxx
\&    END MODULE PEL_Comparator
\&  END MODULE test_config
.Ve
.Sp
The items of the StringVector correspond to keywords of data that
should be ignored during the comparison.
.IP "." 4
The floating point values contained in the reference and produced files
(with format \s-1GENE\s0, \s-1PEL\s0 or \s-1CSV\s0) are compared with PEL::double_equality.
The last two arguments of
this member function are respectively called a_dbl_eps (a
kind of tolerance on relative errors) and a_dbl_min (a lower bound under which
values are undistinguishable from zero).
.Sp
By default, a_dbl_eps and a_dbl_min are equal to zero (which means that
comparisons without any tolerance are performed).
They can be given other values either globally (for all runs)
using the \f(CW\*(C`\-dbl_eps\*(C'\fR and \f(CW\*(C`\-dbl_min\*(C'\fR options, or for a specific
run via a file \fIconfig.pel\fR in the reference directory of that
run.
.Sp
For instance, a file \fIconfig.pel\fR containing:
.Sp
.Vb 11
\&  MODULE test_config
\&     MODULE PEL_Comparator
\&        MODULE xxx                       // xxx is a non significant name
\&           filename = "save.csv"
\&           MODULE double_comparison
\&              dbl_min = 1.e\-10
\&              dbl_eps = 1.e\-8
\&           END MODULE double_comparison
\&        END MODULE xxx
\&     END MODULE PEL_Comparator
\&  END MODULE test_config
.Ve
.Sp
will set a_dbl_min=1.e\-10 and a_dbl_eps=1.e\-8 for comparisons between
the floating point values of the files \fIsave.csv\fR.
.Sp
Note that the command line options \f(CW\*(C`\-dbl_eps\*(C'\fR and \f(CW\*(C`\-dbl_min\*(C'\fR
always overread the options stated in the files \fIconfig.pel\fR.
Moreover the line option \f(CW\*(C`\-exact\*(C'\fR can be used to ignore any
setting of a_dbl_min and a_dbl_max in the \fIconfig.pel\fR files.
.PP
When the \f(CW\*(C`\-verify_pattern\*(C'\fR option is activated, the behavior
of \f(CW\*(C`pel test\*(C'\fR is slightly different: the only test performed
is the conformance of the reference data file \fIdata.pel\fR with
the given pattern file.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\fBexe\fR" 4
.IX Item "exe"
Name of the executable of the PELICANS-based application to run.
.IP "\fBdirs\fR" 4
.IX Item "dirs"
List of the directories defining the reference runs. Any subdirectory
of an item of \fIdirs\fR containing a file \fIdata.pel\fR is considered
by \f(CW\*(C`pel test\*(C'\fR as a definition of a reference run whose data file
is \fIdata.pel\fR. This subdirectory must contain the reference
version of all the files produced when calling \fIexe\fR with that
data file. It might also contain (see above) a file called \fIconfig.pel\fR
and, more rarely, files called \fIexpected.err*\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-help\fR" 4
.IX Item "-h, -help"
Print a brief help message and exit.
.IP "\fB\-m, \-man\fR" 4
.IX Item "-m, -man"
Print the manual page and exit.
.IP "\fB\-v, \-verbose\fR" 4
.IX Item "-v, -verbose"
Execute verbosely.
.IP "\fB\-Cpost\fR" 4
.IX Item "-Cpost"
Call \f(CW\*(C`pel run\*(C'\fR with this option for all runs.
.IP "\fB\-Call\fR" 4
.IX Item "-Call"
Call \f(CW\*(C`pel run\*(C'\fR with this option for all runs.
.IP "\fB\-build_pattern\fR \fIfilename\fR" 4
.IX Item "-build_pattern filename"
Call \f(CW\*(C`pel run\*(C'\fR with this option for all runs.
.IP "\fB\-verify_pattern\fR \fIfilename\fR" 4
.IX Item "-verify_pattern filename"
Do not perform the runs, but instead use the PELICANS-based application
\&\*(L"check\*(R" (contained in the argument \fIexe\fR) to check the conformity
of all reference data file \fIdata.pel\fR with the pattern file \fIfilename\fR.
.IP "\fB\-build_then_verify_pattern\fR \fIfilename\fR" 4
.IX Item "-build_then_verify_pattern filename"
Call \f(CW\*(C`pel run\*(C'\fR with the option \fB\-build_pattern\fR \fIfilename\fR 
for all runs and then check the conformity
of all reference data file \fIdata.pel\fR with the created pattern file
\&\fIfilename\fR (equivalent to two calls of \f(CW\*(C`pel test\*(C'\fR
with successively the \fB\-build_pattern\fR and the \fB\-verify_pattern\fR options).
.IP "\fB\-test_directory\fR \fIdirname\fR" 4
.IX Item "-test_directory dirname"
Duplicate the hierarchy of directories containing the reference runs
in the subdirectory \fIdirname\fR of the working directory,
and run the application in the subdirectories of \fIdirname\fR for further
result comparison with the reference runs (default: \fI\s-1PELICANS_TEST\s0\fR).
.IP "\fB\-peltest_exe\fR \fItexe\fR" 4
.IX Item "-peltest_exe texe"
Specify the executable containing the \*(L"peltest\*(R" and \*(L"pelcmp\*(R" applications.
Default is the argument \fIexe\fR itself.
.IP "\fB\-dbl_eps\fR \fIeps\fR" 4
.IX Item "-dbl_eps eps"
Specify the a_dbl_eps argument in calls to PEL::double_equality
when comparing floating point values. This option is only
significant for files with format \s-1PEL\s0, \s-1CSV\s0 or \s-1GENE\s0.
.IP "\fB\-dbl_min\fR \fImin\fR" 4
.IX Item "-dbl_min min"
Specify the a_dbl_min argument in calls to PEL::double_equality
when comparing floating point values. This option is only
significant for files with format \s-1PEL\s0, \s-1CSV\s0 or \s-1GENE\s0.
.IP "\fB\-exact\fR" 4
.IX Item "-exact"
Always perform comparisons between floating point values
without any tolerance, whatever settings of a_dbl_eps
and a_dbl_eps in files \fIconfig.pel\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.ie n .IP """pel test ../bin/exe ../RegressionTests""" 4
.el .IP "\f(CWpel test ../bin/exe ../RegressionTests\fR" 4
.IX Item "pel test ../bin/exe ../RegressionTests"
Run executable \fIexe\fR located in the directory \fI../bin\fR
with all data files \fIdata.pel\fR contained in the subdirectories
of \fI../RegressionTests\fR and compare the results with the reference ones.
Create a report file in the current directory recording the conclusions
of all comparisons.
.ie n .IP """pel test \-build_pattern pat.pel ../bin/exe ../Tests""" 4
.el .IP "\f(CWpel test \-build_pattern pat.pel ../bin/exe ../Tests\fR" 4
.IX Item "pel test -build_pattern pat.pel ../bin/exe ../Tests"
Same as before, with in addition the learning and storage of the requested
structure of the data files in \fIpat.pel\fR.
.ie n .IP """pel test \-verify_pattern pat.pel ../bin/exe ../Appli""" 4
.el .IP "\f(CWpel test \-verify_pattern pat.pel ../bin/exe ../Appli\fR" 4
.IX Item "pel test -verify_pattern pat.pel ../bin/exe ../Appli"
Check the conformance with \fIpat.pel\fR of all files \fIdata.pel\fR contained 
in a subdirectory of \fI../Appli\fR, and record the conclusions in a report 
file in the current directory.
