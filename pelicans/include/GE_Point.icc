/*
 *  Copyright 1995-2010 by IRSN
 *
 *  This software is an application framework, with a set of integrated  
 *  reusable components, whose purpose is to simplify the task of developing 
 *  softwares of numerical mathematics and scientific computing.
 * 
 *  This software is governed by the CeCILL-C license under French law and 
 *  abiding by the rules of distribution of free software. You can use, modify 
 *  and/or redistribute the software under the terms of the CeCILL-C license  
 *  as circulated by CEA, CNRS and INRIA at the following URL 
 *  "http://www.cecill.info". 
 *
 *  As a counterpart to the access to the source code and rights to copy,  
 *  modify and redistribute granted by the license, users are provided only 
 *  with a limited warranty and the software's author, the holder of the  
 *  economic rights, and the successive licensors have only limited liability. 
 *
 *  In this respect, the user's attention is drawn to the risks associated  
 *  with loading, using, modifying and/or developing or reproducing the  
 *  software by the user in light of its specific status of free software,
 *  that may mean that it is complicated to manipulate, and that also  
 *  therefore means that it is reserved for developers and experienced 
 *  professionals having in-depth computer knowledge. Users are therefore 
 *  encouraged to load and test the software's suitability as regards their 
 *  requirements in conditions enabling the security of their systems and/or 
 *  data to be ensured and, more generally, to use and operate it in the same 
 *  conditions as regards security. 
 *
 *  The fact that you are presently reading this means that you have had 
 *  knowledge of the CeCILL-C license and that you accept its terms.
 */

//----------------------------------------------------------------------
inline
size_t
GE_Point:: nb_coordinates( void ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "GE_Point:: nb_coordinates" ) ;
   PEL_CHECK_INV( invariant() ) ;
   return( xx.size() ) ;
}

//----------------------------------------------------------------------
inline
double
GE_Point:: coordinate( size_t ic ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "GE_Point:: coordinate" ) ;
   PEL_CHECK_PRE( ic<nb_coordinates() ) ;
   PEL_CHECK_INV( invariant() ) ;
   return( xx(ic) ) ;
}

//----------------------------------------------------------------------
inline
doubleVector const&
GE_Point:: coordinate_vector( void ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "GE_Point:: coordinate_vector" ) ;
   PEL_CHECK_INV( invariant() ) ;
   return( xx ) ;
}

//----------------------------------------------------------------------
inline
void
GE_Point:: set_coordinate( size_t ic, double x )
//----------------------------------------------------------------------
{
   PEL_LABEL( "GE_Point:: set_coordinate" ) ;
   PEL_CHECK_PRE( ic<nb_coordinates() ) ;
   PEL_SAVEOLD( doubleVector,
                coordinate,
                doubleVector( nb_coordinates() ) ;
                for( size_t i=0 ; i<nb_coordinates() ; ++i )
                {
                   OLD(coordinate(i)) = coordinate(i) ;
                } ) ;
   xx( ic ) = x ;
   PEL_CHECK_INV( invariant() ) ;
   PEL_CHECK_POST(
      FORALL( (size_t i=0 ; i<nb_coordinates() ; ++i ),
              ( IMPLIES( i!=ic, coordinate(i)==OLD(coordinate(i)) ) ) &&
              ( IMPLIES( i==ic, coordinate(ic)==x ) ) ) ) ;
}



