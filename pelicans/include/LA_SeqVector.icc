/*
 *  Copyright 1995-2010 by IRSN
 *
 *  This software is an application framework, with a set of integrated  
 *  reusable components, whose purpose is to simplify the task of developing 
 *  softwares of numerical mathematics and scientific computing.
 * 
 *  This software is governed by the CeCILL-C license under French law and 
 *  abiding by the rules of distribution of free software. You can use, modify 
 *  and/or redistribute the software under the terms of the CeCILL-C license  
 *  as circulated by CEA, CNRS and INRIA at the following URL 
 *  "http://www.cecill.info". 
 *
 *  As a counterpart to the access to the source code and rights to copy,  
 *  modify and redistribute granted by the license, users are provided only 
 *  with a limited warranty and the software's author, the holder of the  
 *  economic rights, and the successive licensors have only limited liability. 
 *
 *  In this respect, the user's attention is drawn to the risks associated  
 *  with loading, using, modifying and/or developing or reproducing the  
 *  software by the user in light of its specific status of free software,
 *  that may mean that it is complicated to manipulate, and that also  
 *  therefore means that it is reserved for developers and experienced 
 *  professionals having in-depth computer knowledge. Users are therefore 
 *  encouraged to load and test the software's suitability as regards their 
 *  requirements in conditions enabling the security of their systems and/or 
 *  data to be ensured and, more generally, to use and operate it in the same 
 *  conditions as regards security. 
 *
 *  The fact that you are presently reading this means that you have had 
 *  knowledge of the CeCILL-C license and that you accept its terms.
 */

//----------------------------------------------------------------------
inline
double
LA_SeqVector:: item( size_t i ) const 
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: item" ) ;
   PEL_CHECK_PRE( item_PRE( i ) ) ;
   
   return( DATA[i] ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: set_item( size_t i, double x ) 
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: set_item" ) ;
   PEL_CHECK_PRE( set_item_PRE( i ) ) ;
   PEL_SAVEOLD( LA::SyncState, state, state() ) ;
   
   if( is_desynchronizable() && !only_local_modifs() )
   {
      set_unsynchronized_state( LA::NotSync_set ) ;
   }
   DATA[i] = x ;

   PEL_CHECK_POST( FORMAL( item(i) == x ) ) ;
   PEL_CHECK_POST( set_item_POST( i, OLD( state ) ) ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: add_to_item( size_t i, double x ) 
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: add_to_item" ) ;
   PEL_CHECK_PRE( add_to_item_PRE( i ) ) ;
   PEL_SAVEOLD( LA::SyncState, state, state() ) ;
   
   if( is_desynchronizable() && !only_local_modifs() )
   {
      set_unsynchronized_state( LA::NotSync_add ) ;
   }
   DATA[i] += x ;

   PEL_CHECK_POST( FORMAL( item(i) == OLD(item)+x ) ) ;
   PEL_CHECK_POST( add_to_item_POST( i, OLD( state ) ) ) ;
}

//----------------------------------------------------------------------
inline
double const*
LA_SeqVector:: data( void ) const
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: data const" ) ;
   
   double const* result = DATA ;

   PEL_CHECK_POST( EQUIVALENT( nb_rows()>0, result != 0 ) ) ;
   return( result ) ;
}

//----------------------------------------------------------------------
inline
double*
LA_SeqVector:: data( void )
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: data" ) ;
   
   double* result = DATA ;

   PEL_CHECK_POST( EQUIVALENT( nb_rows()>0, result != 0 ) ) ;
   return( result ) ;
}

//----------------------------------------------------------------------
inline
void
LA_SeqVector:: set( size_t a_nb_rows, double* values )
//----------------------------------------------------------------------
{
   PEL_LABEL( "LA_SeqVector:: set" ) ;
   PEL_CHECK_PRE( EQUIVALENT( a_nb_rows > 0, values != 0 ) ) ;

   if( OWNS_DATA && DATA != 0 ) delete [] DATA ;
   
   set_rows_number( a_nb_rows ) ;
   make_non_resizable() ;
   OWNS_DATA = false ;
   DATA = values ;

   PEL_CHECK_POST( nb_rows() == a_nb_rows ) ;
   PEL_CHECK_POST( data() == values ) ;
   PEL_CHECK_POST( !is_resizable() ) ;
}
